{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Th\u00e8mes en cours d'\u00e9tude  </p> <ul> <li>Th\u00e8me 3 : Type Construit : les Listes</li> </ul> <p>Entra\u00eenement :running: </p> <p>Vous trouverez ci dessous quelques sites pour vous entrainez en Python - e-nsi - cercles informatiques - France IOI - Pyrates</p> <p>Th\u00e8mes trait\u00e9s</p> <ul> <li>Th\u00e8me 2 : Type de base : binaire</li> <li>Th\u00e8me 2 : Type de base : Entiers</li> <li>Th\u00e8me 2 : Type de base : D\u00e9cimaux</li> <li>Th\u00e8me 7 : IHM Web : HTML et CSS</li> <li>Th\u00e8me 1 : D\u00e9marrer en Python</li> <li>Th\u00e8me 2 : Type de base : chaines de caract\u00e8res</li> <li>Mini projet</li> <li>Th\u00e8me 2 : Type de base : Booleens</li> <li>Th\u00e8me 4 : Architecture de Von Neumann</li> </ul>"},{"location":"T1_Demarrer_en_Python/sommaire/","title":"Th\u00e8me 1 : Bases de Python","text":"<p>Cr\u00e9dits</p> <p>Cr\u00e9dit du cours : @Gilles Lassus</p> <ol> <li>Variables</li> <li>Boucle For</li> <li>Boucle While</li> <li>Instruction conditionnelle If</li> <li>Fonctions</li> <li>Entrainement</li> </ol>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/","title":"1.1 Variables","text":""},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#a-pourquoi-des-variables","title":"A. Pourquoi des variables ?","text":""},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#a1-introduction","title":"A.1 Introduction","text":"<p>Consid\u00e9rons la phrase \u00abnous allons stocker le prix du spectacle dans une variable  <code>a</code>, qui vaudra donc au d\u00e9part 32.\u00bb</p> <p>Il y a plusieurs commentaires \u00e0 faire sur une telle annonce :</p> <ul> <li>Dans le probl\u00e8me que l'on cherche \u00e0 mod\u00e9liser, le prix du spectacle est une donn\u00e9e importante, qui va peut-\u00eatre \u00e9voluer (ou pas !).</li> <li>Pour la manipuler plus simplement, on va la d\u00e9signer par un nom, le nom de la variable (ici, le nom <code>a</code> est particuli\u00e8rement mal choisi, voir D. Bonnes pratiques de nommage)</li> <li>Comme en math\u00e9matiques, le nom de cette variable va d\u00e9signer une valeur qui peut changer (varier) au cours du temps (encore une fois : ou pas).</li> <li>Cette valeur est fix\u00e9e au d\u00e9part \u00e0 32. On dira en informatique qu'elle est initialis\u00e9e \u00e0 32.</li> <li>Si cette valeur ne change pas, on dira qu'elle est constante. Cela peut para\u00eetre inutile de donner un nom \u00e0 quelque chose qui ne change pas, mais cela est tr\u00e8s utile de d\u00e9finir les constantes au d\u00e9but d'un programme. </li> </ul>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#a2-on-code","title":"A.2 On code !","text":"<p>La phrase pr\u00e9c\u00e9dente donnera donc lieu \u00e0 la ligne Python suivante :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 32\n</code></pre> <p>Attention</p> <p>Le symbole <code>=</code> ici utilis\u00e9 n'a rien \u00e0 voir avec le symbole = utilis\u00e9 en math\u00e9matique. On dit qu'on a affect\u00e9 \u00e0 <code>a</code> la valeur 32, et il faut se repr\u00e9senter mentalement cette action par l'\u00e9criture <code>a \u2190 32</code>.</p> <p>Comparaison de la syntaxe dans diff\u00e9rents langages</p> PythonCPHPJavaJavascriptRustGo \ud83d\udc0d Script Python<pre><code>a = 32\n</code></pre> C<pre><code>int a = 32;\n</code></pre> PHP<pre><code>$a = 32;\n</code></pre> Java<pre><code>int a = 32;\n</code></pre> JavaScript<pre><code>var a = 32;\n</code></pre> Rust<pre><code>let a = 32;\n</code></pre> Go<pre><code>a := 32\n</code></pre> <p>Une fois la valeur 32 stock\u00e9e dans la variable <code>a</code>, on peut alors utiliser cette variable :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a\n32\n&gt;&gt;&gt; a + 5\n37\n&gt;&gt;&gt; b\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nNameError: name 'b' is not defined\n</code></pre> <p>Remarquez bien l'erreur lorsqu'on a fait appel \u00e0 une variable <code>b</code> qui n'avait jamais \u00e9t\u00e9 d\u00e9finie, comme le dit explicitement le message <code>NameError: name 'b' is not defined</code> </p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b-le-fonctionnement-interne","title":"B. Le fonctionnement interne","text":""},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b1-explication-simplifiee","title":"B.1 Explication simplifi\u00e9e","text":"<p>En premi\u00e8re intention, il est possible d'expliquer le fonctionnement interne de l'affectation des variables par la m\u00e9taphore des tiroirs :</p> <p>\u00c9crire  l'instruction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 2\n</code></pre></p> <p>va provoquer chez l'ordinateur le comportement suivant :</p> <ul> <li>Est-ce que je poss\u00e8de d\u00e9j\u00e0 un tiroir appel\u00e9 <code>a</code> ? <ul> <li>si oui, je me positionne devant.</li> <li>si non, je cr\u00e9e un tiroir appel\u00e9 <code>a</code>.</li> <li>J'ouvre le tiroir et j'y d\u00e9pose la valeur num\u00e9rique 2. Si le tiroir contenait d\u00e9j\u00e0 une valeur, celle-ci dispara\u00eet (on dit qu'elle est \u00e9cras\u00e9e).</li> </ul> </li> </ul> <p></p> <p>Cette explication est suffisante pour aborder la notion de variable : c'est un mot (ou une lettre) qui va d\u00e9signer une valeur. </p> <p>Partie difficile (optionnelle)</p> <p>La m\u00e9taphore du tiroir est malheureusement un peu trop simplificatrice.</p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b2-une-realite-bien-plus-complexe","title":"B.2 Une r\u00e9alit\u00e9 bien plus complexe...","text":""},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b21-la-commande-id-ladresse-du-tiroir","title":"B.2.1 La commande <code>id()</code> : l'adresse du tiroir ?","text":"<p>Python poss\u00e8de une fonction qui renvoie l'adresse m\u00e9moire de la variable donn\u00e9e en argument. </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; b = 7\n&gt;&gt;&gt; id(b)\n9788800\n</code></pre> <p>Faites le test avec votre propre IDE Python (vous n'obtiendrez pas forc\u00e9ment la m\u00eame valeur d'adresse m\u00e9moire)</p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b22-cela-se-complique","title":"B.2.2 Cela se complique.","text":"<p>Sans refermer notre IDE, \u00e9crasons la valeur de <code>b</code> avec une nouvelle valeur : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; b = 12\n</code></pre> et redemandons l'adresse de <code>b</code> : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; id(b)\n9788960\n</code></pre></p> <p>Tr\u00e8s mauvaise nouvelle : l'adresse de la variable <code>b</code> a chang\u00e9. Ceci invalide notre m\u00e9taphore du \u00abtiroir\u00bb, une place unique qui serait r\u00e9serv\u00e9e pour y stocker les valeurs successives d'une variable. </p> <p>La modification de la valeur de <code>b</code> ne s'est pas faite \u00aben place\u00bb, la variable <code>b</code> s'est d\u00e9plac\u00e9e : que s'est-il donc pass\u00e9 ?</p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b23-tentative-dexplication","title":"B.2.3 Tentative d'explication","text":"<p>L'affectation  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; b = 9\n</code></pre> ne provoque pas la r\u00e9servation d\u00e9finitive d'un espace-m\u00e9moire pour la variable <code>b</code>, mais la cr\u00e9ation d'un lien vers un espace-m\u00e9moire qui contient la valeur 9. Ce lien consiste en l'adresse-m\u00e9moire de cette valeur 9. </p> <p>Cette adresse-m\u00e9moire vaut (sur ma configuration personnelle) <code>9788864</code>. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; id(b)\n9788864\n</code></pre></p> <p></p> <p>Comme le pr\u00e9sente le ruban ci-dessus, Python pr\u00e9-positionne les entiers (de -5 \u00e0 256) sur des petites adresses-m\u00e9moires, car il consid\u00e8re que ces entiers servent souvent, et doivent donc \u00eatre rapidement accessibles.</p> <p>Si on cr\u00e9\u00e9 une nouvelle variable <code>tokyo</code> aussi \u00e9gale \u00e0 9, elle va aussi pointer vers la m\u00eame adresse-m\u00e9moire :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tokyo = 9\n&gt;&gt;&gt; id(tokyo)\n9788864\n</code></pre> Les variables <code>tokyo</code> et <code>b</code> renvoient vers la m\u00eame adresse-m\u00e9moire.</p> <p>Affectons maintenant \u00e0 <code>tokyo</code> la valeur 2020 et observons son adresse-m\u00e9moire :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tokyo = 2020\n&gt;&gt;&gt; id(tokyo)\n139762979309936\n</code></pre> <p>L'adresse-m\u00e9moire est (bien) plus grande : elle a \u00e9t\u00e9 choisie sur le moment par Python pour y stocker 2020 (car 2020 &gt; 256). </p> <p>De mani\u00e8re plus surprenante, si on cr\u00e9\u00e9 une nouvelle variable <code>jo</code> qui vaut aussi 2020, Python va ouvrir une autre adresse-m\u00e9moire pour y stocker 2020, alors qu'il l'a d\u00e9j\u00e0 stock\u00e9e ailleurs :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; jo = 2020\n&gt;&gt;&gt; id(jo)\n139762979310064\n</code></pre> <p>En r\u00e9sum\u00e9, une variable n'est pas le nom d'un tiroir mais plut\u00f4t le nom d'une fl\u00e8che qui pointe vers un espace-m\u00e9moire de l'ordinateur.  - La fl\u00e8che peut pointer vers un nouvel espace-m\u00e9moire sans que le nom de la variable change. - Deux variables peuvent pointer vers le m\u00eame espace-m\u00e9moire.</p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b3-une-histoire-en-2-temps-evaluation-affectation","title":"B.3 Une histoire en 2 temps : \u00e9valuation, affectation","text":"<p>Observons l'instruction \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 2 + 3\n</code></pre></p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b31-etape-1-levaluation","title":"B.3.1 \u00c9tape 1 : l'\u00e9valuation","text":"<p>Python va prendre la partie \u00e0 droite du signe \u00e9gal et va l'\u00e9valuer, ce qui signifie qu'il va essayer de lui donner une valeur. Dans nos exemples, cette valeur sera num\u00e9rique, mais elle peut \u00eatre d'un autre type (voir plus loin)</p> <p>Ici, Python effectue le calcul 2 + 3 et l'\u00e9value \u00e0 la valeur 5.</p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b32-etape-2-laffectation","title":"B.3.2 \u00c9tape 2 : l'affectation","text":"<p>Une fois \u00e9valu\u00e9e l'expression \u00e0 droite du signe =, il ne reste plus qu'\u00e0 l'affecter \u00e0 la variable (d\u00e9j\u00e0 existante ou pas) situ\u00e9e \u00e0 gauche du signe =.</p> <p>Comme expliqu\u00e9 pr\u00e9c\u00e9demment, un \u00ablien\u00bb est fait entre le nom de la variable et l'adresse-m\u00e9moire qui contient la valeur \u00e9valu\u00e9e. <code>a</code> sera donc li\u00e9 \u00e0 la valeur 5. Plus simplement, on dira que \u00ab<code>a</code> vaut 5\u00bb </p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b32-lincrementation-dune-variable","title":"B.3.2 L'incr\u00e9mentation d'une variable.","text":"<p>\u00abIncr\u00e9menter\u00bb une variable signifie l'augmenter. </p> <p>Imaginons une variable appel\u00e9e <code>compteur</code>. Au d\u00e9marrage de notre programme, elle est initialis\u00e9e \u00e0 la valeur 0.  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; compteur = 0\n</code></pre></p> <p>Consid\u00e9rons qu'\u00e0 un moment du programme, cette variable doit \u00eatre modifi\u00e9e, par exemple en lui ajoutant 1.</p> <p>En Python, cela s'\u00e9crira :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; compteur = compteur + 1\n</code></pre> <p>Observ\u00e9e avec des yeux de math\u00e9maticien, la pr\u00e9c\u00e9dente instruction est une horreur.</p> <p></p> <p>Vue avec des yeux d'informaticien, voil\u00e0 comment est interpr\u00e9t\u00e9e la commande \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; compteur = compteur + 1\n</code></pre></p> <ol> <li>On \u00e9value la partie droite de l'\u00e9galit\u00e9, donc l'expression <code>compteur + 1</code>.</li> <li>On va donc chercher le contenu de la variable <code>compteur</code>. Si celle-ci n'existe pas, un message d'erreur est renvoy\u00e9.</li> <li>On additionne 1 au contenu de la variable <code>compteur</code>.</li> <li>On \u00e9crase le contenu actuel de la variable <code>compteur</code> avec la valeur obtenue au 3.   </li> </ol> <p>\u00c0 la fin de ces op\u00e9rations, la variable <code>compteur</code> a bien augment\u00e9 de 1.</p> <p>Cette proc\u00e9dure d'incr\u00e9mentation est tr\u00e8s tr\u00e8s classique, il faut la ma\u00eetriser parfaitement !</p> <p>Syntaxe classique et syntaxe Pythonesque </p> <p>L'incr\u00e9mentation d'une variable <code>compteur</code> s'\u00e9crira donc en Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; compteur = compteur + 1\n</code></pre> Mais il existe aussi une syntaxe particuli\u00e8re, un peu plus courte :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; compteur += 1\n</code></pre> Cette syntaxe peut se ranger dans la cat\u00e9gorie des sucres syntaxiques : c'est bien de la conna\u00eetre, c'est amusant de s'en servir, mais son utilisation n'est en rien obligatoire et peut avoir un effet n\u00e9faste, celui d'oublier r\u00e9ellement ce qu'il se passe derri\u00e8re.</p> <p>exercice 1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire le code \u00abclassique\u00bb et le code \u00abPythonesque\u00bb pour l'instruction suivante :</p> <p>On initialise une variable <code>score</code> \u00e0 100 et on l'augmente de 15.</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; score = 100\n&gt;&gt;&gt; score = score + 15\n</code></pre> ou bien \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; score = 100\n&gt;&gt;&gt; score += 15\n</code></pre></p> <p>exercice 2</p> \u00c9nonc\u00e9Correction <p>\u00c9crire le code \u00abclassique\u00bb et le code \u00abPythonesque\u00bb pour l'instruction suivante :</p> <p>On initialise une variable <code>cellule</code> \u00e0 1 et on la multiplie par 2.</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cellule = 1\n&gt;&gt;&gt; cellule = cellule * 2\n</code></pre> ou bien \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cellule = 1\n&gt;&gt;&gt; cellule *= 2\n</code></pre></p> <p>exercice 3</p> \u00c9nonc\u00e9Correction <p>\u00c9crire le code \u00abclassique\u00bb et le code \u00abPythonesque\u00bb pour l'instruction suivante.</p> <p>On initialise une variable <code>capital</code> \u00e0 1000 et on lui enl\u00e8ve 5%.</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; capital = 1000\n&gt;&gt;&gt; capital = capital - capital * 5/100\n</code></pre> ou bien \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; capital = 1000\n&gt;&gt;&gt; capital *= 0.95\n</code></pre></p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#b33-lechange-de-variables","title":"B.3.3 L'\u00e9change de variables","text":"<p>Apr\u00e8s l'incr\u00e9mentation, une autre technique de base reviendra fr\u00e9quemment dans nos codes : l'\u00e9change de variables.</p> <p>Imaginons les variables suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; b = 5\n</code></pre> Le but est d'\u00e9changer les valeurs de <code>a</code> et de <code>b</code>.</p> <p>\u25b8 M\u00e9thode na\u00efve</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = b\n&gt;&gt;&gt; b = a\n</code></pre> <p>Que valent <code>a</code> et <code>b</code> maintenant ?</p> <p>Malheureusement : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; b\n5\n&gt;\n</code></pre></p> <p>La variable <code>a</code> a \u00e9t\u00e9 \u00e9cras\u00e9e d\u00e8s qu'on lui a donn\u00e9 la valeur de la variable <code>b</code>.</p> <p>Comment la pr\u00e9server ?</p> <p>La situation est similaire au probl\u00e8me suivant : comment \u00e9changer le contenu de ces deux verres ?</p> <p></p> <p>La m\u00e9thode est \u00e9vidente : il nous faut un troisi\u00e8me verre.</p> <p>Nous allons faire de m\u00eame pour nos variables. Nous allons utiliser une variable temporaire (on parle aussi de variable tampon) pour conserver la m\u00e9moire de la valeur de <code>a</code> (par exemple) avant que celle-ci ne se fasse \u00e9craser :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; b = 5\n&gt;&gt;&gt; temp = a\n&gt;&gt;&gt; a = b\n&gt;&gt;&gt; b = temp\n</code></pre> <p>Vous pouvez v\u00e9rifier maintenant que les valeurs de <code>a</code> et de <code>b</code> ont bien \u00e9t\u00e9 \u00e9chang\u00e9es.</p> <p>Syntaxe classique et syntaxe Pythonesque </p> <p>L'\u00e9change de deux variables <code>a</code> et de <code>b</code> s'\u00e9crit donc : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; temp = a\n&gt;&gt;&gt; a = b\n&gt;&gt;&gt; b = temp\n</code></pre> Mais il existe aussi une syntaxe particuli\u00e8re \u00e0 Python, bien plus courte :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a, b = b, a\n</code></pre> C'est de nouveau un sucre syntaxique. Cette syntaxe nous dispense de cr\u00e9er nous-m\u00eame une troisi\u00e8me variable. Mais pas de miracle : en interne, Python cr\u00e9e lui-m\u00eame cette variable temporaire. La simultan\u00e9it\u00e9 n'existe pas en informatique.</p> <p>exercice 4</p> \u00c9nonc\u00e9Correction <p>Une petite erreur s'est gliss\u00e9e \u00e0 Poudlard : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maison_Harry = \"Serpentard\"\n&gt;&gt;&gt; maison_Malfoy =  \"Gryffondor\"\n</code></pre> Corriger cette erreur, de deux mani\u00e8res diff\u00e9rentes.</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; t = maison_Harry\n&gt;&gt;&gt; maison_Harry = maison_Malfoy\n&gt;&gt;&gt; maison_Malfoy = t\n</code></pre> ou plus rapidement : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maison_Harry, maison_Malfoy = maison_Malfoy, maison_Harry\n</code></pre></p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#c-differents-types-de-variables","title":"C. Diff\u00e9rents types de variables","text":"<p>Pour l'instant, les variables que nous avons manipul\u00e9es contiennent toutes des nombres entiers.</p> <p>Sauf les maisons de Poudlard, qui sont des mots cha\u00eenes de caract\u00e8res.</p> <p>Pour diff\u00e9rencier la nature de ce que peut contenir une variable, on parle alors de type de variable.</p> <p>En voici quelques uns, que nous d\u00e9couvrirons au fil de l'ann\u00e9e :</p> <p>Types de base</p> <p>Voici les types Python les plus fr\u00e9quemment utilis\u00e9s cette ann\u00e9e:</p> Type Python Traduction Exemple <code>int</code> entier <code>42</code> <code>float</code> flottant (d\u00e9cimal) <code>3.1416</code> <code>str</code> cha\u00eene de caract\u00e8res (string) <code>\"NSI\"</code> <code>bool</code> bool\u00e9en (True ou False) <code>True</code> <code>tuple</code> p-uplet <code>(255, 127, 0)</code> <code>list</code> liste <code>[0, 1, 2, 3, 4, 5]</code> <code>dict</code> dictionnaire <code>{'Homer':43, 'Marge':41, 'Bart':12, 'Lisa':10, 'Maggie':4}</code> <code>function</code> fonction <code>print</code> <p>Comment conna\u00eetre le type d'une variable ? Il suffit dans la console d'utiliser la fonction <code>type</code>.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; type(a)\n&lt;class 'int'&gt;\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#c1-python-et-le-typage-dynamique","title":"C.1 Python et le typage dynamique","text":"<p>Jusqu'\u00e0 pr\u00e9sent, nous ne nous sommes pas occup\u00e9s de pr\u00e9ciser \u00e0 Python le type de notre variable.</p> \ud83d\udc0d Script Python<pre><code>a = 3\n</code></pre> <p>Mais dans certains langages, c'est obligatoire. En C par exemple, il faut \u00e9crire :</p> <p>C<pre><code>int a = 3;\n</code></pre> Cela signifie (pour le langage C) que notre variable <code>a</code> n'aura pas le droit de contenir autre chose qu'un nombre entier.</p> <p>Si on \u00e9crit ensuite C<pre><code>a = \"test\";\n</code></pre></p> <p>Le compilateur C renverra une erreur : on ne peut pas stocker une cha\u00eene de caract\u00e8res dans une variable qu'on a cr\u00e9\u00e9e comme \u00e9tant de type entier.</p> <p>Et en Python ?</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; type(a)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; a = \"test\"\n&gt;&gt;&gt; type(a)\n&lt;class 'str'&gt;\n</code></pre> <p>Python a chang\u00e9 tout seul le type de notre variable, sans intervention. On parle de typage dynamique.</p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#d-bonnes-pratiques-de-nommage","title":"D. Bonnes pratiques de nommage","text":""},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#d1-ce-qui-est-autorise-et-ce-qui-ne-lest-pas","title":"D.1 Ce qui est autoris\u00e9 et ce qui ne l'est pas","text":"<p>Pour nommer correctement une variable, il existe des r\u00e8gles \u00e0 respecter.</p> <p>Les r\u00e8gles</p> <ul> <li> <p>le nom de la variable peut contenir les caract\u00e8res suivants :</p> <ul> <li>des lettres non accentu\u00e9es (attention, minuscule et majuscule sont des caract\u00e8res diff\u00e9rents)</li> <li>des chiffres (mais pas comme premier caract\u00e8re)</li> <li>le tiret du bas _ (underscore, tiret du 8)</li> </ul> </li> <li> <p>le nom de la variable ne doit pas commencer par un chiffre</p> </li> <li>le nom de la variable ne doit pas contenir d'espace</li> <li>le nom de la variable ne doit pas \u00eatre un mot-cl\u00e9 du langage.</li> </ul> Liste des mots-cl\u00e9s r\u00e9serv\u00e9s par Python <p><p> andas assert  break class  continue   def    del elif   else   except False  finally for   from   global    if   import in is  lambda None not     or  pass raise   return True try   while with    yield  </p></p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#d2-du-sens-du-sens-du-sens","title":"D.2 Du sens, du sens, du sens","text":"<p>Hormis pour les indices (de boucles, de tableaux...) un nom de variable (dans un programme destin\u00e9 \u00e0 \u00eatre lu, par vous ou quelqu'un d'autre) doit imp\u00e9rativement avoir du sens :</p> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nif d == 1:\n    cep += vm\n\n# BIEN\nif date == 1:\n    compte_epargne += versement_mensuel\n</code></pre> <p>R\u00e8gle d'or </p> <p>On ne donne jamais un nom de variable au hasard, on le choisit pour qu'il soit explicite.</p> <p></p> <p>Oui mais pour donner du sens, il faut souvent plusieurs mots... La longueur du nom de la variable (\u00abc'est trop long \u00e0 taper\u00bb) n'est plus un probl\u00e8me depuis que la grande majorit\u00e9 des IDE propose la compl\u00e9tion automatique. Mais comment former ces longs mots ?</p>"},{"location":"T1_Demarrer_en_Python/1.1_Variables/cours/#d3-syntaxe-des-noms-a-rallonge","title":"D.3 Syntaxe des noms \u00e0 rallonge","text":"<p>Comment accoler des mots</p> <ul> <li>S'il est compos\u00e9, le nom peut \u00eatre de la forme:<ul> <li><code>snake_case</code> : les mots sont s\u00e9par\u00e9s par des underscores. Conseill\u00e9 en Python.</li> <li><code>camelCase</code> : les mots sont s\u00e9par\u00e9s par des majuscules mais la 1\u00e8re lettre est minuscule. Conseill\u00e9 en Javascript.</li> <li><code>PascalCase</code> : les mots sont s\u00e9par\u00e9s par des majuscules et la 1\u00e8re lettre est majuscule. Conseill\u00e9 en C.</li> <li><code>kebab-case</code> : les mots sont s\u00e9par\u00e9s par des tirets courts. Conseill\u00e9 en HTML - CSS. </li> </ul> </li> </ul> <p>Sans surprise, en Python, nous utiliserons donc le <code>snake_case</code>.</p> <p></p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/","title":"Boucles born\u00e9es","text":"In\u00a0[\u00a0]: Copied! <pre>for i in [\"lundi\",\"mardi\",\"mercredi\"]:\n    print(i)\n</pre> for i in [\"lundi\",\"mardi\",\"mercredi\"]:     print(i) In\u00a0[\u00a0]: Copied! <pre>for k in \"bonjour\":\n    print(k)\n</pre> for k in \"bonjour\":     print(k) <p>L'instruction <code>ord()</code> permet de trouver le code ASCII d'un caract\u00e8re. Exemple :</p> In\u00a0[\u00a0]: Copied! <pre>ord(\"A\")\n</pre> ord(\"A\") <p>Inversement, l'instruction <code>chr()</code> permet de retrouver un caract\u00e8re \u00e0 partir du code ASCII. Exemple :</p> In\u00a0[\u00a0]: Copied! <pre>chr(66)\n</pre> chr(66) <p>D\u00e9coder la phrase myst\u00e8re ci-dessous, en utilisant une boucle <code>for</code>.</p> In\u00a0[\u00a0]: Copied! <pre>mystere = [111,107,44,32,98,105,101,110,32,106,111,117,233]\n</pre> mystere = [111,107,44,32,98,105,101,110,32,106,111,117,233] <p>Deux solutions :</p> In\u00a0[\u00a0]: Copied! <pre>mystere = [111,107,44,32,98,105,101,110,32,106,111,117,233]\nfor k in mystere:\n    print(chr(k))\n</pre> mystere = [111,107,44,32,98,105,101,110,32,106,111,117,233] for k in mystere:     print(chr(k)) <p>Ou de mani\u00e8re plus \u00e9l\u00e9gante,</p> In\u00a0[\u00a0]: Copied! <pre>mystere = [111,107,44,32,98,105,101,110,32,106,111,117,233]\ns = \"\"\nfor k in mystere:\n    s = s + chr(k)\nprint(s)\n</pre> mystere = [111,107,44,32,98,105,101,110,32,106,111,117,233] s = \"\" for k in mystere:     s = s + chr(k) print(s)      In\u00a0[\u00a0]: Copied! <pre>for k in range(5,20,3):\n    print(k)\n</pre> for k in range(5,20,3):     print(k) <p>La fonction <code>range()</code> re\u00e7oit donc 3 arguments : <code>range(start,end,step)</code></p> <ul> <li>la valeur <code>start</code> est la valeur de d\u00e9part. Elle est optionnelle (valeur par d\u00e9faut : 0).</li> <li>la valeur <code>end</code> n'est JAMAIS prise.</li> <li>la valeur <code>step</code> est le pas de progression. Elle est optionnelle (valeur par d\u00e9faut : 1).</li> </ul> In\u00a0[\u00a0]: Copied! <pre>for k in range(1,12):\n    print(k)\n</pre> for k in range(1,12):     print(k) In\u00a0[\u00a0]: Copied! <pre>for k in range(5):\n    print(k)\n</pre> for k in range(5):     print(k) <p>Cr\u00e9er les suites de nombres suivantes :</p> <ul> <li>3,5,7,9,11,13</li> <li>-15,-10,-5,0,5</li> <li>10,7,4,1</li> </ul> In\u00a0[\u00a0]: Copied! <pre>for k in range(3,14,2):\n    print(k)\n\nprint('_______________')\n    \nfor k in range(-15,6,5):\n    print(k)\n    \nprint('_______________')\n    \nfor k in range(10,0,-3):\n    print(k)\n</pre> for k in range(3,14,2):     print(k)  print('_______________')      for k in range(-15,6,5):     print(k)      print('_______________')      for k in range(10,0,-3):     print(k) <p>Dans les exemples pr\u00e9c\u00e9dents, les valeurs parcourues ont \u00e9t\u00e9 s\u00e9quentiellement affich\u00e9es. Ce n'est pas obligatoire.</p> In\u00a0[\u00a0]: Copied! <pre>for k in range(3):\n    print(\"bonjour\")\n</pre> for k in range(3):     print(\"bonjour\") <p>On dit que la variable <code>k</code> est une variable muette. Elle a servi de compteur, sans \u00eatre affich\u00e9e.</p> In\u00a0[\u00a0]: Copied! <pre>for a in range(3):\n    for b in range(5):\n        print(a, \" fois \", b, \" \u00e9gale \", a*b)\n</pre> for a in range(3):     for b in range(5):         print(a, \" fois \", b, \" \u00e9gale \", a*b) <p>On appelle triplets pythagoricien 3 nombres entiers $a$, $b$ et $c$ tels que $a^2+b^2=c^2$. Le triplet le plus connu est (3,4,5) car $3^2+4^2=5^2$.</p> <ol> <li>Rechercher tous les triplets pythagoriciens pour les nombres inf\u00e9rieurs \u00e0 100.</li> <li>Modifier votre programme pour \u00e9liminer les doublons.</li> </ol> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#boucles-bornees","title":"Boucles born\u00e9es\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#parcours-delements-enumerables","title":"Parcours d'\u00e9l\u00e9ments \u00e9num\u00e9rables\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#exercice-1","title":"Exercice 1\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#generation-de-sequences-numeriques","title":"G\u00e9n\u00e9ration de s\u00e9quences num\u00e9riques\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#exercice-2","title":"Exercice 2\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#boucles-bornees","title":"Boucles born\u00e9es\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#boucles-bornees-imbriquees","title":"Boucles born\u00e9es imbriqu\u00e9es\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/boucles_for/#exercice-3","title":"Exercice 3\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/","title":"1.2 Boucle <code>for ... in ...</code>","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#1-les-enumerables","title":"1. Les \u00e9num\u00e9rables","text":"<p>En math\u00e9matiques, on dit qu'un ensemble est d\u00e9nombrable lorsqu'on peut associer \u00e0 chaque \u00e9l\u00e9ment de l'ensemble un nombre (traditionnellement 1, 2, 3 ...)</p> <ul> <li>les fraises Tagada d'un paquet sont d\u00e9nombrables.</li> <li>les voitures qui roulent sur l'autoroute sont d\u00e9nombrables.</li> <li>l'eau qui coule d'un robinet n'est pas d\u00e9nombrable.</li> </ul> <p>En informatique, il existe un concept similaire qui va d\u00e9signer les objets que l'on peut \u00e9num\u00e9rer, c'est-\u00e0-dire les d\u00e9composer en une succession ordonn\u00e9e d'\u00e9l\u00e9ments. On les appelle les \u00e9num\u00e9rables ou les it\u00e9rables (Python utilise le mot anglais <code>iterable</code>).</p> <ul> <li>la variable <code>NSI</code> (qui est de type <code>String</code>) est \u00e9num\u00e9rable : on peut la d\u00e9composer en  <code>N</code>,  <code>S</code>, <code>I</code>.</li> <li>la variable <code>[4, 3, 17]</code>  (qui est de type <code>List</code>) est \u00e9num\u00e9rable : on peut la d\u00e9composer en  <code>4</code>,  <code>3</code>, <code>17</code>.</li> <li>la variable <code>5</code>  (qui est de type <code>Int</code>) n'est PAS \u00e9num\u00e9rable : on ne peut pas la d\u00e9composer. </li> </ul>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#2-iterer-sur-les-iterables-la-boucle-for-in","title":"2. It\u00e9rer sur les it\u00e9rables : la boucle <code>for ... in ...</code>","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#21-iterer-sur-une-chaine-de-caracteres","title":"2.1 It\u00e9rer sur une cha\u00eene de caract\u00e8res","text":"<p>La principale caract\u00e9ristique d'un ordinateur est d'exceller dans les op\u00e9rations r\u00e9p\u00e9titives.</p> <p>(je vous laisse retrouver la citation de G\u00e9rard Berry, professeur au Coll\u00e8ge de France, commen\u00e7ant par \u00abl'ordinateur est...\u00bb)</p> <p>Il existe donc une instruction permettant de faire une (ou plusieurs) action(s) \u00e0 chaque it\u00e9ration sur un \u00e9l\u00e9ment \u00e9num\u00e9rable.</p> <p>Exemple fondateur n\u00b01 </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>for k in 'NSI':\n    print(k)\n</code></pre> va donner ceci : \ud83d\udc0d Script Python<pre><code>N\nS\nI\n</code></pre></p> <p>Analyse gr\u00e2ce \u00e0 PythonTutor</p> <p>\u00c9tudions, gr\u00e2ce \u00e0 PythonTutor, le d\u00e9tail de cette ex\u00e9cution.</p> <p>Cliquez sur Next et observez bien l'\u00e9volution de la variable <code>k</code>.   </p> <p>La variable <code>k</code> prend donc successivement toutes les lettre de la cha\u00eene de caract\u00e8re <code>\"NSI\"</code>. </p> <p>Pour chaque valeur de <code>k</code>, la ou les instruction(s) situ\u00e9es de mani\u00e8re indent\u00e9e sous la ligne du <code>for</code> seront ex\u00e9cut\u00e9es. </p> <p>Ici, il y a simplement un <code>print(k)</code>, donc chaque lettre de <code>\"NSI\"</code> s'affiche l'une apr\u00e8s l'autre.</p> <p>Exercice 1</p> \u00c9nonc\u00e9Correction <p>Que donne le script suivant ? \ud83d\udc0d Script Python<pre><code>for m in 'NASA':\n    print(\"bonjour\")\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>bonjour\nbonjour\nbonjour\nbonjour\n</code></pre> <p>Dans cet exercice, la variable de boucle <code>m</code> est muette : elle n'appara\u00eet dans les instructions indent\u00e9es sous le <code>for</code>. </p> <p>La variable <code>m</code> prend successivement les valeurs <code>'N</code>, <code>'A'</code>, <code>'S'</code> et <code>'A'</code>, mais on ne le voit pas.</p> <p></p> <p>Comment \u00e9viter les erreurs classiques</p> <p>Quand vous \u00e9crivez une boucle <code>for ... in ...</code>, veillez bien \u00e0 :</p> <ul> <li>finir la ligne du <code>for</code> par les deux points <code>:</code></li> <li>indenter sous le <code>for</code> les instructions qui doivent \u00eatre r\u00e9p\u00e9t\u00e9es. Si l'indentation ne s'est pas faite automatiquement apr\u00e8s appui sur la touche <code>Entr\u00e9e</code>, c'est que vous avez oubli\u00e9 les <code>:</code>.  </li> </ul>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#22-iterer-sur-une-liste","title":"2.2 It\u00e9rer sur une liste","text":"<p>Exemple fondateur n\u00b02 </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>for jour in [\"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\"]:\n    print(\"je vais au lyc\u00e9e le\", jour)\n</code></pre> va donner ceci : \ud83d\udc0d Script Python<pre><code>je vais au lyc\u00e9e le lundi\nje vais au lyc\u00e9e le mardi\nje vais au lyc\u00e9e le mercredi\nje vais au lyc\u00e9e le jeudi\nje vais au lyc\u00e9e le vendredi\n</code></pre></p> <p>Analyse gr\u00e2ce \u00e0 PythonTutor</p> <p> </p> <p> Attention: tr\u00e8s souvent, l'objet \u00e9num\u00e9rable que la boucle va parcourir aura \u00e9t\u00e9 au pr\u00e9alable stock\u00e9 dans une variable :</p> <p>Exemple fondateur n\u00b03 </p> <p>Le programme pr\u00e9c\u00e9dent est \u00e9quivalent \u00e0 : \ud83d\udc0d Script Python<pre><code>semaine = [\"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\"]\nfor jour in semaine:\n    print(\"je vais au lyc\u00e9e le\", jour)\n</code></pre></p> <p>Notez l'importance d'avoir choisi des noms de variables explicites : ils aident grandement \u00e0 la lisibilit\u00e9 du code.</p> <p>Trailer : Dans le cours sp\u00e9cifique sur les listes, nous verrons une toute autre mani\u00e8re de parcourir une liste.</p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#3-comment-repeter-n-fois-la-meme-action","title":"3. Comment r\u00e9p\u00e9ter <code>n</code> fois la m\u00eame action ?","text":"<p>Scratch dispose du (tr\u00e8s pratique) bloc suivant : </p> <p>Comment effectuer la m\u00eame chose en Python ?</p> <p>Comment r\u00e9p\u00e9ter 10 fois la phrase <code>\"We're up all night to get lucky\"</code> ?</p> <p>Nous pourrions nous en sortir par  \ud83d\udc0d Script Python<pre><code>for k in \"blablablab\": #(1) \n    print(\"We're up all night to get lucky\")\n</code></pre></p> <ol> <li>n'importe quel mot de 10 caract\u00e8res ferait l'affaire...</li> </ol> <p>mais il doit clairement y avoir mieux...</p> <p>Il y a mieux !</p> <p>L'ensemble <code>range</code> </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>for i in range(5):\n    print(\"We're up all night to get lucky\")\n</code></pre> va donner ceci :</p> \ud83d\udccb Texte<pre><code>We're up all night to get lucky\nWe're up all night to get lucky\nWe're up all night to get lucky\nWe're up all night to get lucky\nWe're up all night to get lucky\n</code></pre> <p>L\u00e0 encore, le <code>i</code> est une variable muette.</p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#4-tout-sur-le-range","title":"4. Tout sur le <code>range</code>.","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#41-retour-sur-lexemple-precedent","title":"4.1 Retour sur l'exemple pr\u00e9c\u00e9dent.","text":"<p>Si nous rendions la variable <code>i</code> moins muette ?</p> <p>\ud83d\udc0d Script Python<pre><code>for i in range(5):\n    print(i, \"We're up all night to get lucky\")\n</code></pre> va donner ceci : \ud83d\udc0d Script Python<pre><code>0 We're up all night to get lucky\n1 We're up all night to get lucky\n2 We're up all night to get lucky\n3 We're up all night to get lucky\n4 We're up all night to get lucky\n</code></pre> <code>i</code> prend donc successivement toutes les valeurs enti\u00e8res entre 0 et 4. Il y en a bien 5.</p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#42-utilisation-minimale-de-lobjet-range","title":"4.2 Utilisation minimale de l'objet <code>range()</code>","text":"<p>Syntaxe minimale de <code>range()</code> </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>for k in range(4):\n    print(k)\n</code></pre> va donner ceci : \ud83d\udc0d Script Python<pre><code>0\n1\n2\n3\n</code></pre> Interpr\u00e9tation : faire parcourir \u00e0 une variable <code>k</code> l'ensemble <code>range(n)</code> va faire prendre \u00e0 <code>k</code> les valeurs 0, 1, 2, ..., n-1. </p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#43-utilisation-avancee-de-lobjet-range","title":"4.3 Utilisation avanc\u00e9e de l'objet <code>range()</code>","text":"<p>Syntaxe compl\u00e8te de <code>range()</code> </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>for k in range(5, 15, 2):\n    print(k)\n</code></pre> va donner ceci : \ud83d\udc0d Script Python<pre><code>5\n7\n9\n11\n13\n</code></pre> Interpr\u00e9tation : faire parcourir \u00e0 <code>k</code> l'ensemble <code>range(start, stop, step)</code> fait :</p> <ul> <li>d\u00e9marrer <code>k</code> \u00e0 la valeur <code>start</code> ,</li> <li>progresser <code>k</code>  de <code>step</code> en <code>step</code> tant que <code>k</code> est strictement inf\u00e9rieur \u00e0 <code>stop</code> .</li> </ul> <p>Remarques :</p> <ul> <li>si le <code>step</code> est omis, il vaut 1 par d\u00e9faut.</li> <li>l'objet <code>range(5)</code> n'est pas \u00abtechniquement\u00bb \u00e9gal \u00e0 la liste <code>[0, 1, 2, 3, 4]</code>, car ce n'est pas un objet de type <code>List</code>:</li> </ul> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; type(range(5))\n&lt;class 'range'&gt;\n</code></pre> Si n\u00e9cessaire, on peut le convertir en liste : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; list(range(5))\n[0, 1, 2, 3, 4]\n</code></pre></p> <p>Il faut donc garder en t\u00eate que l'objet renvoy\u00e9 par <code>range()</code> est un it\u00e9rable assimilable \u00e0 une liste de nombres.  </p> <p>Exercice 2</p> \ud83d\udccb Texte<pre><code>Faire afficher les s\u00e9ries de nombres suivantes.\n\nOn utilisera la syntaxe ```print(k, end = ' ')``` ) pour afficher les nombres horizontalement.\n\nA. ```0 1 2 3 4 5``` \n??? note \"Correction\"\n    ```python linenums='1'\n    for k in range(6):\n        print(k, end = ' ')\n    ```\nB. ```10 11 12 13 14 15 ``` \n??? note \"Correction\"\n    ```python linenums='1'\n    for k in range(10,16):\n        print(k, end = ' ')\n    ```\nC. ```3 6 9 12 ``` \n??? note \"Correction\"\n    ```python linenums='1'\n    for k in range(3,13,3):\n        print(k, end = ' ')\n    ```\nD. ```10 9 8 7 6 5 4 3 2 1 0  ``` \n??? note \"Correction\"\n    ```python linenums='1'\n    for k in range(10,-1,-1):\n        print(k, end = ' ')\n    ```\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#5-une-situation-classique-la-double-boucle","title":"5. Une situation classique : la double boucle","text":"<p>Il est tr\u00e8s souvent utile d'imbriquer une boucle dans une autre, notamment lors du parcours de tous les pixels d'une image (voir les exercices graphiques sous Processing). Prenons pour l'instant un exemple num\u00e9rique.</p> <p>Exemple fondateur </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>for a in range(1,5):\n    for b in range(1,4):\n        p = a * b\n        print(a, '*', b, '=', p)\n</code></pre> va donner ceci : \ud83d\udc0d Script Python<pre><code>1 * 1 = 1\n1 * 2 = 2\n1 * 3 = 3\n2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n3 * 1 = 3\n3 * 2 = 6\n3 * 3 = 9\n4 * 1 = 4\n4 * 2 = 8\n4 * 3 = 12\n</code></pre></p> <p>Analyse gr\u00e2ce \u00e0 PythonTutor</p> <p> </p> <p>Exercice 3</p> \u00c9nonc\u00e9Correction <p>\u00c9crire un programme qui affiche : \ud83d\udc0d Script Python<pre><code>Papa dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb\nPapa dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb\nPapa dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb\nMaman dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb\nMaman dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb\nMaman dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb\nMamie dit : \u00ab et une cuill\u00e8re pour Riri ! \u00bb\nMamie dit : \u00ab et une cuill\u00e8re pour Fifi ! \u00bb\nMamie dit : \u00ab et une cuill\u00e8re pour Loulou ! \u00bb\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>for parent in [\"Papa\", \"Maman\", \"Mamie\"]:\n    for enfant in [\"Riri\", \"Fifi\", \"Loulou\"]:\n        print(parent, \"dit : \u00ab et une cuill\u00e8re pour\", enfant, \"! \u00bb\")\n</code></pre> <p>Exercice 4</p> \u00c9nonc\u00e9Correction <p>Rajouter \u00e0 la phrase pr\u00e9c\u00e9dente le contenu de la cuill\u00e8re (pur\u00e9e puis compote). </p> <p>Exemple : \ud83d\udccb Texte<pre><code>Papa dit : \u00ab et une cuill\u00e8re de pur\u00e9e pour Riri ! \u00bb\nPapa dit : \u00ab et une cuill\u00e8re de compote pour Riri ! \u00bb\nPapa dit : \u00ab et une cuill\u00e8re de pur\u00e9e pour Fifi ! \u00bb\nPapa dit : \u00ab et une cuill\u00e8re de compote pour Fifi ! \u00bb\nPapa dit : \u00ab et une cuill\u00e8re de pur\u00e9e pour Loulou ! \u00bb\nPapa dit : \u00ab et une cuill\u00e8re de compote pour Loulou ! \u00bb\nMaman dit : \u00ab et une cuill\u00e8re de pur\u00e9e pour Riri ! \u00bb\nMaman dit : \u00ab et une cuill\u00e8re de compote pour Riri ! \u00bb\n...\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>for parent in [\"Papa\", \"Maman\", \"Mamie\"]:\n    for enfant in [\"Riri\", \"Fifi\", \"Loulou\"]:\n        for nourriture in [\"pur\u00e9e\", \"compote\"]:\n            print(parent, \"dit : \u00ab et une cuill\u00e8re de\", nourriture, \"pour\", enfant, \"! \u00bb\")\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/cours/#6-pour-conclure","title":"6. Pour conclure","text":"<p>\u00c0 retenir  </p> <ul> <li>La boucle <code>for ... in ...</code> s'utilise lorsque :<ul> <li>on veut parcourir un \u00e0 un les \u00e9l\u00e9ments d'un objet it\u00e9rable (une cha\u00eene de caract\u00e8re, une liste, un tuple, un dictionnaire...)</li> <li>on veut r\u00e9p\u00e9ter une action un nombre de fois connu \u00e0 l'avance. On parle de boucle born\u00e9e.</li> </ul> </li> <li> <p>Les instructions r\u00e9p\u00e9t\u00e9es peuvent - mais ce n'est pas obligatoire - faire appel \u00e0 la variable de boucle, mais il ne faut pas que ces instructions la modifient.</p> </li> <li> <p>Ne pas oublier les <code>:</code> et l'indentation !</p> </li> <li><code>range(n)</code> g\u00e9n\u00e8re une s\u00e9quence de <code>n</code> nombres entiers: on s'en servira d\u00e8s qu'on aura besoin de r\u00e9p\u00e9ter <code>n</code> fois des instructions.</li> </ul>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exercices/","title":"Exercices sur la boucle <code>for ... in</code>","text":"<p>exercice 1</p> \u00c9nonc\u00e9Correction <p>On donne une liste d'acteurs :  \ud83d\udc0d Script Python<pre><code>liste_acteurs = ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']\n</code></pre></p> <p>Utilisez cette liste pour produire la sortie suivante: \ud83d\udc0d Script Python<pre><code>Tahar a eu le C\u00e9sar du meilleur acteur\nOmar a eu le C\u00e9sar du meilleur acteur\nGuillaume a eu le C\u00e9sar du meilleur acteur\nSwann a eu le C\u00e9sar du meilleur acteur\nAlex a eu le C\u00e9sar du meilleur acteur\nRoschdy a eu le C\u00e9sar du meilleur acteur\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>liste_acteurs = ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']\n\nfor acteur in liste_acteurs:\n    print(acteur, \"a eu le C\u00e9sar du meilleur acteur\")\n</code></pre> <p>Concat\u00e9nation de caract\u00e8res </p> <p>Il est possible de coller (le vrai mot est concat\u00e9ner) deux cha\u00eenes de caract\u00e8res par l'op\u00e9rateur <code>+</code> : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; \"a\" + \"b\"\n'ab'\n</code></pre></p> <p>exercice 2</p> \u00c9nonc\u00e9Correction <p>Dans l'extrait de code suivant:</p> <ul> <li><code>chaine</code> est une variable initialis\u00e9e avec un <code>str</code> vide : <code>\"\"</code>;</li> <li>on veut qu'en sortie de programme cette variable contienne la valeur <code>'bravo'</code>.</li> </ul> <p>L'id\u00e9e est d'ajouter une par une les lettres \u00e0 la variable <code>chaine</code>.</p> <p>Compl\u00e9ter le code.</p> \ud83d\udc0d Script Python<pre><code>chaine = \"\"\nfor ... in ['b', 'r', 'a', 'v', 'o']:\n    ...\n</code></pre> <p>Cette variable <code>chaine</code> est appel\u00e9e un accumulateur.</p> \ud83d\udc0d Script Python<pre><code>chaine = \"\"\nfor lettre in ['b', 'r', 'a', 'v', 'o']:\n    chaine += lettre\n\nprint(chaine)\n</code></pre> <p>exercice 3</p> \u00c9nonc\u00e9Correction 1 Correction 2 Correction 3  <ol> <li>Fabriquer la cha\u00eene de caract\u00e8res suivante (qui comporte 80 caract\u00e8res) : \ud83d\udc0d Script Python<pre><code>IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\n</code></pre></li> <li>Fabriquer la cha\u00eene de caract\u00e8res suivante : \ud83d\udc0d Script Python<pre><code>IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n</code></pre></li> </ol> <p>1. \ud83d\udc0d Script Python<pre><code>sol = \"\"\nfor k in range(80):\n    sol = sol + 'I'\nprint(sol)\nfor k in range(80):\n    sol = sol + 'N'\nprint(sol)\nfor k in range(80):\n    sol = sol + 'F'\nprint(sol)\nfor k in range(80):\n    sol = sol + 'O'\nprint(sol)\n</code></pre></p> <p>2. \ud83d\udc0d Script Python<pre><code>for lettre in 'INFO':\n    sol = \"\"\n    for k in range(80):\n        sol = sol + lettre\n    print(sol)\n</code></pre></p> <p>3. \ud83d\udc0d Script Python<pre><code>for lettre in 'INFO':\n    sol = \"\"\n    sol = sol + lettre*80\n    print(sol)\n</code></pre></p> <p>exercice 4</p> \u00c9nonc\u00e9Correction <p>En Python, la fonction <code>ord</code> renvoie le code Unicode d'un caract\u00e8re et la fonction <code>chr</code> le contraire: elle renvoie le caract\u00e8re correspondant \u00e0 un code Unicode.</p> <p>Par exemple: \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ord('a')\n97\n&gt;&gt;&gt; chr(97)\n'a'\n</code></pre></p> <p>Voici une liste contenant les codes Unicode des lettres d'un mot secret... \u00c0 vous d'\u00e9crire un programme o\u00f9 en sortie, la variable <code>mot_secret</code> contiendra la cha\u00eene de caract\u00e8res de ce mot.   </p> \ud83d\udc0d Script Python<pre><code>mystere = [111, 107, 44, 32, 98, 105, 101, 110, 32, 106, 111, 117, 233]\nmot_secret = \"\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>mystere = [111, 107, 44, 32, 98, 105, 101, 110, 32, 106, 111, 117, 233]\nmot_secret = \"\"\n\nfor nombre in mystere:\n    lettre = chr(nombre)\n    mot_secret = mot_secret + lettre\n\nprint(mot_secret)\n</code></pre> <p>exercice 5</p> \u00c9nonc\u00e9Correction <p>On souhaite calculer la somme des 1000 premiers nombres entiers naturels, c'est-\u00e0-dire:</p> <p>\\(1+2+3+4+5+ \\dots +999+1000\\)</p> <p>\u00c9crire un programme avec une variable <code>somme</code> accumulateur (comme \u00e0 l'exercice 3) qui contiendra la valeur souhait\u00e9e en fin de programme.</p> \ud83d\udc0d Script Python<pre><code>somme = 0\nfor k in range(1,1001):\n    somme += k\nprint(somme)  \n</code></pre> <p>exercice 6</p> \u00c9nonc\u00e9Correction <p>Calculer \\(1\\times 2 \\times 3 \\times \\dots 99 \\times 100\\).</p> \ud83d\udc0d Script Python<pre><code>produit = 1\nfor k in range(1,101):\n    produit = produit * k\nprint(produit)  \n</code></pre> <p>Exercice 7</p> \u00c9nonc\u00e9Correction <p>Proposer un code qui \u00e9crit la table de multiplication de 7, de 8 et de 9.</p> <p>La sortie doit ressembler \u00e0 : \ud83d\udccb Texte<pre><code>7*1 = 7\n\n7*2 = 14\n\n...    \n...\n\n9*9 = 81    \n</code></pre></p> \ud83d\udc0d Script Python<pre><code>for a in range(7, 10):\n    for b in range(1, 10):\n        print(a, '*', b, '=', a*b)\n</code></pre> <p>Exercice 8</p> \u00c9nonc\u00e9 <p>Sur un jeu d'\u00e9checs, les cases sont rep\u00e9r\u00e9es par une lettre (de A jusqu'\u00e0 H) et par un chiffre (de 1 jusqu'\u00e0 8).</p> <p>Les cases sont donc A1, A2, A3, ..., H7, H8.</p> <p>Proposer un code qui \u00e9crit toutes les cases possibles.</p> Correction \ud83d\udc0d Script Python<pre><code>for lettre in \"ABCDEFGH\":\n    for chiffre in \"12345678\":\n        case = lettre + chiffre\n        print(case)\n</code></pre> <p>Autre solution utilisant la conversion d'un entier en chaine de caract\u00e8res, gr\u00e2ce \u00e0 la fonction <code>str</code> : </p> \ud83d\udc0d Script Python<pre><code>for lettre in \"ABCDEFGH\":\n    for chiffre in range(1, 9):\n        case = lettre + str(chiffre)\n        print(case)\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/","title":"Exos processing","text":"<p>{{ initexo(0)}}</p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#exercices-sous-processing","title":"Exercices sous Processing","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#1-presentation-de-processing","title":"1. Pr\u00e9sentation de Processing","text":"<p>  Processing est un outil de cr\u00e9ation multim\u00e9dia utilisant le code informatique. Simple de prise en main, il a \u00e9t\u00e9 cr\u00e9\u00e9 par des artistes pour des artistes. On peut utiliser le langage Python pour entrer les instructions.</p> <p>Nous l'utiliserons pour ajouter du graphisme \u00e0 nos cr\u00e9ations. Dans tous les exercices de cette page, les dessins r\u00e9alis\u00e9s seront statiques. Nous verrons plus tard comment Processing permet tr\u00e8s facilement de faire des animations.</p> Documentation <ul> <li>Le site officiel (anglais) </li> <li>Un manuel d'utilisation (fran\u00e7ais) </li> </ul> <p> </p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#2-les-bases-de-processing","title":"2. Les bases de Processing","text":""},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#21-repere","title":"2.1 Rep\u00e8re","text":"<p>\u00c0 l'ex\u00e9cution de tout script Processing, une fen\u00eatre s'affiche avec une zone de dessin. Sa taille se d\u00e9finit \u00e0 l'aide de la fonction <code>size</code>. Par exemple, pour cr\u00e9er une zone de dessin de 300 pixels sur 200 pixels, on utilisera:</p> \ud83d\udc0d Script Python<pre><code>size(300, 200)\n</code></pre> <p>Chaque pixel de cette zone est rep\u00e9r\u00e9e par des coordonn\u00e9es dans le rep\u00e8re suivant, dont l'origine se situe en haut \u00e0 gauche et l'axe des ordonn\u00e9es est orient\u00e9 vers le bas.</p> <p> </p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#22-traces","title":"2.2 Trac\u00e9s","text":"<p>Trac\u00e9s de base</p> <ul> <li><code>point</code> : permet de dessiner un point (pixel). En param\u00e8tre, les coordonn\u00e9es du point.</li> <li><code>line</code>: permet de tracer une ligne entre deux points. En param\u00e8tres, les coordonn\u00e9es des deux points.</li> <li><code>rect</code>: permet de tracer un rectangle. En param\u00e8tres, les coordonn\u00e9es du sommet haut-gauche, puis la largeur et la hauteur du rectangle.</li> <li><code>ellipse</code>: permet de tracer une ellipse. En param\u00e8tres, les coordonn\u00e9es du centre, puis la largeur et la hauteur (mettre la m\u00eame valeur pour un cercle).</li> </ul> Exemples <p>Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre.</p> \ud83d\udc0d Script Python<pre><code>size(200, 200)\npoint(10, 60)\nline(10, 10, 100, 150)\nrect(80, 10, 20, 50)\nellipse(150, 100, 80, 40)\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#23-couleurs","title":"2.3 Couleurs","text":"<p>Pinceau</p> <ul> <li><code>background</code>: permet de d\u00e9finir la couleur du fond de la zone de dessin. En param\u00e8tres, les trois composantes RGB de la couleur.</li> <li><code>stroke</code>: permet de d\u00e9finir la couleur du pinceau (noir par d\u00e9faut) pour le contour de la forme. En param\u00e8tres, les trois composantes RGB de la couleur.</li> <li><code>noStroke</code>: permet de dessiner une forme sans coutour (pas de param\u00e8tre).</li> <li><code>strokeWeight</code>: permet de d\u00e9finir la largeur du pinceau. En param\u00e8tre, le nombre de pixel.</li> <li><code>fill</code>: permet de d\u00e9finir la couleur de remplissage de la forme. En param\u00e8tres, les trois composantes RGB de la couleur.</li> </ul> Exemples <p>Copier-coller le code suivant et faire varier les param\u00e8tres pour bien les comprendre.</p> \ud83d\udc0d Script Python<pre><code>size(200, 200)\nbackground(255, 255, 255)\nstroke(255, 0, 0)\npoint(10, 60)\nline(10, 10, 100, 150)\nstroke(0, 127, 255)\nstrokeWeight(5)\nrect(80, 10, 20, 50)\nnoStroke()\nfill(204, 153, 204)\nellipse(150, 100, 80, 40)\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#3-exercices-sur-la-simple-boucle","title":"3. Exercices sur la simple boucle","text":"<p>Tous les exercices sont \u00e0 faire dans une fen\u00eatre de 300 pixels sur 300 pixels.</p> <p>{{ exercice() }}</p> \u00c9nonc\u00e9Correction en ProcessingCorrection en p5 <p>L'objectif est d'obtenir dix lignes al\u00e9atoires, de couleur al\u00e9atoire et d'\u00e9paisseur 10.</p> <p> </p> <p>Aide</p> <ul> <li>la fonction <code>random(a,b)</code> permet d'obtenir un entier pseudo al\u00e9atoire entre <code>a</code> et <code>b</code>.</li> </ul> \ud83d\udc0d Script Python<pre><code>size(300,300)\nbackground(0)\nfor k in range(10):\n    Ax = random(0,300)\n    Ay = random(0,300)\n    Bx = random(0,300)\n    By = random(0,300)\n    strokeWeight(10)\n    stroke(random(0,255), random(0,255), random(0,255))\n    line(Ax,Ay,Bx,By)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from p5 import *\n\ndef setup():\n    createCanvas(300, 300)\n    noLoop()\n\ndef draw():\n    background(0)\n    for k in range(10):\n        Ax = random(0,300)\n        Ay = random(0,300)\n        Bx = random(0,300)\n        By = random(0,300)\n        strokeWeight(10)\n        stroke(random(0,255), random(0,255), random(0,255))\n        line(Ax,Ay,Bx,By)\n\nrun()\n</code></pre> <p>{{ exercice() }}  difficile</p> \u00c9nonc\u00e9Correction en ProcessingCorrection en p5 <p>Reprendre l'exercice pr\u00e9c\u00e9dent en faisant en sorte que chaque ligne commence l\u00e0 o\u00f9 une autre s'arr\u00eate (hormis la premi\u00e8re)  </p> \ud83d\udc0d Script Python<pre><code>size(300,300)\nbackground(0)\nAx = random(0,300)\nAy = random(0,300)\nfor k in range(10):\n    Bx = random(0,300)\n    By = random(0,300)\n    strokeWeight(10)\n    stroke(random(0,255), random(0,255), random(0,255))\n    line(Ax,Ay,Bx,By)\n    Ax = Bx\n    Ay = By\n</code></pre> \ud83d\udc0d Script Python<pre><code>from p5 import *\n\ndef setup():\n    createCanvas(300, 300)\n    noLoop()\n\ndef draw():\n    background(0)\n    Ax = random(0,300)\n    Ay = random(0,300)\n    for k in range(10):\n        Bx = random(0,300)\n        By = random(0,300)\n        strokeWeight(10)\n        stroke(random(0,255), random(0,255), random(0,255))\n        line(Ax,Ay,Bx,By)\n        Ax = Bx\n        Ay = By\n\nrun()\n</code></pre> <p>{{ exercice() }}</p> \u00c9nonc\u00e9Correction en ProcessingCorrection en p5 <p>Tracer 50 disques de position, diam\u00e8tre, couleur et transparence al\u00e9atoires.  </p> <p>Aide</p> <ul> <li>la transparence s'obtient en rajoutant un 4\u00e8me param\u00e8tre (entre 0 et 255) \u00e0 la suite de RGB. On appelle ce param\u00e8tre le canal Alpha. Ex : (255,0,0,200) est un rouge tr\u00e8s transparent.</li> </ul> \ud83d\udc0d Script Python<pre><code>size(300,300)\nbackground(0)\nfor k in range(50):\n    Ax = random(0,300)\n    Ay = random(0,300)\n    diametre = random(0,50)\n    noStroke()\n    r = random(0,255)\n    g = random(0,255)\n    b = random(0,255)\n    a = random(0,255)\n    fill(r, g, b, a)\n    ellipse(Ax,Ay,diametre, diametre)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from p5 import *\n\ndef setup():\n    createCanvas(300, 300)\n    noLoop()\n\ndef draw():\n    background(0)\n    for k in range(50):\n        Ax = random(0,300)\n        Ay = random(0,300)\n        diametre = random(0,50)\n        noStroke()\n        r = random(0,255)\n        g = random(0,255)\n        b = random(0,255)\n        a = random(0,255)\n        fill(r, g, b, a)\n        ellipse(Ax,Ay,diametre, diametre)\n\nrun()\n</code></pre> <p> {{ exercice() }} \u00e0 faire sur Capytale : activit\u00e9 55f1-63735</p> <p> Lire obligatoirement au pr\u00e9alable la page \u00abComment passer d'un code Processing \u00e0 un code p5\u00bb</p> \u00c9nonc\u00e9 <p>Proposer un code r\u00e9alisant la figure suivante. Votre code devra obligatoirement comporter une boucle <code>for</code>.  </p>"},{"location":"T1_Demarrer_en_Python/1.2_Boucle_for/exos_processing/#4-exercices-sur-la-double-boucle","title":"4. Exercices sur la double boucle","text":"<p>La structure de double boucle va permettre (par exemple) de parcourir l'int\u00e9gralit\u00e9 des pixels d'une image.</p> <p> Exercices \u00e0 faire sur Capytale : activit\u00e9 38d9-68425</p> <p>{{ exercice() }}</p> <p>Construire une image o\u00f9 tous les points ont une couleur al\u00e9atoire.  </p> <p>{{ exercice() }}</p> <p>Construire une image constitu\u00e9e de carr\u00e9s de 20 pixels de cot\u00e9, de couleur al\u00e9atoire. L'image est toujours un carr\u00e9 de c\u00f4t\u00e9 300 pixels.  </p>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/","title":"1.3 Boucle While","text":""},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#1-premiers-exemples","title":"1. Premiers exemples","text":"<p>\u00c0 la diff\u00e9rence essentielle des boucles <code>for</code>, dont on peut savoir \u00e0 l'avance combien de fois elles vont \u00eatre ex\u00e9cut\u00e9es, les boucles <code>while</code> sont des boucles dont on ne sort que lorsqu'une condition n'est plus satisfaite. </p> <p>Avec donc le risque de rester infiniment bloqu\u00e9 \u00e0 l'int\u00e9rieur !  </p> <p></p> <p>Exemple fondateur n\u00b01 </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>a = 0\nwhile a &lt; 3:\n    print(\"ok\")\n    a = a + 1\nprint(\"fini\")\n</code></pre> va donner ceci : \ud83d\udc0d Script Python<pre><code>ok\nok\nok\nfini\n</code></pre></p> <p>Analyse gr\u00e2ce \u00e0 PythonTutor</p> <p> </p> <p>Question</p> <p>le code ci-dessous va-t-il donner un r\u00e9sultat diff\u00e9rent ? \ud83d\udc0d Script Python<pre><code>a = 0\nwhile a &lt; 3:\n    a = a + 1\n    print(\"ok\")\nprint(\"fini\")\n</code></pre></p> R\u00e9sultat du programme \u23ec \ud83d\udc0d Script Python<pre><code>ok\nok\nok\nfini\n</code></pre> <p>Conclusion : l'\u00e9valuation de la condition ne se fait pas \u00e0 chaque ligne mais bien au d\u00e9but de chaque tour de boucle. Si la variable qui d\u00e9clenchera la sortie de boucle atteint sa valeur de sortie au milieu des instructions, les lignes restantes sont quand m\u00eame ex\u00e9cut\u00e9es.</p>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#2-syntaxe-generale","title":"2. Syntaxe g\u00e9n\u00e9rale","text":"<p>\u00c9criture d'une boucle <code>while</code></p> \ud83d\udc0d Script Python<pre><code>while condition:\n    instruction1\n    instruction2\n        ...\n    instructionN\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#21-la-condition","title":"2.1 La condition","text":"<p>La <code>condition</code> est un bool\u00e9en, c'est-\u00e0-dire une expression que Python \u00e9valuera \u00e0 <code>True</code> ou \u00e0 <code>False</code>.</p> <p>Exemple de bool\u00e9ens r\u00e9sultant d'une \u00e9valuation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; 1 &lt; 3\nTrue\n&gt;&gt;&gt; 5 &gt; 7\nFalse\n&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; a &gt; 8\nTrue\n</code></pre></p> <p>Un cours sur les bool\u00e9ens aura lieu ici.</p>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#22-les-instructions","title":"2.2 Les instructions","text":"<p>Les instructions <code>instruction1</code> jusqu'\u00e0 <code>instructionN</code> sont ex\u00e9cut\u00e9es dans cet ordre \u00e0 chaque tour de boucle. </p> <p> Attention : ces instructions doivent obligatoirement avoir un impact sur la <code>condition</code> \u00e9valu\u00e9e apr\u00e8s le <code>while</code>(dans le cours sur la dichotomie, nous \u00e9voquerons la notion de variant de boucle).</p> <p>Voir le pi\u00e8ge n\u00b01 ...</p>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#3-les-pieges","title":"3. Les pi\u00e8ges ...","text":""},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#31-piege-n1-ne-jamais-sortir-de-la-boucle","title":"3.1 pi\u00e8ge n\u00b01 : ne JAMAIS SORTIR de la boucle","text":"<p>Exemple fondateur n\u00b02 </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>a = 0\nwhile a &lt; 3:\n    print(\"ok\")\n    a = a + 1\n    a = a * 0\nprint(\"ce texte ne s'\u00e9crira jamais\")\n</code></pre> va \u00e9crire une suite infinie de <code>ok</code> et ne jamais s'arr\u00eater</p>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#32-piege-n2-ne-jamais-entrer-dans-la-boucle","title":"3.2 pi\u00e8ge n\u00b02 : ne JAMAIS ENTRER dans la boucle","text":"<p>Exemple fondateur n\u00b03 </p> <p>Le programme suivant : \ud83d\udc0d Script Python<pre><code>a = 0\nwhile a &gt; 10:\n    print(\"ce texte non plus ne s'\u00e9crira jamais\")\n    a = a + 1\n\nprint(\"fini\") \n</code></pre></p> <p>va \u00e9crire <code>fini</code> et s'arr\u00eater.</p> <p>exercice 1</p> \u00c9nonc\u00e9Correction <p>Trouver le plus petit nombre entier \\(n\\) tel que \\(2^n\\) soit sup\u00e9rieur \u00e0 1 milliard.</p> \ud83d\udc0d Script Python<pre><code>n = 1\nwhile 2**n &lt; 10**9:\n    n = n + 1\n    print(\"trop petit\")\nprint(\"trouv\u00e9 : \",n)\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#4-quelques-remarques","title":"4. Quelques remarques","text":""},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#41-lien-entre-while-et-for","title":"4.1 Lien entre <code>while</code> et <code>for</code>","text":"<p>La boucle born\u00e9e <code>for</code> que nous avons \u00e9tudi\u00e9e est tr\u00e8s pratique.</p> <p>Mais nous pourrions nous en passer : toutes les boucles <code>for</code> peuvent en fait \u00eatre r\u00e9-\u00e9crites en utilisant <code>while</code>. (alors que la r\u00e9ciproque est fausse)</p> <p>exercice 2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re le code ci-dessous : \ud83d\udc0d Script Python<pre><code>for k in range(5):\n    print(\"scooby-doo\")\n</code></pre> R\u00e9-\u00e9crire ce code en utilisant une boucle <code>while</code>. </p> \ud83d\udc0d Script Python<pre><code>k = 0\nwhile k &lt; 5:\n    print(\"scooby-doo\")\n    k = k + 1\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.3_Boucle_while/cours/#42-les-boucles-infinies-volontaires","title":"4.2 Les boucles infinies volontaires","text":"<p>La boucle infinie a \u00e9t\u00e9 pr\u00e9sent\u00e9e comme un danger qu'il faut \u00e9viter. </p> <p>Pourtant, dans quelques situations, il est d'usage d'enfermer volontairement l'utilisateur dans une boucle infinie.</p> <p>C'est notamment le cas des codes Processing (ou p5) o\u00f9 la fonction <code>draw()</code> est une boucle infinie dont on ne sort que lorsqu'un \u00e9v\u00e8nement est intercept\u00e9 (par exemple, le clic sur la fermeture de la fen\u00eatre d'affichage).</p> <p>Observez et ex\u00e9cutez le code suivant :</p> \ud83d\udc0d Script Python<pre><code>while True :\n    reponse = input(\"tapez sur la lettre S du clavier pour me sortir de cet enfer : \")\n    if reponse == 'S' or reponse == 's':\n        break\n\nprint(\"merci, j'\u00e9tais bloqu\u00e9 dans une boucle infinie\")\n</code></pre> <ul> <li>le d\u00e9but du code : <code>while True</code> est typique des boucles infinies volontaires. On aurait tout aussi bien pu \u00e9crire <code>while 3 &gt; 2</code> (on rencontre m\u00eame parfois des <code>while 1</code>)</li> <li>vous avez d\u00e9couvert l'expression <code>break</code> qui comme son nom l'indique permet de casser la boucle (cela marche pour <code>while</code> comme pour <code>for</code>) et donc d'en sortir. Son emploi est controvers\u00e9 parmi les puristes de la programmation. Nous dirons juste que c'est une instruction bien pratique.</li> </ul> <p>exercice 3</p> \u00c9nonc\u00e9Correction <p>Proposer un code qui choisit un nombre al\u00e9atoire entre 1 et 10, puis qui propose en boucle \u00e0 l'utilisateur de le deviner, tant que celui-ci n'a pas trouv\u00e9.</p> <p>Aides :</p> <ul> <li><code>int()</code> permet de convertir une cha\u00eene de caract\u00e8res en nombre. </li> <li>pour avoir un nombre <code>a</code> pseudo-al\u00e9atoire :</li> </ul> \ud83d\udc0d Script Python<pre><code>from random import randint\na = randint(1,10)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\nmystere = randint(1, 10)\n\nwhile True:\n    reponse = int(input('quel est le nombre myst\u00e8re ? '))\n    if reponse == mystere:\n        break\nprint('bravo !')\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/1NSI_ipythonblocks/","title":"1NSI ipythonblocks","text":"In\u00a0[1]: Copied! <pre>from ipythonblocks import BlockGrid\ngrid = BlockGrid(10, 10, fill=(125,234,231))\ngrid.show()\n</pre> from ipythonblocks import BlockGrid grid = BlockGrid(10, 10, fill=(125,234,231)) grid.show() In\u00a0[2]: Copied! <pre>grid[2,5].set_colors(0,0,0)\ngrid.show()\n</pre> grid[2,5].set_colors(0,0,0) grid.show()     In\u00a0[5]: Copied! <pre>for ligne in range(10):\n    grid[ligne,3].set_colors(0,0,0)\ngrid.show()\n</pre> for ligne in range(10):     grid[ligne,3].set_colors(0,0,0) grid.show() In\u00a0[11]: Copied! <pre>grid = BlockGrid(10, 10, fill=(125,234,231))\nfor ligne in range(10):\n    for colonne in range(1,10,2):\n        grid[ligne,colonne].set_colors(0,0,0)\ngrid.show()\n</pre> grid = BlockGrid(10, 10, fill=(125,234,231)) for ligne in range(10):     for colonne in range(1,10,2):         grid[ligne,colonne].set_colors(0,0,0) grid.show() In\u00a0[43]: Copied! <pre>n = 10\ngrid = BlockGrid(n, n, fill=(125,234,231))\nfor colonne in range(n):\n    for ligne in range(n):\n        if (ligne + colonne) %2 == 0:\n            grid[ligne,colonne].set_colors(0,0,0)\ngrid.show()\n</pre> n = 10 grid = BlockGrid(n, n, fill=(125,234,231)) for colonne in range(n):     for ligne in range(n):         if (ligne + colonne) %2 == 0:             grid[ligne,colonne].set_colors(0,0,0) grid.show() In\u00a0[48]: Copied! <pre>n = 10\ngrid = BlockGrid(n, n, fill=(125,234,231))\nfor colonne in range(n):\n    for ligne in range(n):\n        if (ligne + colonne) &gt; 9 :\n            grid[ligne,colonne].set_colors(0,0,0)\ngrid.show()\n</pre> n = 10 grid = BlockGrid(n, n, fill=(125,234,231)) for colonne in range(n):     for ligne in range(n):         if (ligne + colonne) &gt; 9 :             grid[ligne,colonne].set_colors(0,0,0) grid.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/1NSI_ipythonblocks/#grille-de-carres-colores-avec-le-module-blockgrid","title":"Grille de carr\u00e9s color\u00e9s avec le module BlockGrid\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/1NSI_ipythonblocks/#prise-en-main","title":"Prise en main\u00b6","text":""},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/1NSI_ipythonblocks/#exercice-1","title":"Exercice 1\u00b6","text":"<p>Faites en sorte que la troisi\u00e8me colonne soit noire.</p>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/1NSI_ipythonblocks/#exercice-2","title":"Exercice 2\u00b6","text":"<p>Faites en sorte qu'une colonne sur 2 soit noire.</p>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/1NSI_ipythonblocks/#exercice-3","title":"Exercice 3\u00b6","text":"<p>Faites en sorte qu'un damier apparaisse.</p>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/1NSI_ipythonblocks/#exercice-4","title":"Exercice 4\u00b6","text":"<p>Faites en sorte qu'un escalier apparaisse</p>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours/","title":"1.4 Instruction conditionnelle if","text":"<p>L'instruction conditionnelle <code>if</code> permet de soumettre l'ex\u00e9cution d'instructions \u00e0 une condition donn\u00e9e. Cette condition sera une expression bool\u00e9enne, comme pour la boucle <code>while</code>.</p>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours/#1-exemples-fondateurs","title":"1. Exemples fondateurs","text":"<p>Dans les exemples ci-dessous, changez la valeur affect\u00e9e \u00e0 la variable <code>age</code> afin d'observer les modifications de comportement du programme.</p> <p>Exemple fondateur n\u00b01 </p> <p>L'exemple minimal ci-dessous ne contient que le mot-cl\u00e9 <code>if</code>.  \ud83d\udc0d Script Python<pre><code>age = 20\nif age &gt;= 18:\n    print(\"Tu as le droit de vote\")\n</code></pre></p> <p>Exemple fondateur n\u00b02 </p> <p>La structure qu'on rencontrera le plus souvent est la structure <code>if ... else ...</code> </p> \ud83d\udc0d Script Python<pre><code>age = 20\nif age &gt;= 18:\n    print(\"Tu as le droit de vote\")\nelse:\n    print(\"D\u00e9sol\u00e9, il faudra attendre\", 18 - age, \"ans avant de pouvoir voter\")\n</code></pre> <p>Syntaxe g\u00e9n\u00e9rale</p> \ud83d\udccb Texte<pre><code>if expression bool\u00e9enne:\n    *instructions \u00e0 effectuer si l'expression est vraie*\nelse:\n    *instructions \u00e0 effectuer si l'expression est fausse*\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours/#2-levaluation-de-la-condition","title":"2. L'\u00e9valuation de la condition","text":"<p>Comme pour la boucle <code>while</code>, on dit que l'expression qui suit le <code>if</code> est \u00e9valu\u00e9e par Python lors de l'ex\u00e9cution du programme.</p> <p>Cette \u00e9valuation renvoie un bool\u00e9en, <code>True</code> ou <code>False</code>.</p> <p>Les symboles de comparaison (ou d'appartenance) permettant d'\u00e9crire une condition sont :</p> <p>Op\u00e9rateurs de comparaison</p> Op\u00e9rateur Signification <code>==</code> est \u00e9gal \u00e0 <code>!=</code> est diff\u00e9rent de <code>&lt;</code> inf\u00e9rieur \u00e0 <code>&gt;</code> sup\u00e9rieur \u00e0 <code>&lt;=</code> inf\u00e9rieur ou \u00e9gal \u00e0 <code>&gt;=</code> sup\u00e9rieur ou \u00e9gal \u00e0 <code>in</code> appartient \u00e0 <code>not in</code> n'appartient pas \u00e0 <p>Exemples</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = 2\n\n&gt;&gt;&gt; a == 3\nFalse\n\n&gt;&gt;&gt; a == 2\nTrue\n\n&gt;&gt;&gt; a != 1\nTrue\n\n&gt;&gt;&gt; a &gt; 2\nFalse\n\n&gt;&gt;&gt; a &gt;= 2\nTrue\n\n&gt;&gt;&gt; a &lt;= 2\nTrue\n\n&gt;&gt;&gt; a &lt;= 5\nTrue\n\n&gt;&gt;&gt; 'e' in 'abracadabra'\nFalse\n\n&gt;&gt;&gt; 'b' in 'abracadabra'\nTrue\n\n&gt;&gt;&gt; 'A' not in 'abracadabra'\nTrue\n\n&gt;&gt;&gt; not True\nFalse\n</code></pre> <p>Comme nous le verrons dans le cours sur les bool\u00e9ens, ces conditions peuvent \u00eatre combin\u00e9es avec (par exemple) les mots-cl\u00e9s <code>and</code> ou <code>or</code> :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; b = 20\n&gt;&gt;&gt; b &gt; 15 and b &lt; 30\nTrue\n&gt;&gt;&gt; b &gt; 2000 or b &lt; 30\nTrue\n</code></pre> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>Compter le nombre de voyelles de la phrase <code>'cet exercice est prodigieusement ennuyeux'</code> </p> <p>\ud83d\udc0d Script Python<pre><code>phrase = 'cet exercice est prodigieusement ennuyeux'\n\nvoyelles = 'aeiouy'\n\ncompteur = 0\n\nfor lettre in phrase:\n    if lettre in voyelles:\n        compteur += 1\n\nprint(compteur)\n</code></pre> \"</p>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours/#3-un-test-tres-frequent-le-test-de-divisibilite","title":"3. Un test tr\u00e8s fr\u00e9quent : le test de divisibilit\u00e9","text":"<p>Exemple fondateur n\u00b03 </p> <p>Pour tester si un nombre <code>n</code> est divisible par un nombre <code>d</code>, on teste si le reste de la division euclidienne de <code>n</code> par <code>d</code> est \u00e9gal \u00e0 0 :</p> \ud83d\udc0d Script Python<pre><code>n = 17\nif n % 2 == 0:\n    print(n, \"est un nombre pair\")\nelse:\n    print(n, \"est un nombre impair\")\n</code></pre> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>Afficher la liste de tous les nombres entre 1 et 100 qui sont divisibles \u00e0 la fois par 2 et par 7. </p> \ud83d\udc0d Script Python<pre><code>for n in range(1,101):\n    if n % 2 == 0 and n % 7 == 0:\n        print(n)\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours/#4-les-cas-multiples-utilisation-de-elif","title":"4. Les cas multiples : utilisation de <code>elif</code>","text":"<p>Dans les situations o\u00f9 l'on veut effectuer des instructions diff\u00e9rentes selon les diff\u00e9rentes valeurs prises par une variable, on peut imbriquer les instructions <code>if</code> ... <code>else</code>.</p> <p>Observer par exemple le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>moyenne = 13\n\nif moyenne &lt; 8:\n    print(\"rat\u00e9\")\nelse:\n    if moyenne &lt; 10:\n        print(\"rep\u00eachage\")\n    else:\n        if moyenne &lt; 12:\n            print(\"admis\")\n        else:\n            if moyenne &lt; 14:\n                print(\"mention AB\")\n            else:\n                if moyenne &lt; 16:\n                    print(\"mention B\")\n                else:\n                    print(\"mention TB\")\n</code></pre> <p>Mais cela est vite long et peu lisible, et les diff\u00e9rents niveaux d'indentation peuvent devenir pi\u00e9geux.</p> <p>Il existe alors une instruction qui contracte <code>else</code> et <code>if</code> : <code>elif</code> (sinon si).</p> <p>Ce code devient alors</p> \ud83d\udc0d Script Python<pre><code>moyenne = 7\n\nif moyenne &lt; 8:\n    print(\"rat\u00e9\")\nelif moyenne &lt; 10:\n    print(\"rep\u00eachage\")\nelif moyenne &lt; 12:\n    print(\"admis\")\nelif moyenne &lt; 14:\n    print(\"mention AB\")\nelif moyenne &lt; 16:\n    print(\"mention B\")\nelse:\n    print(\"mention TB\")\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/cours/#4-recreation-a-vous-dobeir","title":"4. R\u00e9cr\u00e9ation : \u00e0 vous d'ob\u00e9ir !","text":"<p>Le site https://compute-it.toxicode.fr/ vous demande d'ex\u00e9cuter mentalement les instructions affich\u00e9es, \u00e0 l'aide des touches directionnelles de votre clavier. Attention, c'est tr\u00e8s addictif !</p>"},{"location":"T1_Demarrer_en_Python/1.4_Instruction_conditionnelle_if/exercices/","title":"Exercices","text":"<p>exercice 1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire un programme qui demande deux nombres et qui affiche le plus grand des deux.</p> <p>Aide : pour stocker dans une variable <code>n</code> un nombre tap\u00e9 au clavier par l'utilisateur, on utilise le code suivant :</p> \ud83d\udc0d Script Python<pre><code>n = int(input('Entrez un nombre'))\n</code></pre> \ud83d\udc0d Script Python<pre><code>n1 = int(input('Premier nombre ?'))\nn2 = int(input('Deuxi\u00e8me nombre ?'))\n\nif n1 &gt; n2:\n    print('le nombre le plus grand est', n1)\nelif n2 &gt; n1:\n    print('le nombre le plus grand est', n2)\nelse:\n    print('les deux nombres sont \u00e9gaux')\n</code></pre> <p>exercice 2</p> \u00c9nonc\u00e9Corrections <p>Exercices \u00e0 r\u00e9aliser sur Notebook \u00e0 partir de ce lien. </p> <p>Q2 : une colonne sur 2 noire \ud83d\udc0d Script Python<pre><code>grid = BlockGrid(10, 10, fill=(125,234,231))\nfor ligne in range(10):\n    for colonne in range(1,10,2):\n        grid[ligne,colonne].set_colors(0,0,0)\ngrid.show()\n</code></pre></p> <p>Q3 : un damier \ud83d\udc0d Script Python<pre><code>n = 10\ngrid = BlockGrid(n, n, fill=(125,234,231))\nfor colonne in range(n):\n    for ligne in range(n):\n        if (ligne + colonne) %2 == 0:\n            grid[ligne,colonne].set_colors(0,0,0)\ngrid.show()\n</code></pre></p> <p>Q4 : un escalier \ud83d\udc0d Script Python<pre><code>n = 10\ngrid = BlockGrid(n, n, fill=(125,234,231))\nfor colonne in range(n):\n    for ligne in range(n):\n        if (ligne + colonne) &gt; 9 :\n            grid[ligne,colonne].set_colors(0,0,0)\ngrid.show()\n</code></pre></p> <p>exercice 3</p> \u00c9nonc\u00e9Correction <p>Le jeu du FizzBuzz : il s'agit de compter \u00e0 partir de 1 en rempla\u00e7ant certains nombres par Fizz, Buzz ou Fizzbuzz :</p> <ul> <li>si le nombre est divisible par 3, on ne le dit pas et on le remplace par Fizz.</li> <li>si le nombre est divisible par 5, on ne le dit pas et on le remplace par Buzz.</li> <li>si le nombre est divisible par 3 et par 5, on ne le dit pas et on le remplace par FizzBuzz.</li> </ul> <p>\u00c9crire un code qui joue au FizzBuzz jusqu'\u00e0 50.</p> \ud83d\udc0d Script Python<pre><code>for k in range(1,20):\n    if k % 3 == 0 and k % 5 == 0:\n        print('fizzbuzz')\n    elif k % 3 == 0:\n        print('fizz')\n    elif k % 5 == 0:\n        print('buzz')\n    else:\n        print(k)\n</code></pre> <p>exercice 4</p> \u00c9nonc\u00e9Correction <p>Une ann\u00e9e est d\u00e9clar\u00e9e bissextile (et compte donc 366 jours au lieu de 365) si elle est :</p> <ul> <li>soit divisible par 400.</li> <li>soit divisible par 4 mais pas divisible par 100.</li> </ul> <p>\u00c9crire un code qui d\u00e9termine si une ann\u00e9e est bissextile ou non.</p> <p>Explication : la Terre faisant le tour du Soleil en un peu plus que 365 jours, on s'est dit qu'on allait rajouter un jour tous les 4 ans, mais c'\u00e9tait trop, alors on a enlev\u00e9 un jour tous les 100 ans, mais c'\u00e9tait plus assez, alors on a rajout\u00e9 un jour tous les 400 ans, ce qui donne une approximation convenable.</p> \ud83d\udc0d Script Python<pre><code>annee = 2022\n\nif annee % 400 == 0:\n    print(annee, \\\"est bissextile\\\")\nelif annee % 4 == 0 and annee % 100 != 0:\n    print(annee, \\\"est bissextile\\\")\nelse:\n    print(annee, \\\"n'est pas bissextile\\\")\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/","title":"1.5 Fonctions","text":"<p>La notion de fonction est essentielle en programmation. Elle permet de construire des codes modulaires, plus faciles \u00e0 lire et \u00e0 modifier. En Python, une fonction se cr\u00e9e avec le mot-cl\u00e9 <code>def</code>.</p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#1-fonctions-sans-parametre-sans-valeur-renvoyee","title":"1. Fonctions sans param\u00e8tre, sans valeur renvoy\u00e9e","text":"<p>Exemple fondateur n\u00b01 </p> \ud83d\udc0d Script Python<pre><code>def accueil():\n    print(\"bonjour\")\n    print(\"comment allez-vous ?\")\n</code></pre> <p>Lorsque l'interpr\u00e9teur Python parcourt cette fonction, rien ne s'affiche : la fonction est maintenant pr\u00eate \u00e0 \u00eatre appel\u00e9e, mais n'est pas ex\u00e9cut\u00e9e tant que l'utilisateur ne le demande pas explicitement.</p> <p>Ce sera le cas pour toutes les fonctions : elles doivent \u00eatre appel\u00e9es pour s'ex\u00e9cuter.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; accueil()\nbonjour\ncomment allez-vous ?\n</code></pre> <p>Dans ce cas d'utilisation, la fonction <code>accueil</code> n'est qu'un raccourci, une factorisation d'un ensemble d'instructions.</p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#2-fonction-avec-parametres-sans-valeur-renvoyee","title":"2. Fonction avec param\u00e8tre(s), sans valeur renvoy\u00e9e","text":""},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#21-parametre-simple","title":"2.1 Param\u00e8tre simple","text":"<p>Exemple fondateur n\u00b02 </p> \ud83d\udc0d Script Python<pre><code>def chat_penible(n):\n    for k in range(n):\n        print(\"meoww\")\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chat_penible(3)\nmeoww\nmeoww\nmeoww\n</code></pre> <p>Vocabulaire </p> <ul> <li>La valeur <code>n</code> est appel\u00e9e param\u00e8tre de la fonction <code>chat_penible</code>.</li> <li>On dit qu'on passe le param\u00e8tre <code>n</code> \u00e0 la fonction <code>chat_penible</code>.</li> <li>Dans l'exemple ci-dessus, on dit qu'on a appel\u00e9 la fonction <code>chat_penible</code> avec l'argument 3.</li> </ul> <p>Remarques :</p> <ul> <li>l\u00e0 encore, notre fonction ne renvoie rien : on peut encore la consid\u00e9rer comme un ensemble d'instructions factoris\u00e9 dans un m\u00eame bloc. \u00c0 la diff\u00e9rence de la fonction sans param\u00e8tre, ces instructions ne sont pas toujours les m\u00eames, gr\u00e2ce \u00e0 l'utilisation du param\u00e8tre demand\u00e9 \u00e0 l'utilisateur.</li> <li>la fonction bien connue  <code>print()</code> est une fonction \u00e0 param\u00e8tre, qui affiche dans la console le contenu du param\u00e8tre.</li> </ul>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#22-parametres-multiples","title":"2.2 Param\u00e8tres multiples","text":"<p>Une fonction peut avoir de multiples param\u00e8tres :</p> <p>Exemple fondateur n\u00b02 </p> \ud83d\udc0d Script Python<pre><code>def repete(mot, k):\n    for i in range(k):\n        print(mot)\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; repete(\"NSI\", 3)\nNSI\nNSI\nNSI\n</code></pre> <p>L'ordre des param\u00e8tres pass\u00e9s est alors important ! Le code ci-dessous est incorrect.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; repete(3, \"test\")\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n&lt;ipython-input-9-a84914f8a6c6&gt; in &lt;module&gt;()\n----&gt; 1 repete(3, \"test\")\n\n\n&lt;ipython-input-8-7dc8032e3f17&gt; in repete(mot, k)\n        1 def repete(mot, k) :\n----&gt; 2     for i in range(k):\n        3         print(mot)\n        4 \n        5 repete(\"NSI\", 5)\n\n\nTypeError: 'str' object cannot be interpreted as an integer\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#3-fonction-avec-parametres-et-avec-valeur-renvoyee","title":"3. Fonction avec param\u00e8tre(s) et avec valeur renvoy\u00e9e","text":"<p>On retrouve ici la notion classique de fonction rencontr\u00e9e en math\u00e9matiques : un proc\u00e9d\u00e9 qui prend un nombre et en renvoie un autre. En informatique, l'objet renvoy\u00e9 ne sera pas forc\u00e9ment un nombre (cela pourra \u00eatre aussi une liste, un tableau, une image...). Le renvoi d'une valeur se fait gr\u00e2ce au mot-cl\u00e9 <code>return</code>.</p> <p>Exemple fondateur n\u00b03 </p> <p>La fonction math\u00e9matique \\(f : x \\longmapsto 2x+3\\) se codera par : \ud83d\udc0d Script Python<pre><code>def f(x):\n    return 2*x + 3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; f(10)\n23\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#4-autour-du-return","title":"4. Autour du <code>return</code>","text":""},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#41-la-force-du-return","title":"4.1 La force du <code>return</code>","text":"<p>Diff\u00e9rence fondamentale entre <code>return</code> et <code>print</code> </p> <p>Le mot-cl\u00e9 <code>return</code> de l'exemple pr\u00e9c\u00e9dent fait que l'expression <code>f(10)</code> est \u00e9gale \u00e0 23. On peut d'ailleurs \u00e9crire en console : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; f(10) + 5\n28\n</code></pre> Imaginons (avant de l'oublier tr\u00e8s vite) le code affreux ci-dessous : \ud83d\udc0d Script Python<pre><code>def g(x):\n    print(2*x + 3)\n</code></pre> On pourrait avoir l'illusion que la fonction <code>g</code> fait correctement son travail : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; g(10)\n23\n</code></pre> Mais <code>g</code> se contente d'afficher sa valeur calcul\u00e9e, et non pas de la renvoyer. En effet : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; g(10) + 5\n23\nTraceback (most recent call last):\nFile \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n</code></pre> En r\u00e9sum\u00e9 : </p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#42-le-return-est-un-siege-ejectable","title":"4.2 Le <code>return</code> est un si\u00e8ge \u00e9jectable","text":"<p>Le mot-cl\u00e9 <code>return</code> provoque une \u00e9jection du code : tout ce qui est situ\u00e9 apr\u00e8s le \u00a0<code>return</code> ne sera pas ex\u00e9cut\u00e9. Observez la diff\u00e9rence entre les fonctions <code>g</code>  et <code>h</code> .</p> \ud83d\udc0d Script Python<pre><code>def g(x):\n    print(\"ce texte sera bien affich\u00e9\")\n    return 2*x+3\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; g(4)\nce texte sera bien affich\u00e9\n11\n</code></pre> \ud83d\udc0d Script Python<pre><code>def h(x):\n    return 2*x+3\n    print(\"ceci ne sera jamais affich\u00e9\")\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; h(4)\n11\n</code></pre>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#43-les-fonctions-sans-return-sont-elles-des-fonctions","title":"4.3 Les fonctions sans <code>return</code> sont-elles des fonctions ?","text":"<ul> <li> <p>Pour les puristes, une fonction sans valeur renvoy\u00e9e sera plut\u00f4t appel\u00e9e proc\u00e9dure. Le mot fonction est alors r\u00e9serv\u00e9 aux fonctions qui ont effectivement un <code>return</code>.</p> </li> <li> <p>On peut doter artificiellement \u00e0 toutes les fonctions d'un <code>return</code>, en renvoyant la valeur <code>None</code> : \ud83d\udc0d Script Python<pre><code>def chat_penible(n):\n    for k in range(n):\n        print(\"meoww\")\n    return None\n</code></pre></p> </li> </ul>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#5-variables-locales-variables-globales","title":"5. Variables locales, variables globales","text":""},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#51-notion-despace-de-noms","title":"5.1 Notion d'espace de noms","text":"<p>D\u00e9finitions </p> <ul> <li>Les variables d\u00e9finies dans le corps d'une fonction sont appel\u00e9es variables locales.</li> <li>Les variables d\u00e9finies dans le corps du programme (sous-entendu : pas \u00e0 l'int\u00e9rieur d'une fonction) sont appel\u00e9es variables globales.</li> </ul> <p>On dit que les fonctions cr\u00e9ent leur \u00abespace de noms\u00bb (espace est \u00e0 prendre au sens d'univers), un espace qui leur est propre.</p> <p>Quelles sont les r\u00e8gles r\u00e9gissant ces espaces de noms ? Les fronti\u00e8res entre ces espaces sont elles poreuses ? </p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#52-regles-dacces-en-lecture-et-en-modification-dune-variable-suivant-son-espace-dorigine","title":"5.2 R\u00e8gles d'acc\u00e8s en lecture et en modification d'une variable suivant son espace d'origine","text":"<p>R\u00e8gles d'acc\u00e8s aux variables locales et globales </p> <ul> <li>r\u00e8gle 1 : une variable locale (d\u00e9finie au c\u0153ur d'une fonction) est inaccessible hors de cette fonction.</li> <li>r\u00e8gle 2 : une variable globale (d\u00e9finie \u00e0 l'ext\u00e9rieur d'une fonction) est accessible en lecture \u00e0 l'int\u00e9rieur d'une fonction.</li> <li>r\u00e8gle 3 : une variable globale (d\u00e9finie \u00e0 l'ext\u00e9rieur d'une fonction) ne peut pas \u00eatre modifi\u00e9e \u00e0 l'int\u00e9rieur d'une fonction.</li> </ul> <p></p> <p>Exercice</p> \u00c9nonc\u00e9Correction code ACorrection code BCorrection code C <p>On consid\u00e8re les 3 codes ci-dessous. Pour chacun, dire sans l'ex\u00e9cuter s'il est valide ou non. S'il ne l'est pas, identifier la r\u00e8gle (parmi celles \u00e9nonc\u00e9es ci-dessus) qui est bafou\u00e9e.</p> <p>code A \ud83d\udc0d Script Python<pre><code>points = 0\ndef verdict(reponse):\n    if reponse &gt; 10:\n        points += 3\n\nverdict(12)\n</code></pre></p> <p>code B \ud83d\udc0d Script Python<pre><code>def bouge(x, decalage):\n    x += decalage\n\nbouge(100, 5)\nprint(x)\n</code></pre></p> <p>code C \ud83d\udc0d Script Python<pre><code>def test_bac(moyenne):\n    if moyenne &gt;= 10:\n        print(\"admis !\")\n\ndef coup_de_pouce(note):\n    return note + bonus\n\nbonus = 0.6\nma_moyenne = 9.5\nma_moyenne = coup_de_pouce(ma_moyenne)\ntest_bac(ma_moyenne)\n</code></pre></p> <p>Ce code n'est pas valide, car il contrevient \u00e0 la r\u00e8gle 3.</p> <p><code>ligne 4</code> : la modification de la variable globale <code>points</code> est interdite.</p> <p>Ce code n'est pas valide, car il contrevient \u00e0 la r\u00e8gle 1.</p> <p><code>ligne 5</code> : l'acc\u00e8s \u00e0 la variable locale <code>x</code> est interdit.</p> <p>Ce code est valide.</p> <p><code>ligne 6</code> : l'acc\u00e8s \u00e0 la variable globale <code>bonus</code> est autoris\u00e9, selon la r\u00e8gle 2.            </p> <p>\u00c0 propos de la r\u00e8gle n\u00b03</p> <p>(toute la v\u00e9rit\u00e9, rien que la v\u00e9rit\u00e9)</p> <p>Pour certains types de variables (listes, dictionnaires...), la modification d'une variable globale \u00e0 l'int\u00e9rieur du corps d'une fonction est en fait possible (contrairement \u00e0 ce qu'\u00e9nonce la r\u00e8gle 3). Mais cela reste tr\u00e8s fortement d\u00e9conseill\u00e9.</p> <p>Pour les autres types de variables,  on peut m\u00eame forcer pour avoir cette possibilit\u00e9 en utilisant le mot <code>global</code> \u00e0 l'int\u00e9rieur de la fonction. </p> <p>Mais il faut essayer d'\u00e9viter ceci. Une fonction ne doit (c'est un ordre, mais vous pouvez choisir de l'ignorer, tout comme vous pouvez choisir de passer au feu rouge) modifier que les variables qu'elle cr\u00e9e (ses variables locales) ou bien les variables qu'on lui a donn\u00e9es en param\u00e8tre. </p> <p>Une fonction qui ne respecte pas cette r\u00e8gle pr\u00e9sente des effets de bord : on peut peut-\u00eatre arriver \u00e0 les g\u00e9rer sur un \u00abpetit\u00bb code, mais cela devient illusoire sur un code utilisant de multiples fonctions. </p> <p> .</p> <p>En r\u00e9sum\u00e9</p> <p>Ne pas faire cela : \ud83d\udc0d Script Python<pre><code># PAS BIEN\nscore = 0\ndef ramasse_objet(objet):\n    global score\n    if objet == \"champignon\":\n        score += 20\n    if objet == \"banane\":\n        score -= 300\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ramasse_objet(\"champignon\")\n&gt;&gt;&gt; score\n20\n</code></pre></p> <p>Faire plut\u00f4t ceci :</p> <p>\ud83d\udc0d Script Python<pre><code># BIEN\nscore = 0\ndef ramasse_objet(objet, score):  # ma fonction veut modifier score ? \n    if objet == \"champignon\":     # -&gt; ok, je mets score dans ses param\u00e8tres\n        score += 20\n    if objet == \"banane\":\n        score -= 300\n    return score # je renvoie le nouveau score\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; score = ramasse_objet(\"champignon\", score)\n&gt;&gt;&gt; score\n20\n</code></pre></p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#6-documenter-une-fonction","title":"6. Documenter une fonction","text":""},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#61-help","title":"6.1 Help !","text":"<p>Si une fonction peut \u00eatre assimil\u00e9e \u00e0 un outil, il est normal de se demander si cet outil poss\u00e8de un mode d'emploi.</p> <p>Observons les fonctions pr\u00e9-d\u00e9finies par Python, et notamment une des premi\u00e8res que nous avons rencontr\u00e9es : la fonction <code>print()</code>. Son mode d'emploi est accessible gr\u00e2ce \u00e0 la commande <code>help(print)</code>.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; help(print)\nHelp on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream\n</code></pre> <p>Pensez \u00e0 utiliser cette fonction <code>help()</code> (en d'autres termes, RTFM) </p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#62-creer-le-mode-demploi-de-ses-propres-fonctions-les-docstrings","title":"6.2 Cr\u00e9er le mode d'emploi de ses propres fonctions : les docstrings","text":"<p>Il est possible, voire souhaitable (d\u00e8s qu'on cr\u00e9\u00e9 un code comportant plusieurs fonctions, et/ou qui sera amen\u00e9 \u00e0 \u00eatre lu par d'autres personnes), de cr\u00e9er un mode d'emploi pour ses fonctions. On appelle cela \u00e9crire la docstring de la fonction, et c'est tr\u00e8s simple : il suffit de l'encadrer par des triples double-quotes <code>\"\"\"</code>.</p> <p>Exemple</p> \ud83d\udc0d Script Python<pre><code>def chat_penible(n):\n    \"\"\"\n    Affiche n fois la chaine de caract\u00e8res \"meoww\"\n    @param entree : n : int : nb de r\u00e9p\u00e9tition\n    \"\"\"\n    for k in range(n):\n        print(\"meoww\")\n</code></pre> <p>On peut donc maintenant demander de l'aide pour cette fonction :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; help(chat_penible)\nHelp on function chat_penible in module __main__:\n\nchat_penible(n)\n    Affiche n fois la chaine de caract\u00e8res \"meoww\"\n    @param entree : n : int : nb de r\u00e9p\u00e9tition\n</code></pre> <p>Plus de renseignements sur les docstrings ici</p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/cours/#7-jeux-de-tests-pour-une-fonction","title":"7. Jeux de tests pour une fonction","text":"<p>Les exercices de cette feuille sont (presque) tous livr\u00e9s avec un jeu de tests. Il s'agit d'une fonction, souvent appel\u00e9e <code>test_nom_de_la fonction()</code>, qui va regrouper les diff\u00e9rents tests qu'on pourrait faire en console pour v\u00e9rifier que la fonction a le comportement d\u00e9sir\u00e9.</p> <p>Ces tests reposent sur le mot-cl\u00e9 <code>assert</code>, qui va lever une erreur lorsqu'il est suivi d'une expression \u00e9valu\u00e9e \u00e0 <code>False</code> :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; assert 3 &gt; 2\n&gt;&gt;&gt; assert 3 &gt; 5\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nAssertionError\n&gt;&gt;&gt; assert True\n&gt;&gt;&gt; assert False\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre> <p>Exemple d'un jeu de tests</p> \ud83d\udc0d Script Python<pre><code>def maxi(n1, n2):\n    \"\"\"\n    fonction qui d\u00e9termine le maximum entre deux entiers\n    @param entr\u00e9e : n1, n2 : int \n    @param sortie : int : maximum des deux entiers\n    \"\"\"\n    if n1 &lt; n2 :\n        return n2\n    else :\n        return n1\n\ndef test_maxi():\n    assert maxi(3,4) == 4\n    assert maxi(5,2) == 5\n    assert maxi(7,7) == 7\n    print(\"tests ok\")\n\n#ou directement \u00e0 la suite de la fonction\nassert maxi(3,4) == 4\nassert maxi(5,2) == 5\nassert maxi(7,7) == 7 \n</code></pre> <p>Il faut v\u00e9rifier que les tests couvrent toutes les situations possibles, mais ce n'est pas toujours facile !</p> <p>Ce que l'on teste</p> <ul> <li>Cas g\u00e9n\u00e9ral : teste le comportement attendu de la fonction dans un cas \"normal\"</li> <li>Cas Limite : teste le comportement attendu de la fonction dans les limites de l'intervalle de valeur des param\u00e8tres d'entr\u00e9e<ul> <li>le z\u00e9ro</li> <li>chaine de caract\u00e8re Vide</li> <li>nombre n\u00e9gatif (si autoris\u00e9 par )</li> <li>d\u00e9cimaux (si autoris\u00e9)</li> </ul> </li> </ul> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re (\u00e0 nouveau !) le jeu du FizzBuzz. </p> <p>Rappel des r\u00e8gles</p> <ul> <li>si le nombre est divisible par 3, on ne le dit pas et on le remplace par Fizz.</li> <li>si le nombre est divisible par 5, on ne le dit pas et on le remplace par Buzz.</li> <li>si le nombre est divisible par 3 et par 5, on ne le dit pas et on le remplace par FizzBuzz.</li> </ul> <p>On souhaite \u00e9crire la fonction <code>fizzbuzz(n)</code> qui renverra soit le nombre <code>n</code>, soit le mot par lequel il faut le remplacer.</p> <ol> <li>\u00c9crire la fonction <code>test_fizzbuzz()</code> qui testera la fonction <code>fizzbuzz(n)</code>.</li> <li>\u00c9crire la fonction <code>fizzbuzz(n)</code>.</li> </ol> <p>\" \ud83d\udc0d Script Python<pre><code>def fizzbuzz(n):\n    \"\"\"\n    renvoie une chaine de caract\u00e8res selon les r\u00e8gles du jeu fizzbuzz.\n    fizz si n est divisible par 3, \n    buzz si n est divisible par 5, \n    fizzbuzz si n est divisible par 3 et 5, n sinon\n\n    @param entr\u00e9e n: un entier : entier \u00e0 tester\n    @sortie : entier ou chaine de caract\u00e8re\n    \"\"\"\n    if n % 3 == 0 and n % 5 == 0:\n        return 'fizzbuzz'\n    elif n % 3 == 0:\n        return 'fizz'\n    elif n % 5 == 0:\n        return 'buzz'\n    else:\n        return n\n\ndef test_fizzbuzz():\n    assert fizzbuzz(6) == 'fizz'\n    assert fizzbuzz(10) == 'buzz'\n    assert fizzbuzz(15) == 'fizzbuzz'\n    print('tests ok !')        \n</code></pre></p> <p>\"</p>"},{"location":"T1_Demarrer_en_Python/1.5_Fonctions/exercices/","title":"Exercices","text":"<p>Exercice 1</p> \u00c9nonc\u00e9Tester sa fonctionCorrection <p>D\u00e9finissez une fonction <code>maxi(n1, n2)</code> qui renvoie le plus grand \u00e9l\u00e9ment entre <code>n1</code> et <code>n2</code>.</p> <p>Vous pouvez utiliser la fonction de tests ci-dessous : \ud83d\udc0d Script Python<pre><code>def test_maxi():\n    assert maxi(3,4) == 4\n    assert maxi(5,2) == 5\n    assert maxi(7,7) == 7\n    print(\"tests ok\")\n</code></pre></p> <p>\" \ud83d\udc0d Script Python<pre><code>def maxi(n1, n2):\n    if n1 &lt; n2 :\n        return n2\n    else :\n        return n1\n</code></pre> \"</p> <p>Exercice 2</p> \u00c9nonc\u00e9Tester sa fonctionCorrection <p>D\u00e9finissez une fonction <code>nb_voyelles(mot)</code> qui renvoie le nombre de voyelles de <code>mot</code>.</p> <p>Vous pouvez utiliser la fonction de tests ci-dessous : \ud83d\udc0d Script Python<pre><code>def test_nb_voyelles():\n    assert nb_voyelles(\"bonjour\") == 3\n    assert nb_voyelles(\"fdjgdhk\") == 0\n    assert nb_voyelles(\"au\") == 2\n    print(\"tests ok\")\n</code></pre></p> <p>\" \ud83d\udc0d Script Python<pre><code>def nb_voyelles(mot):\n    voyelles = 'aeiouy'\n    nb = 0\n    for lettre in mot:\n        if lettre in voyelles:\n            nb += 1\n    return nb\n</code></pre> \"</p> <p>Exercice 3</p> \u00c9nonc\u00e9Tester sa fonctionCorrection <p>D\u00e9finissez une fonction <code>decale(lettre)</code> qui d\u00e9cale de 3 rangs dans l'alphabet la lettre majuscule <code>lettre</code> pass\u00e9e en argument (apr\u00e8s Z, on recommencera \u00e0 A..)</p> <p>Aide :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ord('A')\n65\n&gt;&gt;&gt; chr(65)\n'A'\n</code></pre></p> <p>Vous pouvez utiliser la fonction de tests ci-dessous : \ud83d\udc0d Script Python<pre><code>def test_decale():\n    assert decale('A') == 'D'\n    assert decale('Z') == 'C'\n    print('tests ok !')\n</code></pre></p> <p>\" \ud83d\udc0d Script Python<pre><code>def decale(lettre):\n    rang_ancienne_lettre = ord(lettre) - 65\n    rang_nouvelle_lettre = (rang_ancienne_lettre + 3) % 26 + 65  \n\n    return chr(rang_nouvelle_lettre)\n</code></pre> \"</p> <p>Exercice 4</p> \u00c9nonc\u00e9Tester sa fonctionCorrection <p>Rajoutez un param\u00e8tre <code>n</code> \u00e0 la fonction pr\u00e9c\u00e9dente pour pouvoir d\u00e9caler la lettre de <code>n</code> rangs.</p> <p>Vous pouvez utiliser la fonction de tests ci-dessous : \ud83d\udc0d Script Python<pre><code>def test_decale():\n    assert decale('A', 3) == 'D'\n    assert decale('A', 5) == 'F'\n    assert decale('Z', 1) == 'A'\n    print('tests ok !')\n</code></pre></p> <p>\" \ud83d\udc0d Script Python<pre><code>def decale(lettre, n):\n    rang_ancienne_lettre = ord(lettre) - 65\n    rang_nouvelle_lettre = (rang_ancienne_lettre + n) % 26 + 65  \n\n    return chr(rang_nouvelle_lettre)\n</code></pre> \"</p> <p>Exercice 5</p> \u00c9nonc\u00e9Correction <p>Utilisez la fonction pr\u00e9c\u00e9dente pour cr\u00e9er la fonction <code>decale_phrase(p, n)</code> qui d\u00e9cale toutes les lettres d'une phrase <code>p</code> de <code>n</code> rangs.</p> <p>\" \ud83d\udc0d Script Python<pre><code>def decale_phrase(p, n):\n    phrase_decalee = ''\n    for lettre in p:\n        if lettre == ' ':\n            phrase_decalee += ' '\n        else:\n            nouvelle_lettre = decale(lettre, n)\n            phrase_decalee += nouvelle_lettre\n    return phrase_decalee\n</code></pre> \"</p> <p>Exercice 6</p> \u00c9nonc\u00e9Correction <p>D\u00e9codez la phrase <code>RT BTHHPVT CT RDCIXTCI GXTC S XCITGTHHPCI</code>.</p> <p>\" \ud83d\udc0d Script Python<pre><code>def decale(lettre, n):\n    rang_ancienne_lettre = ord(lettre) - 65\n    rang_nouvelle_lettre = (rang_ancienne_lettre + n) % 26 + 65  \n\n    return chr(rang_nouvelle_lettre)\n\ndef decale_phrase(p, n):\n    phrase_decalee = ''\n    for lettre in p:\n        if lettre == ' ':\n            phrase_decalee += ' '\n        else:\n            nouvelle_lettre = decale(lettre, n)\n            phrase_decalee += nouvelle_lettre\n    return phrase_decalee\n\n\ndef decrypt(msg_secret):\n    for decalage in range(25):\n            print(decale_phrase(msg_secret, decalage))\n\nmsg = 'RT BTHHPVT CT RDCIXTCI GXTC S XCITGTHHPCI'\n\ndecrypt(msg)\n\n# cette m\u00e9thode impose de tout lire pour y chercher une phrase ayant du sens.\n# Si on sait que la phrase sera en fran\u00e7ais, on peut chercher des mots du\n# dictionnaire. Si par exemple on sait que la phrase contiendra le mot 'MESSAGE',\n# le code peut devenir :\n\n\ndef decrypt2(msg_secret):\n    for decalage in range(25):\n        phrase_clair = decale_phrase(msg_secret, decalage)\n        if 'MESSAGE' in phrase_clair:\n            print(phrase_clair)\n\nmsg = 'RT BTHHPVT CT RDCIXTCI GXTC S XCITGTHHPCI'\n\ndecrypt2(msg)\n</code></pre> \"</p> <p>Exercice 7</p> \u00c9nonc\u00e9Correction <p>La conjecture de Syracuse (ou de Collatz) postule ceci :  </p> <p>Prenons un nombre \\(n\\) : si \\(n\\) est pair, on le divise par 2, sinon on le multiplie par 3 puis on ajoute 1. On recommence cette op\u00e9ration tant que possible. Au bout d'un certain temps, on finira toujours par tomber sur le nombre 1.</p> <ol> <li>\u00c9crire une fonction <code>suivant(n)</code> qui renvoie le successeur du nombre <code>n</code>, suivant les r\u00e8gles \u00e9nonc\u00e9es ci-dessus.</li> <li>\u00c9crire une fonction <code>syracuse(n)</code> qui affiche tous les termes de la suite de Syracuse jusqu'\u00e0 (on l'esp\u00e8re !) 1.  </li> </ol> <p>\" 1. \ud83d\udc0d Script Python<pre><code>def suivant(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3*n + 1\n</code></pre> 2. \ud83d\udc0d Script Python<pre><code>def syracuse(n):\n    print(n)\n    while n != 1:\n        n = suivant(n)\n        print(n)\n</code></pre> \"</p> <p>Exercice 8</p> \u00c9nonc\u00e9Correction <ol> <li>\u00c9crire une fonction <code>temps_de_vol(n)</code> qui renvoie le nombre d'\u00e9tapes pour arriver \u00e0 1, en partant de <code>n</code></li> <li>\u00c9crire une fonction <code>temps_max(nmax)</code> qui affiche le plus grand temps de vol pour un nombre entre 1 et <code>nmax</code>.</li> <li>Modifier cette fonction pour afficher aussi le nombre de d\u00e9part donnant ce plus grand temps de vol.</li> </ol> <p>\" 1. \ud83d\udc0d Script Python<pre><code>def temps_de_vol(n):\n    compteur = 1\n    while n != 1:\n        compteur += 1\n        n = suivant(n)\n    return compteur\n</code></pre> 2. \ud83d\udc0d Script Python<pre><code>def temps_max(nmax):\n    maximum = 0\n    for k in range(1, nmax + 1):\n        duree = temps_de_vol(k)\n        if duree &gt; maximum:\n            maximum = duree\n    print('le plus grand temps de vol vaut :', maximum)\n</code></pre> \"</p>"},{"location":"T1_Demarrer_en_Python/1.6_entrainement/exercices/","title":"Exercices","text":"<p>Exercice 1</p> \u00c9nonc\u00e9Correction <p>Ecrire un programme qui simule le lancer de 1000 d\u00e9s et qui affiche la moyenne des r\u00e9sultats obtenus.</p> \ud83d\udc0d Script Python<pre><code>from random import *\n\nsomme = 0\nfor i in range(1000):\n    d\u00e9 = randint(1,6)\n    somme = somme + d\u00e9\nmoyenne = somme / 1000\nprint(\"La moyenne des 1000 lancers est\",moyenne)\n</code></pre> <p>Exercice 2</p> \u00c9nonc\u00e9Correction <p>Ecrire un programme qui demande \u00e0 l'utilisateur un entier a et un entier n et qui calcule \\(a^n\\) \u00e0 l'aide d'une boucle <code>for</code> (on verra plus tard un algorithme plus rapide que celui-ci). Remarque : il est interdit d'utiliser <code>**</code> ici! </p> \ud83d\udc0d Script Python<pre><code>a = int(input(\"Veuillez saisir la valeurs de a (la base) : \"))\nn = int(input(\"Veuillez saisir la valeur de n (l'exponsant) : \"))\npuissance = 1\nfor i in range(n):\n    puissance = puissance * a\nprint(a,\"puissance\",n,\"est \u00e9gal \u00e0\",puissance)\n</code></pre> <p>Exercice 3</p> \u00c9nonc\u00e9Correction <p>Ecrire une fonction <code>aire</code> qui prend deux param\u00e8tres : la longueur d'un rectangle et sa largeur, et qui renvoie l'aire du rectangle correpondant. Tester ensuite cette fonction en utilisant les deux <code> assert()</code> suivants.</p> \ud83d\udc0d Script Python<pre><code>assert(aire(5,3) == 15)\nassert(aire(1,2) == 2)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def aire(longueur,largeur):\n    return longueur * largeur\n</code></pre> <p>Exercice 4</p> \u00c9nonc\u00e9Correction <p>Ecrire une fonction <code>rectangle()</code> qui prend trois param\u00e8tres : le nombre de lignes, le nombre de colonnes et un caract\u00e8re \u00e0 afficher. Cette fonction devra afficher un rectangle . Par exemple l'appel <code>rectangle(2,5,'A')</code> devra afficher : AAAAA AAAAA Tester ensuite votre fonction avec divers appels.</p> \ud83d\udc0d Script Python<pre><code>rectangle(2,5,'A')   # appel en respectant l'ordre des param\u00e8tres\nprint()   # ligne vide s\u00e9paratrice\nrectangle(caract\u00e8re = 'K',nbLignes = 3,nbColonnes = 10)  # appel sans respecter l'ordre des param\u00e8tres\n</code></pre> <p>Remarque : En Python, il est possible de ne pas respecter l'ordre des param\u00e8tres d'une fonction lors de son appel. Dans ce cas, il faut pr\u00e9ciser le r\u00f4le des param\u00e8tres comme par exemple : <code>rectangle( nbColonnes = 4, caract\u00e8re = '+', nbLignes = 7)</code></p> \ud83d\udc0d Script Python<pre><code>def rectangle(nbLignes,nbColonnes,caract\u00e8re):\n    for ligne in range(nbLignes):\n        for colonne in range(nbColonnes):\n            print(caract\u00e8re,end=\"\")\n        print()\n</code></pre> <p>Exercice 5</p> \u00c9nonc\u00e9Correction <p>Ecrire une fonction <code>nbSecondes()</code> qui prend trois param\u00e8tres : un nombre d'heures, un nombre de minutes et un nombre de secondes (par exemple (3,47,5) pour 3 heures 47 minutes 5 secondes) et qui renvoie le nombre total de secondes correspondant. Indiquer la valeur 0 comme valeur par d\u00e9faut pour le nombre d'heures, le nombre de minutes et le nombres de secondes. Tester ensuite cette fonction avec z\u00e9ro, un, deux et trois param\u00e8tres.</p> \ud83d\udc0d Script Python<pre><code>def nbSecondes(heures = 0, minutes = 0, secondes = 0):\n    return heures * 3600 + minutes * 60 + secondes\n\nprint(nbSecondes())\nprint(nbSecondes(2))\nprint(nbSecondes(0,30))\nprint(nbSecondes(1,30,12))       \n</code></pre> <p>Exercice 6</p> \u00c9nonc\u00e9Correction <p>Ecrire une fonction <code>bissextile(ann\u00e9e)</code> qui renvoie <code>True</code> si le param\u00e8tre correspond \u00e0 une ann\u00e9e bissextile et qui renvoie <code>False</code> sinon. Votre fonction ne doit utiliser ni des conditions imbriqu\u00e9es ni <code>else</code> ni des op\u00e9rateurs bool\u00e9ens. remarque :  vous pouvez effectuer une recherche sur la fa\u00e7on de calculer une ann\u00e9e bissextile.</p> \ud83d\udc0d Script Python<pre><code>def bissextile(ann\u00e9e):\n    if ann\u00e9e % 400 == 0:\n        return True\n    if ann\u00e9e % 100 == 0:\n        return False\n    if ann\u00e9e % 4 == 0:\n        return True\n    return False\n\nprint(bissextile(2021))\nprint(bissextile(2020))\nprint(bissextile(2000))\nprint(bissextile(1900))\n</code></pre> Dessiner avec Turtle <p>La biblioth\u00e8que turtle permet de dessiner \u00e0 l'\u00e9cran. Le petit programme comment\u00e9 ci-dessous permet d'obtenir un trac\u00e9 int\u00e9ressant :</p> \ud83d\udc0d Script Python<pre><code>from turtle import *      # On importe la biblioth\u00e8que turtle\n\nspeed(10)                 # On r\u00e8gle la vitesse du trac\u00e9 (un entier compris entre 1 et 10)\ncolor('red', 'yellow')    # On fixe la couleur du trac\u00e9 \u00e0 'rouge' et la couleur de rempissage \u00e0 'jaune'\nbegin_fill()\nfor i in range(36):\n    forward(200)          # La tortue avance de 200 pixels \n    left(170)             # La tortue tourne vers la gauche de 170\u00b0\nend_fill()\ndone()                    # Il faut terminer par done() pour lancer l'ex\u00e9cution du trac\u00e9    \n</code></pre> <p>Voici quelques fonctionnalit\u00e9s de turtle :</p> FonctionDescription <code>forward(x)</code>D\u00e9place la tortue de x pixels en marche avant. <code>backward(x)</code>D\u00e9place la tortue de x pixels en marche arri\u00e8re. <code>left(x)</code>Fait pivoter la tortue d'un angle de x degr\u00e9s vers la gauche. <code>right(x)</code>Fait pivoter la tortue d'un angle de x degr\u00e9s vers la droite. <code>goto(x,y)</code>D\u00e9place la tortue au point de corrdonn\u00e9es (x,y). Attention, l'axe des y est orient\u00e9 vers le haut de l'\u00e9cran comme en math\u00e9matiques! <code>penup()</code>L\u00e8ve le crayon (la tortue arr\u00eatera de tracer). <code>pendown()</code>Abaisse le crayon. La tortue se remettra \u00e0 tracer. <code>hideturtle()</code>Cache la tortue. <code>showturtle()</code>Fait r\u00e9apparaitre la tortue. <code>speed(n)</code>R\u00e8gle la vitesse du trac\u00e9. n est un entier compris entre 0 et 10. 1 correspond \u00e0 une vitesse lente, 10 correspond \u00e0 une vitesse rapide. 0 permet d'obtenir un trac\u00e9 instantan\u00e9. <code>done()</code>Lance l'ex\u00e9cution du trac\u00e9. <code>circle(r)</code>Trace un cercle de rayon r.         On peut ajouter une deuxi\u00e8me param\u00e8tre facultatif a si on souhaite tracer seulement tracer un arc de cercle d'angle a. <code>color(couleur1,couleur2)</code>D\u00e9finir la couleur du trac\u00e9 (couleur1) et la couleur de remplissage (couleur2). <code>width(n)</code>R\u00e8gle l'\u00e9paisseur du trait \u00e0 n pixels. <p>Exercice 7</p> \u00c9nonc\u00e9Correction <p>Ecrire un programme qui utilise une boucle <code>for</code> pour tracer un carr\u00e9 de c\u00f4t\u00e9 100 pixels, avec un contour bleu et colori\u00e9 en vert.</p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\ncolor('blue', 'green') \nbegin_fill()\nfor i in range(4):\n    forward(100)\n    left(90)\nend_fill()\ndone()\n</code></pre> <p>Exercice 8</p> \u00c9nonc\u00e9Correction <p>Ecrire un programme qui trace 10 cercles dont les rayons sont 10, 20, 30, ..., 100. Choisir une couleur de trac\u00e9 et une couleur de remplissage.</p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\ncolor('red', 'pink') \nspeed(10)\nbegin_fill()\nfor i in range(1,11):\n    circle(10*i)    \nend_fill()\ndone()\n</code></pre> <p>Exercice 9</p> \u00c9nonc\u00e9Correction <p>Dessiner le drapeau de la France avec Turtle.</p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\ncolor('black', 'blue') \nbegin_fill()\nfor i in range(2):\n    forward(100)\n    left(90)\n    forward(200)\n    left(90)\nend_fill()\nforward(100)\n\ncolor('black', 'white') \nbegin_fill()\nfor i in range(2):\n    forward(100)\n    left(90)\n    forward(200)\n    left(90)\nend_fill()\nforward(100)\n\ncolor('black', 'red') \nbegin_fill()\nfor i in range(2):\n    forward(100)\n    left(90)\n    forward(200)\n    left(90)\nend_fill()\nforward(100)\n\ndone()\n</code></pre>"},{"location":"T2_Type_de_base/sommaire/","title":"Th\u00e8me 2 : Repr\u00e9sentation des donn\u00e9es - Type de base","text":"<ol> <li>Bases</li> <li>Codage des entiers</li> <li>Codage des d\u00e9cimaux</li> <li>Cha\u00eenes de caract\u00e8res</li> <li>Bool\u00e9ens</li> </ol>"},{"location":"T2_Type_de_base/2.1_Binaire/cours/","title":"2.1 Binaire","text":"<p>R\u00e8gle du jeu : Disposer les cartes ci-dessous dans l\u2019ordre sur la table. Vous ne pouvez que retourner ou non chaque carte. Il s'agit ensuite de compter le nombre de points visibles.</p> <p></p>"},{"location":"T2_Type_de_base/2.1_Binaire/cours/#jouons-avec-des-cartes","title":"Jouons avec des cartes","text":"<p> A tour de r\u00f4le, demander \u00e0 votre bin\u00f4me d\u2019afficher un entier choisi au hasard (ex :  6 , 21, 15 \u2026)</p> <p> Existe-t-il un nombre qui peut \u00eatre repr\u00e9sent\u00e9 de 2 fa\u00e7ons diff\u00e9rentes avec les cartes ?</p> R\u00e9ponse <p>Il n'existe qu'une et une seule fa\u00e7on de repr\u00e9senter un entier</p> <p> Peut-on afficher n'importe quel entier ? </p> R\u00e9ponse <p>on peut repr\u00e9senter l'ensemble des entiers jusqu'\u00e0 un certain maximum</p> <p> Quel est le maximum ?  </p> R\u00e9ponse <p>16 + 8 + 4 + 2 + 1 = 31 </p> <p>Compter \u00e0 partir de 0 et essayer de rep\u00e9rer le m\u00e9canisme de progression.</p>"},{"location":"T2_Type_de_base/2.1_Binaire/cours/#passons-au-binaire","title":"Passons au binaire","text":"<p>Pour chaque carte,  on note 1  si elle est tourn\u00e9e du c\u00f4t\u00e9 visible (recto) et   on note 0  si la face est invisible (c\u00f4t\u00e9 verso).  Quel nombre est repr\u00e9sent\u00e9 par le mot  01001 ? </p> R\u00e9ponse <p>9</p> <p> Quel nombre est repr\u00e9sent\u00e9 par le mot  00000 ? </p> R\u00e9ponse <p>z\u00e9ro</p> <p> Quel nombre est repr\u00e9sent\u00e9 par le mot  11111 ? </p> R\u00e9ponse <p>31</p> <p> Comment \u00e9crit-on 17 en binaire ?  </p> R\u00e9ponse <p>10001</p> <p>A retenir</p> <p>Le syst\u00e8me binaire est un syst\u00e8me de num\u00e9ration de position de base deux : les deux seuls chiffres qui le composent sont le <code>0</code> et le <code>1</code>. Le syst\u00e8me binaire est le \"langage\" des ordinateurs. Toutes les machines num\u00e9riques utilisent le syst\u00e8me binaire pour coder des informations (textes, sons, images, vid\u00e9os\u2026). L'ordinateur communique avec le monde ext\u00e9rieur en envoyant des informations sous la forme de nombres binaires \u00e0 8 bits appel\u00e9s octets.  Un octet (Byte) repr\u00e9sente 8 bits (BInary digiT)</p>"},{"location":"T2_Type_de_base/2.1_Binaire/cours/#le-systeme-binaire","title":"Le syst\u00e8me binaire","text":"<p>Chaque carte repr\u00e9sente en fait un \"bit\" (binary digit). Un ensemble de bits est appel\u00e9 un \u00ab mot \u00bb.  - Il existe 256 mots de 8 bits  - Ces mots codent les entiers de 0  \u00e0 255      - Un mot de 8 bits s\u2019appelle  un octet - Le bit le plus \u00e0 gauche est nomm\u00e9 bit de poids fort</p>"},{"location":"T2_Type_de_base/2.1_Binaire/cours/#du-binaire-vers-le-decimal","title":"Du binaire vers le d\u00e9cimal","text":"<p>et si on passait en syst\u00e8me D\u00e9cimal \u2026.</p> ... 128 64 32 16 8 4 2 1 ... \\(2^7\\) \\(2^6\\) \\(2^5\\) \\(2^4\\) \\(2^3\\) \\(2^2\\) \\(2^1\\) \\(2^0\\) ... 1 1 0 1 0 0 1 0 <p>\\(11010010_2=1 \\times 2^7+ 1 \\times 2^6+0 \\times 2^5+1 \\times 2^4+0 \\times 2^3+0 \\times 2^2+1 \\times 2^1+0 \\times 2^0=128+64+32+2=210_{10}\\)</p> <p>Le nombre binaire <code>11010010</code> correspond donc au nombre d\u00e9cimal <code>210</code>.</p> <p>Code Python</p> <p>En Python, on peut utiliser la fonction <code>int(\"nombre\", base)</code>. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; int(\"11010010\", 2)\n210\n</code></pre></p>"},{"location":"T2_Type_de_base/2.1_Binaire/cours/#du-decimal-vers-le-binaire","title":"Du decimal vers le binaire","text":"<p>Principe : dans chaque nombre d\u00e9cimal, il existe une plus grande puissance de 2 qui est inf\u00e9rieure au nombre. </p> <p>Par exemple, dans 243, il y a 128. Donc  \\(243=128 + (115)\\) \\(243=128+64+(51)\\) \\(243=128+64+32+(19)\\) \\(243=128+64+32+16+(3)\\) \\(243=128+64+32+16+2+1\\) \\(243=1 \\times 2^7+ 1 \\times 2^6+1 \\times 2^5+1 \\times 2^4+0 \\times 2^3+0 \\times 2^2+1 \\times 2^1+1 \\times 2^0\\)</p> <p>Donc \\(243_{10}=11110011_2\\)</p> <p>M\u00e9thode des divisions successives</p> <p></p> <p>Code Python</p> <p>En Python, on peut utiliser la fonction <code>bin(nombre)</code>. Elle renvoie une cha\u00eene de caract\u00e8re o\u00f9 le nombre binaire est pr\u00e9c\u00e9d\u00e9 de <code>'0b'</code>. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin(243)\n'0b11110011'\n</code></pre></p> <p>D\u00e9finition</p> <ul> <li>Codage : Op\u00e9ration consistant \u00e0 repr\u00e9senter des informations \u00e0 l'aide d'un code.</li> <li>Codage binaire : Le code binaire utilise exclusivement les symboles 0 et 1 (syst\u00e8mes logiques).</li> <li>Bit : C'est le chiffre \u00e9l\u00e9mentaire de la num\u00e9rotation binaire.</li> <li>Mot : Groupe de \"n\" bits; un mot de 4 bits s'appelle un quartet, 8 bits s'appelle un octet...</li> <li>Poids : Coefficient attach\u00e9 au rang d'un chiffre dans un syst\u00e8me de num\u00e9rotation. En num\u00e9rotation binaire, on parle du bit de plus faible poids qui est la position binaire de droite dans un mot et du bit de plus fort poids qui repr\u00e9sente le bit situ\u00e9 le plus \u00e0 gauche dans mot.</li> </ul>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/","title":"2.7 Codage des entiers","text":"<p> Attention </p> <p>La mani\u00e8re dont les nombres (entiers, non-entiers, positifs, n\u00e9gatifs...) sont trait\u00e9s par un langage de programmation est sp\u00e9cifique \u00e0 ce langage.</p> <p>Dans toute la suite de ce cours, pour simplifier, nous consid\u00e9rerons que les nombres sont cod\u00e9s sur 1 octet seulement. Ce qui ne correspond pas \u00e0 la r\u00e9alit\u00e9, mais permet de comprendre les notions essentielles.</p>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#1-les-nombres-entiers-en-binaire-non-signe","title":"1. Les nombres entiers en binaire non sign\u00e9","text":"<p>L'expression \"non sign\u00e9\" signifie que la contrainte du signe n'existe pas : tous les nombres sont consid\u00e9r\u00e9s comme \u00e9tant positifs.</p> <p>Nous avons d\u00e9j\u00e0 vu comment ces nombres se codaient en binaire.  </p> <p>Sur un octet, le nombre minimal qu'on puisse coder est <code>00000000</code>. C'est l'entier naturel 0. Le nombre maximal qu'on puisse coder est <code>11111111</code>. C'est l'entier naturel 255.</p> <p>Exercice</p> \u00c9nonc\u00e9Correction <ol> <li>Quel est le plus grand entier non sign\u00e9 codable sur 16 bits ?</li> <li>... sur 32 bits ?</li> <li>... \\(n\\) bits ?</li> </ol> <ol> <li>\\(N=1+2+2^2+2^3+\\dots+2^{15}= 65535\\)</li> <li>\\(N=1+2+2^2+2^3+\\dots+2^{31}= 4294967295\\)</li> <li>Pour tout \\(n \\in \\mathbb{N}\\), \\(1+2+2^2+2^3+\\dots+2^{n-1}=2^{n}-1\\) (formule de la somme des termes d'une suite g\u00e9om\u00e9trique de raison 2).</li> </ol> <p>Python et les entiers </p> <p>Depuis la version 3 du langage Python, il n'y a plus de taille maximale pour les entiers en Python.</p> <p>Ceci implique que la taille n\u00e9cessaire au codage de l'entier est allou\u00e9e dynamiquement par Python (avec pour seule limite celle de la m\u00e9moire disponible). </p> <p>Exercice</p> \u00c9nonc\u00e9Correction <ol> <li>Effectuer la somme des deux nombres binaires <code>00001101</code> et <code>00001011</code>.</li> <li>V\u00e9rifier que le r\u00e9sultat est coh\u00e9rent en base 10.</li> </ol> <ol> <li></li> <li>Cette addition correspond \u00e0 \\(13+11=24\\)</li> </ol>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#2-les-nombres-entiers-en-binaire-signe","title":"2. Les nombres entiers en binaire sign\u00e9","text":""},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#21-la-partiellement-fausse-bonne-idee","title":"2.1 La (partiellement) fausse bonne id\u00e9e","text":"<p>Comment diff\u00e9rencier les nombres positifs des nombres n\u00e9gatifs ?  L'id\u00e9e naturelle est de r\u00e9server 1 bit pour le signe, et de coder le reste du nombre \u00abnaturellement\u00bb.</p> <p>Par exemple, on peut d\u00e9cr\u00e9ter que le premier bit (appel\u00e9 bit de poids fort) sera le bit de signe :</p> <ul> <li>0 pour un nombre positif</li> <li>1 pour un nombre n\u00e9gatif</li> </ul> <p>Dans ce cas, <code>00000011</code> serait le nombre \\(+3\\) et <code>10000011</code> serait le nombre \\(-3\\).</p> <p>Probl\u00e8mes :</p> <ul> <li>le z\u00e9ro serait repr\u00e9sent\u00e9 \u00e0 la fois par <code>00000000</code> et <code>10000000</code>, ce qui n'est pas tr\u00e8s \u00e9conome.</li> <li>plus grave : l'addition \\((+3)+(-3)\\) serait \u00e9gale \u00e0 \\(-6\\) ! </li> </ul> <p>Moralit\u00e9 :</p> <p>Ce syst\u00e8me d'\u00e9criture ne marche pas bien.</p>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#22-a-la-recherche-de-loppose-dun-nombre","title":"2.2 \u00c0 la recherche de l'oppos\u00e9 d'un nombre","text":"<p>Id\u00e9e :</p> <p>Plut\u00f4t que de chercher \u00e0 \u00e9crire directement le nombre \\(-3\\), nous allons chercher \u00e0 d\u00e9terminer ce qu'il faut ajouter \u00e0 \\((+3)\\) pour obtenir 0.</p> <p>Que faut-il ajouter au nombre \\((+3)\\) pour obtenir 0 ? </p> <p>L'id\u00e9e naturelle est de commencer par la droite, en essayant de \u00abfabriquer du z\u00e9ro\u00bb en choisissant le bon bit \u00e0 ajouter :</p> <p></p> <p></p> <p>On arrive bien \u00e0 fabriquer des 0 sur tout notre octet, mais que devient la retenue (en anglais carry) de 1 qui d\u00e9borde de notre octet ?</p> <p>R\u00e9ponse : rien ! Elle sera perdue et c'est une tr\u00e8s bonne nouvelle. Ce nombre sera donc consid\u00e9r\u00e9 comme un 0 : nous avons trouv\u00e9 comment coder \\(-3\\).</p> <p>Le nombre \\(-3\\) s'\u00e9crit donc <code>11111101</code>.</p> <p>Comment, \u00e0 partir du nombre <code>00000011</code>, aurait-on pu le trouver directement (sans raisonner de proche en proche) ?</p> <p>On peut remarquer qu'en inversant chaque bit du nombre de d\u00e9part <code>00000011</code>, on obtient <code>11111100</code>, qui appel\u00e9 le compl\u00e9ment \u00e0 2 du nombre <code>00000011</code>.</p> <p>Il ne reste donc plus qu'\u00e0 ajouter <code>1</code> \u00e0 ce nombre <code>11111100</code> pour obtenir le nombre cherch\u00e9, <code>11111101</code></p> <p>  ce nombre <code>11111101</code> repr\u00e9sente 253 en codage non sign\u00e9. Il est donc n\u00e9cessaire, lorsqu'on repr\u00e9sente un nombre, de savoir si les nombres manipul\u00e9s seront des entiers naturels (non sign\u00e9s) ou bien relatifs (sign\u00e9s).</p>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#23-tableau-des-entiers-en-binaire-signe","title":"2.3 Tableau des entiers en binaire sign\u00e9","text":"binaire base 10 10000000 -128 10000001 -127 10000010 -126 10000011 -125 10000100 -124 10001001 -123 ... ... 11111100 -4 11111101 -3 11111110 -2 11111111 -1 00000000 0 00000001 1 00000010 2 00000011 3 00000100 4 ... ... 01111100 124 01111101 125 01111110 126 01111111 127"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#24-conclusion-ecriture-loppose-dun-nombre-positif","title":"2.4 Conclusion : \u00e9criture l'oppos\u00e9 d'un nombre positif","text":"<p>Consid\u00e9rons que ce nombre positif s'\u00e9crit sur 7 bits, donc qu'il est de la forme <code>0XXXXXXX</code>.</p> <p>\u00c9criture de l'oppos\u00e9 d'un nombre positif </p> <ul> <li>On prend le compl\u00e9ment \u00e0 2 de chacun des 8 bits du nombre de d\u00e9part</li> <li>On ajoute 1 au nombre obtenu.</li> </ul> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>Donner l'\u00e9criture binaire sur un octet du nombre \\(-13\\).</p> <p>Commen\u00e7ons par \u00e9crire le nombre 13 en binaire. Il s'\u00e9crit \u00a0<code>00001101</code>.</p> <ul> <li>en prenant le compl\u00e9ment \u00e0 2 de chaque bit, on obtient <code>11110010</code>.</li> <li>en ajoutant 1 \u00e0 ce dernier nombre, on obtient <code>11110011</code>. </li> </ul> <p>Le nombre \\(-13\\) s'\u00e9crit donc <code>11110011</code>.</p> <p> Remarque Les nombres n\u00e9gatifs commenceront donc toujours par le bit 1, et les nombres positifs par le bit 0. Cela revient \u00e0 suivre partiellement notre fausse bonne id\u00e9e du 2.1. Et cela donne surtout une m\u00e9thode tr\u00e8s pratique pour savoir qui est positif et qui est n\u00e9gatif !</p>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#3-travail-inverse-passage-du-binaire-signe-au-nombre-relatif","title":"3. Travail inverse : passage du binaire sign\u00e9 au nombre relatif","text":"<p>Consid\u00e9rons le nombre <code>11101101</code>, cod\u00e9 en binaire sign\u00e9. \u00c0 quel nombre relatif correspond-il ?</p> <ol> <li>On observe son bit de poids fort : ici 1, donc ce nombre est n\u00e9gatif. Si ce bit est \u00e9gal \u00e0 0, le nombre cod\u00e9 est positif, il suffit d'op\u00e9rer une conversion binaire classique.</li> <li>Comme ce nombre est n\u00e9gatif, il va falloir inverser le protocole pr\u00e9c\u00e9dent. On commence donc par enlever 1 au nombre propos\u00e9. On trouve <code>11101100</code>.</li> <li>On prend ensuite le compl\u00e9ment \u00e0 2 de chaque bit. On trouve <code>00010011</code>.</li> <li>On convertit en base 10 le nombre obtenu, qui \u00e9tait donc 19.</li> <li>Le nombre initial \u00e9tait donc \\(-19\\).</li> </ol> <p>Exercice</p> \u00c9nonc\u00e9Correction <ol> <li>En binaire sign\u00e9, \u00e0 quel nombre correspond <code>11110001</code>?</li> <li>En binaire sign\u00e9, quel est le plus grand nombre que l'on puisse \u00e9crire sur un octet ? </li> <li>Quel est le plus petit nombre ?</li> <li>Au total, combien de nombres diff\u00e9rents peuvent \u00eatre \u00e9crits en binaire sign\u00e9 ?</li> </ol> <ol> <li><code>11110001</code> - <code>1</code> = <code>11110000</code>. En prenant le compl\u00e9ment \u00e0 2, on trouve <code>00001111</code>, qui vaut 15. Le nombre <code>11110001</code> repr\u00e9sente donc \\(-15\\).</li> <li>Le plus grand nombre est <code>01111111</code>, soit \\(+127\\).</li> <li>Le plus petit nombre est <code>10000000</code>. <code>10000000</code> - <code>1</code> = <code>01111111</code>. Le compl\u00e9ment est <code>10000000</code>, qui est \u00e9gal \u00e0 128. Donc le nombre minimal est \\(-128\\).</li> <li>Il y a 128 nombres n\u00e9gatifs (de \\(-128\\) \u00e0 \\(-1\\)), le nombre 0, puis 127 nombres positifs (de 1 \u00e0 127). Il y a donc 256 nombres au total, comme en binaire non sign\u00e9. </li> </ol>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#4-le-codage-des-entiers-une-source-intarissable-derreurs","title":"4. Le codage des entiers, une source intarissable d'erreurs...","text":""},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#41-le-vol-501-dariane-5","title":"4.1 Le vol 501 d'Ariane 5","text":"<p>Le 04 juin 1996, le vol inaugural d'Ariane 5 a malheureusement fini dans une gerbe d'\u00e9tincelles.</p> <p>En cause : un code pr\u00e9vu pour Ariane 4 avait \u00e9t\u00e9 gard\u00e9 pour le nouveau mod\u00e8le Ariane 5. Dans ce \u00abvieux\u00bb code, une donn\u00e9e issue d'un capteur (le capteur de vitesse horizontale) \u00e9tait cod\u00e9 sur 8 bits. La valeur maximale acceptable de cette donn\u00e9e \u00e9tait donc 255.</p> <p>Or, Ariane 5 \u00e9tant beaucoup plus puissante, le capteur de vitesse horizontale a renvoy\u00e9, au bout de 30 secondes, la valeur 300 : cette valeur a provoqu\u00e9 un d\u00e9passement des 8 bits pr\u00e9vus et a donn\u00e9 un r\u00e9sultat absurde. L'ordinateur de bord a cru que la fus\u00e9e \u00e9tait en train de se coucher et a violemment orient\u00e9 les tuy\u00e8res de propulsion pour redresser Ariane 5, alors que celle-ci s'\u00e9levait pourtant bien verticalement...  Ariane 5 a alors brusquement pivot\u00e9 avant d'exploser.</p> <p>Cette catastrophe (150 millions d'euros et des ann\u00e9es de travail perdus) a fait prendre conscience \u00e0 la communaut\u00e9 scientifique de l'importance de faire des tests logiciels toujours plus pouss\u00e9s : ce n'est pas parce qu'un code marche dans un environnement donn\u00e9 qu'il marchera de la m\u00eame mani\u00e8re dans d'autres conditions...</p>"},{"location":"T2_Type_de_base/2.2_Codage_entiers/cours/#42-le-bug-de-lannee-2038","title":"4.2 Le bug de l'ann\u00e9e 2038","text":"<p>Expliquons ce (superbe) gif issu de la page Wikipedia Bug de l'an 2038.</p> <p>Lorsqu'on demande \u00e0 Python l'heure qu'il est, par la fonction <code>time()</code> du module <code>time</code>, voici ce qu'il r\u00e9pond :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; time.time()\n1653855138.398177\n</code></pre> <p>Il nous renvoie le nombre de secondes \u00e9coul\u00e9es depuis le 1er janvier 1970 \u00e0 00h00. On appelle cela l'heure POSIX ou l'heure UNIX l'heure UNIX. Au 29 mai 2022, il s'en donc \u00e9coul\u00e9 environ 1,6 milliards.</p> <p>Dans beaucoup de syst\u00e8mes informatiques, ce nombre de secondes est cod\u00e9 par un entier sign\u00e9 sur 32 bits. Le nombre maximum de secondes qui peut \u00eatre repr\u00e9sent\u00e9 est donc <code>01111111 11111111 11111111 11111111</code> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; int('01111111111111111111111111111111', 2)\n2147483647\n</code></pre> <p>Ce nombre repr\u00e9sente un peu plus de 2 milliards de secondes... En les comptant depuis le 01/01/1970 00h00m00s, on arrive au 19/01/2038 \u00e0 03h14m07s.</p> <p>\u00c0 la seconde d'apr\u00e8s, la repres\u00e9ntation binaire du temps sera <code>10000000 00000000 00000000 00000000</code>, qui sera interpr\u00e9t\u00e9 comme le nombre n\u00e9gatif \u22122147483648, et qui ram\u00e8nera donc les horloges au 13 d\u00e9cembre 1901...</p> <p>Vous pourrez lire sur la page Wikipedia cit\u00e9e plus haut plus d'informations sur ce probl\u00e8me.</p>"},{"location":"T2_Type_de_base/2.3_Decimaux/cours/","title":"2.8 Codage des non-entiers","text":""},{"location":"T2_Type_de_base/2.3_Decimaux/cours/#1-notation-binaire-des-decimaux","title":"1. Notation binaire des d\u00e9cimaux","text":""},{"location":"T2_Type_de_base/2.3_Decimaux/cours/#a-ecriture-de-position","title":"a. \u00c9criture de position","text":"<p>Comme la notation d\u00e9cimale, la notation binaire permet aussi de repr\u00e9senter les nombres \u00e0 virgule.</p> <p>En notation d\u00e9cimale, les chiffres de gauche repr\u00e9sentent les unit\u00e9s, les dizaines et ainsi de suite et ceux \u00e0 droite de la virgule, les dixi\u00e8mes, les centi\u00e8mes etc.</p> <p></p> <p>De m\u00eame, en notation binaire, les chiffres de droite repr\u00e9sentent des demis, des quarts, des huiti\u00e8mes etc.</p> <p></p> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>Trouver les nombres dont la repr\u00e9sentation en binaire est :  1 001,101 1   10 101,011 101 </p> <p> 1 001,101 1 code   10 101,011 101 code </p>"},{"location":"T2_Type_de_base/2.3_Decimaux/cours/#b-de-lecriture-decimale-a-la-notation-binaire","title":"b. De l\u2019\u00e9criture d\u00e9cimale \u00e0 la notation binaire","text":"<p>\u00c9criture d'un nombre d\u00e9cimal en binaire </p> <p>conversion de 12, 6875 en binaire  Conversion de 12 donne \\((1100)_2\\)  On effectue successivement des multiplications par 2 de la partie d\u00e9cimale, on conserve les parties enti\u00e8res</p> <p></p> <p> Donc la conversion de 0,6875 en binaire est \\((0,1011)_2\\)</p> <p>Exercice 1</p> \u00c9nonc\u00e9Correction <p>Donner l'\u00e9criture binaire de 7,09375.</p> <ul> <li>partie enti\u00e8re : \\(7 = 101_2\\)</li> <li>partie d\u00e9cimale :<ul> <li>\\(0,09375 \\times 2 = \\textbf{0},1875\\) </li> <li>\\(0,1875 \\times 2 = \\textbf{0},375\\) </li> <li>\\(0,375 \\times 2 = \\textbf{0},75\\) </li> <li>\\(0,75 \\times 2 = \\textbf{1},5\\)</li> <li>\\(0,5 \\times 2  = \\textbf{1}\\)</li> </ul> </li> </ul> <p>Donc \\(7,09375=101,00011_2\\)</p> <p>Exercice 2</p> \u00c9nonc\u00e9Correction <p>Donner l'\u00e9criture binaire de 0,2.</p> <ul> <li>partie enti\u00e8re : \\(0 = 0_2\\)</li> <li>partie d\u00e9cimale :<ul> <li>\\(0,2 \\times 2 = \\textbf{0},4\\) </li> <li>\\(0,4 \\times 2 = \\textbf{0},8\\)</li> <li>\\(0,8 \\times 2  = \\textbf{1},6\\)</li> <li>\\(0,6 \\times 2  = \\textbf{1},2\\)</li> <li>\\(0,2 \\times 2 = \\textbf{0},4\\) </li> <li>et cela continue...</li> </ul> </li> </ul> <p>Le nombre 0,2 n'admet pas d'\u00e9criture binaire finie.</p> <p>Probl\u00e8mes :</p> <ul> <li>le processus de \"conversion\" ne s'arr\u00eate pas, nous obtenons une \u00e9criture binaire infinie p\u00e9riodique. </li> </ul> Remarque <p>certains nombres (par exemple : \\(7/11 = 0.63636363 \u2026\\)) ont une \u00e9criture d\u00e9cimale infinie p\u00e9riodique. Ils auront alors une \u00e9criture binaire infinie p\u00e9riodique.  Et certains nombres ont une \u00e9criture binaire infinie p\u00e9riodique, alors m\u00eame que leur \u00e9criture d\u00e9cimale est finie (exemple : 0.2)</p> <p>Moralit\u00e9 :</p> <p>Ce syst\u00e8me d'\u00e9criture ne marche pas bien.</p> <p>Conclusion :</p> <p>Certains nombres n'admettent pas une \u00e9criture binaire finie. Or la m\u00e9moire d'un ordinateur, quelqu'il soit, est toujours finie. Certains nombres ne peuvent donc pas \u00eatre repr\u00e9sent\u00e9s correctement en machine : c'est une impossibilit\u00e9 th\u00e9orique. Cela am\u00e8ne \u00e0 des comportements \u00e9tranges : </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; 0.1 + 0.2\n0.30000000000000004\n</code></pre> <p>Remarque : parmi les nombres d\u00e9cimaux \u00e0 un chiffre apr\u00e8s la virgule (0,1  0,2  0,3 ...) seul 0,5 admet une \u00e9criture binaire finie ! Tous les autres ont une repr\u00e9sentation en machine qui n'en donne qu'une valeur approch\u00e9e.</p>"},{"location":"T2_Type_de_base/2.3_Decimaux/cours/#2-norme-iee754","title":"2. Norme IEE754","text":""},{"location":"T2_Type_de_base/2.3_Decimaux/cours/#a-notation-scientifique","title":"a. Notation scientifique","text":"<p>En notation d\u00e9cimale, elle consiste \u00e0 exprimer le nombre sous la forme \\(\\pm a \\times 10^n\\) o\u00f9 \\(\\pm\\) est appel\u00e9 signe, \\(a\\) est un nombre d\u00e9cimal de l\u2019intervalle \\([1 , 10[\\) appel\u00e9 mantisse (ou significande) et \\(n\\) est un entier relatif appel\u00e9 exposant.</p> <p> Quel est la notation scientifique de \\(105,745\\)</p> R\u00e9ponse <p>\\(1,05745 \\times 10^2\\)</p> <p> Quel est la notation scientifique de \\(0, 0745\\)</p> R\u00e9ponse <p>\\(7,45 \\times 10^-2\\)</p> <p>De m\u00eame, en notation binaire, tout ombre s\u2019exprime sous la forme \\(\\pm a \\times 2^n\\) o\u00f9 \\(\\pm\\) o\u00f9 \\(\\pm\\) est le signe, \\(a\\) est un nombre de l\u2019intervalle \\([(1)_2 , (10)_2[\\) appel\u00e9 mantisse et \\(n\\) est un entier relatif appel\u00e9 exposant.</p> <p> Quel est la notation scientifique de \\(1011, 0111 101\\)</p> R\u00e9ponse <p>\\(1,0110111 101 \\times 2^3\\)</p> <p> Quel est la notation scientifique de \\(0, 0000001101\\)</p> R\u00e9ponse <p>\\(1,101 \\times 2^-7\\)</p>"},{"location":"T2_Type_de_base/2.3_Decimaux/cours/#b-representation-des-nombres-a-virgule-en-binaire-sur-n-bits","title":"b. Repr\u00e9sentation des nombres \u00e0 virgule en binaire sur n bits","text":"<p>Principe de la norme IEE754</p> <p>On utilise la notation scientifique en binaire \\((-1)^s \\times 1,m \\times 2^{p-127}\\). Pour une repr\u00e9sentation sur 32 bits (en simple pr\u00e9cision), - le bit de poids fort (\u00e0 gauche) donne le signe 0 pour positif et 1 pour n\u00e9gatif - Les 8 bits suivants pour exposant, on repr\u00e9sente l\u2019entier relatif \\(p\\) par \\(p-127\\) - les 23 bits suivant pour partie apr\u00e8s la virgule de la mantisse</p> <p></p> <p> Trouver la repr\u00e9sentation en binaire sur 32 bits de \\(1011, 0111 101\\)</p> R\u00e9ponse <p>$ $</p> <p> Trouver la repr\u00e9sentation en binaire sur 32 bits de \\(0, 0000001101\\)</p> R\u00e9ponse <p>$ $</p> <p> Trouver la repr\u00e9sentation en binaire sur 32 bits de \\(110100011010010011110000011100000\\)</p> R\u00e9ponse <p>$ $</p> <p> Trouver la repr\u00e9sentation en binaire sur 32 bits de \\(00100001111010011100101011000000\\)</p> R\u00e9ponse <p>$ $</p> <p>Convention</p> <p>Par convention : \u2013 Il y a deux z\u00e9ro, un positif et un n\u00e9gatif : \\(\\pm 00000000 00000000000000000000000\\) \u2013 L\u2019infini : \\(\\pm 11111111 00000000000000000000000\\) \u2013 NaN : not a number : \\(\\pm 11111111 01000000000000000000000\\)</p>"},{"location":"T2_Type_de_base/2.3_Decimaux/cours/#3-comment-faire-des-tests-degalite-sur-les-flottants","title":"3. Comment faire des tests d'egalit\u00e9 sur les flottants ?","text":"<p>Premi\u00e8re r\u00e9ponse : ON N'EN FAIT PAS.</p> <p>Si <code>a</code> et <code>b</code> sont deux flottants, le test classique</p> \ud83d\udc0d Script Python<pre><code>if a == b :\n    print(\"a et b sont \u00e9gaux\")\n</code></pre> <p>a de grandes chances d'\u00e9chouer :</p> <p>Le script </p> \ud83d\udc0d Script Python<pre><code>a = 0.1\nb = 0.3 - 0.2\nif a == b :\n    print(\"a et b sont \u00e9gaux\")\nelse :\n    print(\"a et b sont diff\u00e9rents\")\n</code></pre> <p>renverra</p> \ud83d\udccb Texte<pre><code>a et b sont diff\u00e9rents\n</code></pre> <p>Si vraiment un test d'\u00e9galit\u00e9 est n\u00e9cessaire, on ne va pas tester l'\u00e9galit\u00e9 entre <code>a</code> et <code>b</code> mais leur proximit\u00e9, gr\u00e2ce \u00e0 la valeur absolue de leur diff\u00e9rence.</p> <p>La fonction <code>abs(a-b)</code> renvoie un nombre positif \u00e9gal \u00e0 la distance entre <code>a</code> et <code>b</code>. Il faut alors d\u00e9cider d'un \u00e9cart minimal <code>e</code> en dessous duquel on consid\u00e8rera que <code>a</code> et <code>b</code> sont \u00e9gaux.</p> <p>Le script </p> \ud83d\udc0d Script Python<pre><code>a = 0.1\nb = 0.3-0.2\ne = 10**(-12)\nif abs(a-b) &lt; e :\n    print(\"a et b sont \u00e9gaux\")\nelse :\n    print(\"a et b sont diff\u00e9rents\")\n</code></pre> <p>renverra \ud83d\udccb Texte<pre><code>a et b sont \u00e9gaux\n</code></pre></p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/Entrainement/","title":"Entrainement","text":"<p>Cr\u00e9dit</p> <p>@cr\u00e9dit : Thomas Foirien et St\u00e9phan Van Zuijlen  </p> <p>T\u00e9l\u00e9chargement</p> <p>Vous pouvez t\u00e9l\u00e9charger le notebook ici</p> <p>Exercice 1</p> Enonc\u00e9Correction <p>Ecrire un programme qui affiche la premi\u00e8re lettre d'un mot saisi par l'utilisateur.</p> \ud83d\udc0d Script Python<pre><code>mot = input(\"Veuillez saisir un mot : \")\nprint(mot[0])\n</code></pre> <p>Exercice 2</p> Enonc\u00e9Correction <p>Ecrire un programme qui affiche la derni\u00e8re lettre d'un mot saisi par l'utilisateur.</p> <p>\ud83d\udc0d Script Python<pre><code>mot = input(\"Veuillez saisir un mot : \")\nprint(mot[len(mot)-1])\n</code></pre> \ud83d\udc0d Script Python<pre><code>mot = input(\"Veuillez saisir un mot : \")\nprint(mot[-1])\n</code></pre></p> <p>Exercice 3</p> Enonc\u00e9Correction <p>Ecrire une fonction <code>estPresent(lettre,message)</code> qui renvoie <code>True</code> ou <code>False</code> selon que la lettre est pr\u00e9sente ou non dans le message.</p> \ud83d\udc0d Script Python<pre><code>assert(estPresent('a','abracadabra') == True)\nassert(estPresent('r','abracadabra') == True)\nassert(estPr\u00e9eent('R','abracadabra') == False)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def estPresent(lettre, message) :\n    return lettre in message\n</code></pre> \ud83d\udc0d Script Python<pre><code>def estPresent(lettre, message) :\n    for c in message :\n        if lettre == c :\n            return True\n    return False\n</code></pre> <p>Exercice 4</p> Enonc\u00e9Correction <p>Ecrire une fonction <code>nbOccurences(lettre,message)</code> qui renvoie le nombre d'occurences d'une lettre (ou d'un caract\u00e8re) dans un message.</p> <p>\ud83d\udc0d Script Python<pre><code>def nbOccurences(lettre,message):\n    pass\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert(nbOccurences('a','abracadabra') == 5)\nassert(nbOccurences('A','abracadabra') == 0)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nbOccurences(lettre,message):\n    compteur = 0\n    for i in range(len(message)) :\n        if lettre == message[i] :\n            compteur += 1\n    return compteur\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nbOccurences(lettre,message):\n    compteur = 0\n    for c in message :\n        if lettre == c :\n            compteur += 1\n    return compteur\n</code></pre> <p>Exercice 5</p> Enonc\u00e9Correction <p>Mot invers\u00e9  Ecrire une fonction <code>inverse(mot)</code> qui prend en param\u00e8tre un mot, et qui retourne ce mot \u00e0 l'envers (de la droite vers la gauche).</p> \ud83d\udc0d Script Python<pre><code>assert inverse(\"redon\") == \"noder\"\nassert inverse(\"NSI\") == \"ISN\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>def inverse(mot) :\n    motinverse = \"\"\n    for i in range(len(mot)):\n        motinverse += (mot[len(mot)-i-1])\n    return motinverse\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>def inverse(mot) :\n    motinverse = \"\"\n    for i in range(len(mot)-1,-1,-1):\n        motinverse += mot[i]\n    return motinverse\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert inverse(\"redon\") == \"noder\"\nassert inverse(\"NSI\") == \"ISN\"\n</code></pre></p> <p>Exercice 6</p> Enonc\u00e9Correction <p>Suppression des voyelles Ecrire un programme qui demande \u00e0 l'utilisateur de saisir un mot ou un message en lettres majuscules, et qui affiche ce message en supprimant toutes les voyelles.</p> \ud83d\udc0d Script Python<pre><code>message = input(\"Veuillez saisir un texte en majuscules : \")\n# ...\n</code></pre> \ud83d\udc0d Script Python<pre><code>message = input(\"Veuillez saisir un texte en majuscules : \")\nnouveauMessage = \"\"\nfor c in message:   # on utilise ici la syntaxe raccourcie : c prend comme valeur les caract\u00e8res successifs de la cha\u00eene\n    if c!='A' and c!='E' and c!='I'and c!='O' and c!='U' and c!='Y':\n        nouveauMessage = nouveauMessage + c\nprint(nouveauMessage)\n</code></pre> <p>Exercice 7</p> Enonc\u00e9Correction <p>Plus longue r\u00e9p\u00e9tition Ecrire une fonction <code>plusLongueRepetition(message)</code> qui renvoie le plus grand nombre de caract\u00e8res cons\u00e9cutifs identiques dans le message.</p> \ud83d\udc0d Script Python<pre><code>def plusLongueRepetition(message):\n    pass\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert(plusLongueRepetition('lycanthropiques') == 1)\nassert(plusLongueRepetition('arrosoir') == 2)\nassert(plusLongueRepetition('AAaaaaAaaaA') == 4)\nassert(plusLongueRepetition('aaa') == 3)\nassert(plusLongueRepetition('a') == 1)\nassert(plusLongueRepetition('') == 0)\n</code></pre> \ud83d\udccb Texte<pre><code>```python\ndef plusLongueRepetition(message):\n    if len(message) == 0:\n        return 0\n    maximum = 0\n    compteur = 1\n    for i in range(len(message)-1):\n        if message[i] == message[i+1]:\n            compteur = compteur + 1\n        else:\n            if compteur &gt; maximum:\n                maximum = compteur\n            compteur = 1\n    if compteur &gt; maximum: # pour le cas o\u00f9 la plus longue suite se trouve \u00e0 la fin du message\n        maximum = compteur\n    return maximum\n\n```\n\n```python\nassert(plusLongueRepetition('lycanthropiques') == 1)\nassert(plusLongueRepetition('arrosoir') == 2)\nassert(plusLongueRepetition('AAaaaaAaaaA') == 4)\nassert(plusLongueRepetition('aaa') == 3)\nassert(plusLongueRepetition('a') == 1)\nassert(plusLongueRepetition('') == 0)\n```\n</code></pre> <p>Exercice 8</p> Enonc\u00e9Correction <p>Distance entre deux mots La distance de Hamming entre deux mots de m\u00eame longueur est le nombre d'endroit o\u00f9 les lettres sont diff\u00e9rentes. Par exemple : JAPON - SAVON La premi\u00e8re lettre de JAPON est diff\u00e9rente de la premi\u00e8re lettre de SAVON, les troisi\u00e8mes aussi sont diff\u00e9rentes.  La distance de Hamming entre JAPON et SAVON vaut donc 2. Ecrire une fonction <code>distHamming(mot1, mot2)</code> qui calcule la distance de Hamming entre deux mots pass\u00e9s en param\u00e8tre.</p> <p>Aide : - Pour conna\u00eetre la longueur d\u2019une cha\u00eene de caract\u00e8re: <code>len(machaine)</code> - Pour tester la non \u00e9galit\u00e9 de deux \u00e9l\u00e9ments: <code>if el1!=ele2</code> - On utilisera un compteur - On testera l\u2019\u00e9galit\u00e9 des longueurs des mots - On mettra les mots en majuscule dans une autre variable: <code>m = mot.upper()</code> - Pour boucler sur les lettres d\u2019un mot: par exemple pour les afficher</p> <p>\ud83d\udc0d Script Python<pre><code>for i in range(len(mot)):\n    print(mot[i])\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert distHamming(\"JAPON\", \"SAVON\") == 2\nassert distHamming(\"NON\",\"OUI\") == 3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def distHamming(mot1, mot2) : \n    compteur = 0\n    for i in range(len(mot1)) :\n        if mot1[i] != mot2[i] :\n            compteur += 1\n    return compteur            \n</code></pre> <p>Exercice 9</p> Enonc\u00e9Correction <p>Le latin cochon On transforme un mot commen\u00e7ant par une consonne selon la recette suivante: - On d\u00e9place la premi\u00e8re lettre \u00e0 la fin du mot - On rajoute le suffixe UM  Par exemple: VITRE devient ITREVUM Ecrire une fonction <code>latin(message)</code> qui transforme un mot en latin cochon.</p> \ud83d\udc0d Script Python<pre><code>assert latin(\"VITRE\")==\"ITREVUM\"\nassert latin(\"REDON\")==\"EDONRUM\"\nassert not latin(\"PARIS\")==\"PARISUM\"\n</code></pre> <p>Aide :  - Une cha\u00eene de caract\u00e8re est non modifiable, il faut donc en cr\u00e9er une autre  - On mettra le mot en majuscule: <code>m=mot.upper()</code>  - L\u2019addition de caract\u00e8res se nomme concat\u00e9nation <code>\"A\"+\"B\"=\"AB\"</code>  - On d\u00e9finit une cha\u00eene de caract\u00e8re vide avec: <code>chaine=\"\"</code></p> \ud83d\udc0d Script Python<pre><code>def latin(mot) :\n    return mot[1:]+ mot[0]+\"UM\"\n</code></pre> <p>Exercice 10</p> Enonc\u00e9correctionCode \u00e9l\u00e9gant <p>Test de conformit\u00e9 d'une cha\u00eene Les codes postaux am\u00e9ricains (ZIP codes) doivent imp\u00e9rativement suivre le format suivant : 99999-9999 (cinq chiffres suivis d'un tiret suivi de quatre chiffres). Les services de l'US Postal ont un sens de l'humour assez limit\u00e9, et quiconque ne respectera pas rigoureusement le format verra sa lettre redirig\u00e9e vers le service de tri \u00e0 la main, et en ressortir apr\u00e8s une dur\u00e9e difficile \u00e0 pr\u00e9dire. Ecrire une fonction <code>ZIPCodeOK</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, et qui renvoie la valeur bool\u00e9enne <code>True</code> ou <code>False</code> selon que la cha\u00eene est un code postal valide ou non. Tester votre fonction avec trois cas de figure diff\u00e9rents.</p> \ud83d\udc0d Script Python<pre><code>def estChiffre(c) :\n    chiffre = \"0123456789\"\n    return c in chiffre\n\ndef ZIPCodeOK(code) :\n    estZip = False\n    #Premi\u00e8re condition : la longueur est de 10\n    #Si ce n'est pas le cas, inutile de continuer d'ou le return a ce moment la du programme\n    if len(code) == 10 :\n        estZip = True\n    else : \n        return False\n    #deuxi\u00e8me condition : on a des chiffres en position 0 \u00e0 4\n    for i in range(0, 5) :\n        if estChiffre(code[i]) : \n            estZip = True\n        else : \n            estZip = False\n    #troisi\u00e8me condition le 6\u00e8me caract\u00e8re (\u00e0 l'indice 5) est un tiret   \n    # on recherche le tiret et on r\u00e9cup\u00e8re son indice grace \u00e0 la fonction find()\n    if code.find('-') == 5 :\n        estZip = True\n    else : \n        return False\n    #derni\u00e8re condition : on a des chiffres en position 6 \u00e0 9\n    for i in range(6, 9) :\n        if estChiffre(code[i]) : \n            estZip = True\n        else : \n            estZip = False\n    return estZip\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert ZIPCodeOK(\"99999-9999\") \nassert not ZIPCodeOK(\"4444-55555\")\nassert not ZIPCodeOK(\"1111-22-333\")\nassert ZIPCodeOk(\"17581-1681\")\n</code></pre> <p>Remarque : Ce genre de probl\u00e8me peut \u00eatre trait\u00e9 de fa\u00e7on tr\u00e8s concise et efficace \u00e0 l'aide des \"expressions r\u00e9guli\u00e8res\" (regular expressions en anglais, abr\u00e9g\u00e9es en regexpr ou regex ou re), comme le montre le code ci-dessous.         Dans cet exercice, vous ne pouvez utiliser que les notions vues en classe (boucles, conditions...).</p> \ud83d\udccb Texte<pre><code>    ```python\n    import re\n\n    def ZIPCodeOk(chaine):\n        return re.compile(\"\\d{5}-\\d{4}\").fullmatch(chaine) is not None\n\n    print(ZIPCodeOk(\"17581-1681\"))\n    ```\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/TP_chaines/","title":"TP chaines","text":"TP d'entra\u00eenement/r\u00e9vision <p> 1\u00e8re Sp\u00e9cialit\u00e9 NSI</p> <p> Les cha\u00eenes de caract\u00e8res</p> <p></p> <p>@cr\u00e9dit : Thomas Foirien et St\u00e9phan Van Zuijlen</p> Exercice 1 :       Ecrire un programme qui affiche la premi\u00e8re lettre d'un mot saisi par l'utilisateur.      In\u00a0[\u00a0]: Copied! Exercice 2 :       Ecrire un programme qui affiche la derni\u00e8re lettre d'un mot saisi par l'utilisateur.      In\u00a0[\u00a0]: Copied! Exercice 3 :       Ecrire une fonction <code>estPr\u00e9sent(lettre,message)</code> qui renvoie <code>True</code> ou <code>False</code> selon que la lettre est pr\u00e9sente ou non dans le message.  In\u00a0[26]: Copied! In\u00a0[27]: Copied! <pre>assert(estPr\u00e9sent('a','abracadabra') == True)\nassert(estPr\u00e9sent('r','abracadabra') == True)\nassert(estPr\u00e9sent('R','abracadabra') == False)\n</pre> assert(estPr\u00e9sent('a','abracadabra') == True) assert(estPr\u00e9sent('r','abracadabra') == True) assert(estPr\u00e9sent('R','abracadabra') == False) Exercice 4 :       Ecrire une fonction <code>nbOccurences(lettre,message)</code> qui renvoie le nombre d'occurences d'une lettre (ou d'un caract\u00e8re) dans un message.  In\u00a0[29]: Copied! <pre>def nbOccurences(lettre,message):\n    pass\n</pre> def nbOccurences(lettre,message):     pass In\u00a0[33]: Copied! <pre>#autre solution d'\u00e9criture pour la boucle\ndef nbOccurences(lettre,message):\n    pass\n</pre> #autre solution d'\u00e9criture pour la boucle def nbOccurences(lettre,message):     pass In\u00a0[34]: Copied! <pre>assert(nbOccurences('a','abracadabra') == 5)\nassert(nbOccurences('A','abracadabra') == 0)\n</pre> assert(nbOccurences('a','abracadabra') == 5) assert(nbOccurences('A','abracadabra') == 0) Exercice 5 :  Mot invers\u00e9      Ecrire une fonction <code>inverse(mot)</code> qui prend en param\u00e8tre un mot, et qui retourne ce mot \u00e0 l'envers (de la droite vers la gauche).     In\u00a0[8]: Copied! <pre>#votre fonction ici\n</pre> #votre fonction ici In\u00a0[9]: Copied! <pre>assert inverse(\"redon\") == \"noder\"\nassert inverse(\"NSI\") == \"ISN\"\n</pre> assert inverse(\"redon\") == \"noder\" assert inverse(\"NSI\") == \"ISN\" Exercice 6 :  Suppression des voyelles     Ecrire un programme qui demande \u00e0 l'utilisateur de saisir un mot ou un message en lettres majuscules, et qui affiche ce message en supprimant toutes les voyelles.  In\u00a0[\u00a0]: Copied! <pre>message = input(\"Veuillez saisir un texte en majuscules : \")\n# ...\n</pre> message = input(\"Veuillez saisir un texte en majuscules : \") # ... Exercice 7 :  Plus longue r\u00e9p\u00e9tition     Ecrire une fonction <code>plusLongueR\u00e9p\u00e9tition(message)</code> qui renvoie le plus grand nombre de caract\u00e8res cons\u00e9cutifs identiques dans le message.  In\u00a0[12]: Copied! <pre>def plusLongueR\u00e9p\u00e9tition(message):\n    pass\n</pre> def plusLongueR\u00e9p\u00e9tition(message):     pass In\u00a0[13]: Copied! <pre>assert(plusLongueR\u00e9p\u00e9tition('lycanthropiques') == 1)\nassert(plusLongueR\u00e9p\u00e9tition('arrosoir') == 2)\nassert(plusLongueR\u00e9p\u00e9tition('AAaaaaAaaaA') == 4)\nassert(plusLongueR\u00e9p\u00e9tition('aaa') == 3)\nassert(plusLongueR\u00e9p\u00e9tition('a') == 1)\nassert(plusLongueR\u00e9p\u00e9tition('') == 0)\n</pre> assert(plusLongueR\u00e9p\u00e9tition('lycanthropiques') == 1) assert(plusLongueR\u00e9p\u00e9tition('arrosoir') == 2) assert(plusLongueR\u00e9p\u00e9tition('AAaaaaAaaaA') == 4) assert(plusLongueR\u00e9p\u00e9tition('aaa') == 3) assert(plusLongueR\u00e9p\u00e9tition('a') == 1) assert(plusLongueR\u00e9p\u00e9tition('') == 0) Exercice 8 :  Distance entre deux mots     La distance de Hamming entre deux mots de m\u00eame longueur est le nombre d'endroit o\u00f9 les lettres sont diff\u00e9rentes.     Par exemple : JAPON - SAVON     La premi\u00e8re lettre de JAPON est diff\u00e9rente de la premi\u00e8re lettre de SAVON, les troisi\u00e8mes aussi sont diff\u00e9rentes.      La distance de Hamming entre JAPON et SAVON vaut donc 2.     Ecrire une fonction <code>distHamming(mot1, mot2)</code> qui calcule la distance de Hamming entre deux mots pass\u00e9s en param\u00e8tre.  <p>Aide :</p> <ul> <li>Pour conna\u00eetre la longueur d\u2019une cha\u00eene de caract\u00e8re: <code>len(machaine)</code></li> <li>Pour tester la non \u00e9galit\u00e9 de deux \u00e9l\u00e9ments: <code>if el1!=ele2</code></li> <li>On utilisera un compteur</li> <li>On testera l\u2019\u00e9galit\u00e9 des longueurs des mots</li> <li>On mettra les mots en majuscule dans une autre variable: <code>m = mot.upper()</code></li> <li>Pour boucler sur les lettres d\u2019un mot: par exemple pour les afficher</li> </ul> <pre><code>for i in range(len(mot)):\n    print(mot[i])\n    ```\n</code></pre> In\u00a0[15]: Copied! <pre>#votre fonction ici\n</pre> #votre fonction ici In\u00a0[17]: Copied! <pre>assert distHamming(\"JAPON\", \"SAVON\") == 2\nassert distHamming(\"NON\",\"OUI\") == 3\n</pre> assert distHamming(\"JAPON\", \"SAVON\") == 2 assert distHamming(\"NON\",\"OUI\") == 3 Exercice 9 :  Le latin cochon     On transforme un mot commen\u00e7ant par une consonne selon la recette suivante: - On d\u00e9place la premi\u00e8re lettre \u00e0 la fin du mot - On rajoute le suffixe UM  Par exemple: VITRE devient ITREVUM     Ecrire une fonction <code>latin(message)</code> qui transforme un mot en latin cochon.  In\u00a0[18]: Copied! <pre>#votre fonction ici\n</pre> #votre fonction ici In\u00a0[\u00a0]: Copied! <pre>assert latin(\"VITRE\")==\"ITREVUM\"\nassert latin(\"REDON\")==\"EDONRUM\"\nassert not latin(\"PARIS\")==\"PARISUM\"\n</pre> assert latin(\"VITRE\")==\"ITREVUM\" assert latin(\"REDON\")==\"EDONRUM\" assert not latin(\"PARIS\")==\"PARISUM\" <p>Aide :</p> <ul> <li>Une cha\u00eene de caract\u00e8re est non modifiable, il faut donc en cr\u00e9er une autre</li> <li>On mettra le mot en majuscule: <code>m=mot.upper()</code></li> <li>L\u2019addition de caract\u00e8res se nomme concat\u00e9nation <code>\"A\"+\"B\"=\"AB\"</code></li> <li>On d\u00e9finit une cha\u00eene de caract\u00e8re vide avec: <code>chaine=\"\"</code></li> </ul> Exercice 10 :  Test de conformit\u00e9 d'une cha\u00eene Les codes postaux am\u00e9ricains (ZIP codes) doivent imp\u00e9rativement suivre le format suivant : 99999-9999     (cinq chiffres suivis d'un tiret suivi de quatre chiffres).       Les services de l'US Postal ont un sens de l'humour assez limit\u00e9, et quiconque ne respectera pas rigoureusement le format verra sa lettre redirig\u00e9e vers le service de tri \u00e0 la main, et en ressortir apr\u00e8s une dur\u00e9e difficile \u00e0 pr\u00e9dire. Ecrire une fonction <code>ZIPCodeOK</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, et qui renvoie la valeur bool\u00e9enne <code>True</code> ou <code>False</code> selon que la cha\u00eene est un code postal valide ou non.     Tester votre fonction avec trois cas de figure diff\u00e9rents.  In\u00a0[1]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Remarque : Ce genre de probl\u00e8me peut \u00eatre trait\u00e9 de fa\u00e7on tr\u00e8s concise et efficace \u00e0 l'aide des \"expressions r\u00e9guli\u00e8res\" (regular expressions en anglais, abr\u00e9g\u00e9es en regexpr ou regex ou re), comme le montre le code ci-dessous. Dans cet exercice, vous ne pouvez utiliser que les notions vues en classe (boucles, conditions...).</p> In\u00a0[\u00a0]: Copied! <pre>import re\n\ndef ZIPCodeOk(chaine):\n    return re.compile(\"\\d{5}-\\d{4}\").fullmatch(chaine) is not None\n    \nprint(ZIPCodeOk(\"17581-1681\"))\n</pre> import re  def ZIPCodeOk(chaine):     return re.compile(\"\\d{5}-\\d{4}\").fullmatch(chaine) is not None      print(ZIPCodeOk(\"17581-1681\"))"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/","title":"Les chaines de caracteres","text":"<p>cr\u00e9dit</p> <p>cr\u00e9dit du notebook : Olivier Lecluse</p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#quest-ce-quune-chaine","title":"Qu'est-ce qu'une cha\u00eene.","text":"<p>A retenir</p> <p>Une cha\u00eene de caract\u00e8res est une liste particuli\u00e8re ne contenant que des caract\u00e8res. Elle est d\u00e9limit\u00e9e par des guillemets (simples 'machaine' ou doubles \"machaine\").</p> <p>Comme pour une liste, on peut acc\u00e9der \u00e0 ses \u00e9l\u00e9ments (les caract\u00e8res) en sp\u00e9cifiant un indice :</p> \ud83d\udc0d Script Python<pre><code>chaine = \"Lyc\u00e9e Saint Sauveur\"\nchaine[0]\n</code></pre> <p>Important</p> <p>Par contre, il est impossible de modifier une cha\u00eene de caract\u00e8res !  On dit alors qu'il s'agit d'une liste non mutable :</p> \ud83d\udc0d Script Python<pre><code>chaine[1]= \"a\"\n</code></pre> <p>Si vous d\u00e9cidiez de lui ajouter des caract\u00e8res en fin de cha\u00eene \u00e0 l'aide d'une concat\u00e9nation du type suivant :</p> \ud83d\udc0d Script Python<pre><code>chaine = chaine+\" - Redon\"\nchaine\n</code></pre> <p>Remarque : Contrairement aux apparences, la chaine n'a pas \u00e9t\u00e9 modifi\u00e9e puisque les chaines sont non mutables, une nouvelle chaine a \u00e9t\u00e9 cr\u00e9e par concat\u00e9nation des deux chaines plac\u00e9es autour du signe +</p> <p>Il existe de nombreuses m\u00e9thodes agissant sur les cha\u00eenes de carat\u00e8res. Pour les voir, vous pouvez utiliser la fonction d'autocompletion de VSCode en tapant <code>chaine. </code> puis en pressant la touche TAB. N'oubliez pas le . !</p> <p>Vous devriez voir la liste des m\u00e9thodes disponibles dans le terminal:</p> . . . . x.capitalize x.isalnum x.join x.rsplit x.casefold x.isalpha x.ljust x.rstrip x.center x.isdecimal x.lower x.split x.count x.isdigit x.lstrip x.splitlines x.encode x.isidentifier x.maketrans x.startswith x.endswith x.islower x.partition x.strip x.expandtabs x.isnumeric x.replace x.swapcase x.find x.isprintable x.rfind x.title x.format x.isspace x.rindex x.translate x.format_map x.istitle x.rjust x.upper x.index x.isupper x.rpartition x.zfill <p>Inutile de toutes les conna\u00eetre. Nous allons voir ici les fonctions les plus utiles.</p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#couper-et-joindre","title":"Couper et joindre","text":"<p>La fonction split() permet de d\u00e9couper la cha\u00eene de caract\u00e8res qui lui est pass\u00e9e en param\u00e8tre suivant un ou des caract\u00e8re(s) de s\u00e9paration et renvoie une liste des cha\u00eenes d\u00e9coup\u00e9es. Les caract\u00e8res de s\u00e9paration lui sont \u00e9galement pass\u00e9s en param\u00e8tre et, si ce n'est pas le cas, ce sera le caract\u00e8re espace qui sera utilis\u00e9 :</p> \ud83d\udc0d Script Python<pre><code>chaine=\"Lyc\u00e9e Saint Sauveur - Redon\"\nchaine.split()\n</code></pre> \ud83d\udc0d Script Python<pre><code>chaine.split('-')\n</code></pre> <p>L'op\u00e9ration inverse s'appelle join(). Elle consiste a rendre une liste de cha\u00eenes de caract\u00e8res pour former une cha\u00eene en concat\u00e9nant tous les \u00e9l\u00e9ments et en les assemblant \u00e0 l'aide d'un caract\u00e8re.</p> <p>Cette m\u00e9thode prend en param\u00e8tre une liste de caract\u00e8res et s'applique \u00e0 une cha\u00eene de caract\u00e8res d\u00e9signant le ou les caract\u00e8re(s) de liaison :</p> \ud83d\udc0d Script Python<pre><code>liste = ['Lyc\u00e9e Saint Sauveur', 'Redon']\n' - '.join(liste)\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#majuscule-et-minuscule","title":"Majuscule et minuscule","text":"<p>Deux autres m\u00e9thodes standards peuvent \u00eatre utiles:</p> <p>lower() et upper() permettant respectivement de convertir les caract\u00e8res d'une cha\u00eene en minuscules ou en majuscules. Attention, bien que parlant de conversion, ces m\u00e9thodes ne modifient pas la cha\u00eene de d\u00e9part mais renvoient une nouvelle cha\u00eene :</p> \ud83d\udc0d Script Python<pre><code>chaine.upper()\n</code></pre> \ud83d\udc0d Script Python<pre><code>chaine.lower()\n</code></pre> <p>La fonction capitalize() permet de ne mettre en majuscule que la premi\u00e8re lettre d'une cha\u00eene :</p> \ud83d\udc0d Script Python<pre><code>chaine.capitalize()\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#rechercher-un-caractere-une-position-etc-dans-une-chaine","title":"rechercher un caract\u00e8re, une position etc... dans une cha\u00eene.","text":"<ul> <li>La fonction len() permet, comme pour les listes, de conna\u00eentre la longueur de la cha\u00eene, c'est \u00e0 dire compter le nombre de caract\u00e8res.</li> </ul> \ud83d\udc0d Script Python<pre><code>chaine = \"Lyc\u00e9e Saint Sauveur\"\nlen(chaine)\n</code></pre> <ul> <li>La m\u00e9thode count() permet de compter le nombre d'occurrences d'une sous cha\u00eene dans une cha\u00eene de caract\u00e8res.  Le premier param\u00e8tre est la cha\u00eene dans laquelle effectuer la recherche et le second param\u00e8tre est la sous cha\u00eene :</li> </ul> \ud83d\udc0d Script Python<pre><code>chaine.count('a')\n</code></pre> <ul> <li>La m\u00e9thode find() permet de trouver l'indice de la premi\u00e8re occurrence d'une sous cha\u00eene. Les param\u00e8tres sont les m\u00eames que pour la fonction count() En cas d'\u00e9chec, find() renvoie la valeur -1 ( 0 correspond \u00e0 l'indice du premier caract\u00e8re): On utilisera rfind() pour la derni\u00e8re ocurrence.</li> </ul> \ud83d\udc0d Script Python<pre><code>chaine.find('a')\n</code></pre> \ud83d\udc0d Script Python<pre><code>chaine.find('b')\n</code></pre> \ud83d\udc0d Script Python<pre><code>chaine.rfind('a')\n</code></pre> <ul> <li>index() est identique \u00e0 find() mais retourne une erreur en cas d'\u00e9chec</li> </ul> \ud83d\udc0d Script Python<pre><code>chaine.index('a')\n</code></pre> \ud83d\udc0d Script Python<pre><code>chaine.index('b')\n</code></pre> <ul> <li>La fonction replace() permet, comme son nom l'indique, de remplacer une sous cha\u00eene par une autre \u00e0 l'int\u00e9rieur d'une cha\u00eene de caract\u00e8res. Les param\u00e8tres sont, dans l'ordre : la cha\u00eene de caract\u00e8res \u00e0 modifier, la sous cha\u00eene \u00e0 remplacer, la sous cha\u00eene de remplacement,et, \u00e9ventuellement, le nombre maximum d'occurrences \u00e0 remplacer (si non sp\u00e9cifi\u00e9, toutes les occurrences seront remplac\u00e9es).</li> </ul> \ud83d\udc0d Script Python<pre><code>chaine.replace('a','@')\n</code></pre> <p>et bien s\u00fbr, la variable chaine n'est pas modifi\u00e9e, c'est une nouvelle chaine qui est renvoy\u00e9e par cette m\u00e9thode !</p> \ud83d\udc0d Script Python<pre><code>chaine\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#conversion-chaine-nombres","title":"Conversion cha\u00eene &lt;-&gt; nombres","text":"<p>Il ne faut pas confondre les objets 12 et \"12\". Le premier d\u00e9signe un nombre, le second est une cha\u00eene de caract\u00e8re. Les comportements et les op\u00e9rations sont diff\u00e9rents.</p> \ud83d\udc0d Script Python<pre><code>12 == \"12\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>12+1\n</code></pre> \ud83d\udc0d Script Python<pre><code>\"12\"+\"1\"\n</code></pre> <p>Il peut \u00eatre n\u00e9anmoins possible de convertir un nombre en cha\u00eene et r\u00e9ciproquement comme on va le voir sur les exemples ci-dessous</p> \ud83d\udc0d Script Python<pre><code>int(\"12\")\n</code></pre> \ud83d\udc0d Script Python<pre><code>str(12)\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#comparaison-de-chaines-de-caracteres","title":"Comparaison de cha\u00eenes de caract\u00e8res","text":"<p>De m\u00eame qu'il est possible de comparer deux nombres, on peut aussi comparer des chaines par rapport \u00e0 l'ordre lexicographique :</p> \ud83d\udc0d Script Python<pre><code>\"a\"&lt;\"b\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>\"a\"&lt;=\"r\"&lt;=\"z\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>\"a\"&lt;=\"R\"&lt;=\"z\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>\"toto\"&lt;\"titi\"\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#tranches-de-chaines","title":"Tranches de cha\u00eenes","text":"<p>Le tranchage (slicing) fonctionne exactement comme pour les listes. Observez les exemples suivants.</p> \ud83d\udc0d Script Python<pre><code>chaine = \"Lyc\u00e9e Saint Sauveur\"\n# obtenir la fin d'une cha\u00eene\nchaine[6:]\n</code></pre> \ud83d\udc0d Script Python<pre><code># obtenir le d\u00e9but d'une cha\u00eene\nchaine[:5]\n</code></pre> \ud83d\udc0d Script Python<pre><code># Un intervalle\nchaine[6:14]\n</code></pre> <p>Et avec des index n\u00e9gatifs ...</p> \ud83d\udc0d Script Python<pre><code>chaine[-1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>chaine[:-1]\n</code></pre> \ud83d\udc0d Script Python<pre><code># ce dernier exemple est tr\u00e8s pratique pour renverser un it\u00e9rable\nchaine[::-1]\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/chaine/#parcourir-une-chaine-de-caracteres","title":"Parcourir une cha\u00eene de caract\u00e8res","text":"<p>Une cha\u00eene de raract\u00e8re en Python rentre dans la cat\u00e9gorie des it\u00e9rables au m\u00eame titre que les listes. On retrouve donc les deux modes de parcours d\u00e9j\u00e0 rencontr\u00e9s sur les listes, \u00e0 savoir :</p> \ud83d\udc0d Script Python<pre><code># Le parcours caract\u00e8res par caract\u00e8res :\nchaine = \"NSI\"\nfor c in chaine:\n    print(c)\n</code></pre> \ud83d\udc0d Script Python<pre><code># Le parcours par indice\nchaine = \"NSI\"\nfor i in range(len(chaine)):\n    print(chaine[i])\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/cours/","title":"2.6 Codage des caract\u00e8res","text":"<p>Tout pour comprendre et \u00c3\u00a9viter les erreurs d'encodage</p> <p></p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/cours/#1-au-commencement-etait-lascii","title":"1. Au commencement \u00e9tait l'ASCII","text":"<p>pour American Standard Code for Information Interchange, cr\u00e9\u00e9 en 1960 aux \u00c9tats-Unis. </p> <p>En ASCII, 127 \u00abpoints de code\u00bb (nombres associ\u00e9s aux caract\u00e8res) sont disponibles. Les caract\u00e8res sont donc cod\u00e9s sur 7 bits.</p> <p>Exercice</p> \u00c9nonc\u00e9AideCorrection <p>D\u00e9coder l'expression suivante, \u00e9crite en ASCII :</p> <p><code>1101100 1100101 1110011 100000 1001110 1010011 1001001 100000 1100011 100111 1100101 1110011 1110100 100000 1101100 1100101 1110011 100000 1101101 1100101 1101001 1101100 1101100 1100101 1110101 1110010 1110011</code></p> <ul> <li>la fonction <code>split(\" \")</code> permet de d\u00e9composer une chaine de caract\u00e8res en une liste, en se servant de l'espace <code>\" \"</code> comme caract\u00e8re s\u00e9parateur.</li> <li><code>int(\"1101100\",2)</code> permet de r\u00e9cup\u00e9rer facilement la valeur en base 10 du nombre binaire <code>1101100</code>.</li> </ul> \ud83d\udc0d Script Python<pre><code>msg = \"1101100 1100101 1110011 100000 1001110 1010011 1001001 100000 1100011 100111 1100101 1110011 1110100 100000 1101100 1100101 1110011 100000 1101101 1100101 1101001 1101100 1101100 1100101 1110101 1110010 1110011\"\nmsg = msg.split(' ')\ns = \"\"\nfor k in msg :\n    s += chr(int(k,2))\nprint(s)\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/cours/#2-et-le-reste-du-monde","title":"2. Et le reste du monde ?","text":"<p>Lorsque d'autres personnes que des americains ou des anglais ont voulu s'\u00e9changer des donn\u00e9es faisant intervenir du texte, certains caract\u00e8res (\u00e9, \u00e8, \u00e0, \u00f1, \u00d8, \u00d6, \u03b2, \u6f22...) \u00e9taient manquants. Les 127 caract\u00e8res de l'ASCII \u00e9taient largement insuffisants.  Il a donc \u00e9t\u00e9 d\u00e9cid\u00e9 de passer \u00e0... 256 caract\u00e8res ! Il suffisait pour cela de coder les caract\u00e8res non plus sur 7 bits mais sur 8 bits.</p> <p>Ainsi naqu\u00eet, apr\u00e8s de nombreuses modifications successives (la derni\u00e8re en date rajoutant par exemple le symbole \u20ac), la c\u00e9l\u00e8bre table ISO 8859-15, dite aussi Latin-9 : </p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/cours/#utilisation","title":"Utilisation :","text":"<p>Les codes sont donn\u00e9s en hexad\u00e9cimal :</p> <ul> <li>le caract\u00e8re \u20ac correspond au code hexad\u00e9cimal A4, donc au nombre d\u00e9cimal 164.</li> <li>le caract\u00e8re A correspond au code hexad\u00e9cimal 41, donc au nombre d\u00e9cimal 65.</li> </ul> <p>65... comme en ASCII ! Oui, la (seule) bonne id\u00e9e aura \u00e9t\u00e9 d'inclure les caract\u00e8res ASCII avec leur m\u00eame code, ce qui rendait cette nouvelle norme r\u00e9tro-compatible.</p> <p>Exemple : </p> <p>Le fichier <code>test.txt</code> contient un texte enregistr\u00e9 avec l'encodage Latin-9. Ce fichier est ensuite ouvert avec un \u00e9diteur hexad\u00e9cimal, qui permet d'observer la valeur des octets qui composent le fichier. (Comme le fichier est un .txt, le fichier ne contient que les donn\u00e9es et rien d'autre.) </p> <p>Parfait, mais comment font les Grecs pour \u00e9crire leur alphabet ? Pas de probl\u00e8me, il leur suffit d'utiliser... une autre table, appel\u00e9e ISO-8859-7 :</p> <p></p> <p>On retrouve les caract\u00e8res universels h\u00e9rit\u00e9s de l'ASCII, puis des caract\u00e8res sp\u00e9cifiques \u00e0 la langue grecque... oui mais les Tha\u00eflandais alors ? </p> <p>Pas de probl\u00e8me, ils ont la ISO-8859-11 :</p> <p></p> <p>\u00c9videmment, quand tous ces gens veulent discuter entre eux, les probl\u00e8mes d'encodage surviennent imm\u00e9diatement : certains caract\u00e8res sont remplac\u00e9s par d'autres.</p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/cours/#3-que-fait-un-logiciel-a-louverture-dun-fichier-texte","title":"3. Que fait un logiciel \u00e0 l'ouverture d'un fichier texte ?","text":"<p>Il essaie de deviner l'encodage utilis\u00e9... Parfois cela marche, parfois non. </p> <p>Normalement, pour un navigateur, une page web correctement cod\u00e9e doit contenir dans une balise <code>meta</code> le <code>charset</code> utilis\u00e9.  </p> <p>Mais parfois, il n'y a pas d'autre choix pour le logiciel d'essayer de deviner l'encodage qui semble \u00eatre utilis\u00e9.</p> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>Le mot repr\u00e9sent\u00e9 par les octets ci-dessous est-il encod\u00e9 en ASCII ou en Latin-9 ? </p> <p>C'est du Latin-9, et c'est le mot \"v\u00e9lo\"</p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/cours/#4-enfin-une-normalisation-larrivee-de-lutf","title":"4. Enfin une normalisation : l'arriv\u00e9e de l'UTF","text":"<p>En 1996, le Consortium Unicode d\u00e9cide de normaliser tout cela et de cr\u00e9er un syst\u00e8me unique qui contiendra l'int\u00e9gralit\u00e9 des caract\u00e8res dont les \u00eatres humains ont besoin pour communiquer entre eux.  </p> <p></p> <p>Ils cr\u00e9ent l'Universal character set Transformation Format : l'UTF.  Ou plut\u00f4t ils en cr\u00e9ent... plusieurs   :</p> <ul> <li>l'UTF-8 : les caract\u00e8res sont cod\u00e9s sur 1, 2, 3 ou 4 octets.</li> <li>l'UTF-16 : les caract\u00e8res sont cod\u00e9s sur 2 ou 4 octets.</li> <li>l'UTF-32 : les caract\u00e8res sont cod\u00e9s sur 4 octets.</li> </ul> <p>Pourquoi est-ce encore si compliqu\u00e9 ? En UTF-32, 32 bits sont disponibles, soit \\(2^{32}=4294967296\\) caract\u00e8res diff\u00e9rents encodables. </p> <p>C'est largement suffisant, mais c'est surtout tr\u00e8s tr\u00e8s lourd ! D'autres encodages plus l\u00e9gers, mais plus complexes, sont donc propos\u00e9s :</p> <p>Arr\u00eatons-nous sur l'UTF-8 : </p> <p>Le principe fondateur de l'UTF-8 est qu'il est adaptatif : les carac\u00e8res les plus fr\u00e9quents sont cod\u00e9s sur un octet, qui est la taille minimale (et qui donne le 8 de \"UTF-8\"). Les autres caract\u00e8res peuvent \u00eatre cod\u00e9s sur 2, 3 ou 4 octets au maximum.</p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/cours/#utilisation-grandissante-de-lencodage-utf-8","title":"Utilisation grandissante de l'encodage UTF-8","text":"<p>La majorit\u00e9 des sites internet utilisent maintenant l'UTF-8, tout comme les syst\u00e8mes d'exploitation r\u00e9cents. </p>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/exercices/","title":"Exercices","text":"<p>Exercice 1</p> Enonc\u00e9Correction <p>\u00c9crire une fonction nb_chiffres qui prend en param\u00e8tre une cha\u00eene de caract\u00e8re et qui renvoie le nombre de chiffres contenus dans la cha\u00eene</p> \ud83d\udc0d Script Python<pre><code>def nb_chiffres(chaine):\n    compteurb = 0\n    #Parcours de la chaine de caract\u00e8res\n        #Si je rencontre un chiffre\n        #ALors j'incr\u00e9mente mon compteur\n\n    return  compteur \n\nprint(nb_chiffres('rb'))\n</code></pre> \ud83d\udc0d Script Python<pre><code>chaine = \"Lyc\u00e9e Saint Sauveur - 35600 Redon\"\nassert nb_chiffres(chaine)==5\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nb_chiffres(chaine):\n    cpt =0\n    for i in range(len(chaine)):\n        if chaine[i] in \"0123456789\":\n            cpt += 1\n    return  cpt\n</code></pre> <p>Exercice 2</p> Enonc\u00e9Correction <p>\u00c9crire une fonction is_email qui prend en param\u00e8tre une cha\u00eene de caract\u00e8re et renvoie True si celle-ci est une adresse mail. On va simplifier en consid\u00e9rant qu'on a une adresse email si la cha\u00eene poss\u00e8de les 2 propri\u00e9t\u00e9s suivantes :  - Un seul caract\u00e8re @ - Un seul caract\u00e8re .(point) apr\u00e8s @.</p> \ud83d\udc0d Script Python<pre><code>def is_email(chaine):\n    # YOUR CODE HERE\n\n    return \n</code></pre> \ud83d\udc0d Script Python<pre><code>assert is_email(\"olivier.lecluse@monfai.com\")\nassert not is_email(\"olivier.lecluse_AT_monfai.com\")\nassert not is_email(\"olivier.lecluse@monfai\")\n</code></pre> \ud83d\udc0d Script Python<pre><code>def is_email(chaine):\n    if chaine.count('@') == 1 :\n        index = chaine.index('@')\n        if chaine[index:].count('.') == 1 :\n            return True\n</code></pre> <p>Exercice 3</p> Enonc\u00e9Correction <p>Un nombre est un palindrome s'il s'\u00e9crit de la m\u00eame mani\u00e8re de gauche \u00e0 droite ou de droite \u00e0 gauche. Exemple : 12521. Ecrire une fonction est_palindrome prenant en param\u00e8tre un nombre et renvoyant True ou False selon que c'est un palindrom ou non.</p> <p>\ud83d\udc0d Script Python<pre><code>def est_palindrome(n):\n    # YOUR CODE HERE\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert est_palindrome(12521)\nassert not est_palindrome(12520)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def est_palindrome(n):\n    chaine = str(n)\n    for i in range(len(chaine)//2):\n        if chaine[i] == chaine[len(chaine)-i-1] :\n            pal = True\n        else : \n            pal = False\n            break\n    return pal\n</code></pre> <p>Exercice 4</p> Enonc\u00e9Correction <p>Ecrire une fonction somme_chiffres prenant un entier en param\u00e8tre et renvoyant la somme des chiffres de ce nombre. somme_chiffres(125) renvoie 8 puisque 1+2+5=8</p> <p>\ud83d\udc0d Script Python<pre><code>def somme_chiffres(n):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert somme_chiffres(125)==8\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def somme_chiffres(n):\n    somme = 0\n    ch = str(n)\n    for i in range(len(ch)):\n        somme = somme + int(ch[i])\n    return somme\n</code></pre>"},{"location":"T2_Type_de_base/2.4_Chaines_caracteres/sommaire/","title":"Th\u00e8me 2 : Repr\u00e9sentation des donn\u00e9es - Type de base - Les cha\u00eenes de caract\u00e8res","text":"<ol> <li>Cours Encodage</li> <li>Cours Manipulation de chaines de caract\u00e8res</li> <li>Exercice</li> <li>Entrainement</li> </ol>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/","title":"Les op\u00e9rateurs bool\u00e9ens","text":""},{"location":"T2_Type_de_base/2.5_Booleens/cours/#1-reperes-historiques","title":"1. Rep\u00e8res historiques","text":"<p>En 1847, le  britannique  George BOOLE  inventa un formalisme permettant d'\u00e9crire des raisonnements logiques : l'alg\u00e8bre de Boole. La notion m\u00eame d'informatique n'existait pas \u00e0 l'\u00e9poque, m\u00eame si les calculs \u00e9taient d\u00e9j\u00e0 automatis\u00e9s (penser \u00e0 la Pascaline de 1642).</p> <p>Bien plus tard, en  1938, les travaux de l'am\u00e9ricain Claude  SHANNON  prouva  que des  circuits  \u00e9lectriques peuvent  r\u00e9soudre tous  les  probl\u00e8mes  que l'alg\u00e8bre  de  Boole peut  elle-m\u00eame r\u00e9soudre.  Pendant la deuxi\u00e8me guerre mondiale, les travaux  d'Alan  TURING  puis de John VON NEUMANN poseront d\u00e9finitivement les bases de l'informatique moderne.</p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#2-algebre-de-boole","title":"2. Alg\u00e8bre de Boole","text":"<p>L'alg\u00e8bre de Boole d\u00e9finit des op\u00e9rations dans un ensemble qui ne contient que deux \u00e9l\u00e9ments not\u00e9s 0 et 1, ou bien FAUX et VRAI ,ou encore False et True (en Python)</p> <p>Les op\u00e9rations fondamentales sont :</p> <ul> <li>la conjonction (\"ET\") </li> <li>la disjonction (\"OU\") </li> <li>la n\u00e9gation (\"NON\").</li> </ul> <p>Dans  toute la  suite,  <code>x</code> et  <code>y</code> d\u00e9signeront  des  Bool\u00e9ens (\u00e9l\u00e9ments  d'une alg\u00e8bre de Boole) quelconques, <code>F</code> d\u00e9signera FAUX et <code>V</code> d\u00e9signera VRAI.</p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#21-conjonction-and","title":"2.1 Conjonction (AND)","text":"<ul> <li>symbole usuel : &amp; (appel\u00e9 esperluette en fran\u00e7ais et ampersand en anglais)</li> <li>fran\u00e7ais : ET</li> <li>anglais (et Python) : <code>and</code></li> <li>notation logique : \\(\\wedge\\)</li> <li>notation math\u00e9matique :  <code>.</code></li> </ul> <p>C'est l'op\u00e9ration d\u00e9finie par:</p> <ul> <li><code>x &amp; F = F</code></li> <li><code>x &amp; V = x</code></li> </ul> <p>Puisque l'alg\u00e8bre de  Boole ne contient que deux \u00e9l\u00e9ments,  on peut \u00e9tudier tous les cas possibles et les regrouper dans un tableau appel\u00e9 table de v\u00e9rit\u00e9:</p> <p>Table de v\u00e9rit\u00e9 de AND </p> <code>x</code> <code>y</code> <code>x &amp; y</code> F F F F V F V F F V V V <p>On repr\u00e9sente souvent les op\u00e9rateurs bool\u00e9ens \u00e0 l'aide de portes logiques:</p> <p></p> <p>Notation usuelle en \u00e9lectronique : \\(Q=A \\wedge B\\)</p> <p></p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exemples-en-python","title":"Exemples en Python","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; n = 20\n&gt;&gt;&gt; (n % 10 == 0) and (n % 7 == 0)\nFalse\n&gt;&gt;&gt; (n % 4 == 0) and (n % 5 == 0)\nTrue\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#levaluation-paresseuse","title":"L'\u00e9valuation paresseuse","text":"<p>Pouvez-vous pr\u00e9voir le r\u00e9sultat du code ci-dessous ?</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; (n % 4 == 0) and (n % 0 == 0)\n    ---------------------------------------------------------------------------\n\n    ZeroDivisionError                         Traceback (most recent call last)\n\n    &lt;ipython-input-3-d8a98dcba9be&gt; in &lt;module&gt;\n    ----&gt; 1 (n % 4 == 0) and (n % 0 == 0)\n\n\n    ZeroDivisionError: integer division or modulo by zero\n</code></pre> <p>\u00c9videmment, la division par 0 provoque une erreur. Mais observez maintenant ce code :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; (n % 7 == 0) and (n % 0 == 0)\nFalse\n</code></pre> <p>On appelle \u00e9valuation paresseuse le fait que l'interpr\u00e9teur Python s'arr\u00eate d\u00e8s que sa d\u00e9cision est prise : comme le premier bool\u00e9en vaut False et que la conjonction <code>and</code> est appel\u00e9e, il n'est pas n\u00e9cessaire d'\u00e9valuer le deuxi\u00e8me bool\u00e9en. </p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#22-disjonction-or","title":"2.2 Disjonction (OR)","text":"<ul> <li>symbole usuel : | appel\u00e9 pipe en anglais</li> <li>fran\u00e7ais : OU</li> <li>anglais (et Python) : <code>or</code></li> <li>notation logique : \\(\\vee\\)</li> <li>notation math\u00e9matique :  \\(+\\)</li> </ul> <p>C'est l'op\u00e9ration d\u00e9finie par:</p> <p>C'est l'op\u00e9ration d\u00e9finie par:</p> <ul> <li><code>x | V = V</code></li> <li><code>x | F = x</code></li> </ul> <p>On en d\u00e9duit la table suivante:</p> <p>Table de v\u00e9rit\u00e9 de OR </p> <code>x</code> <code>y</code> <code>x or y</code> F F F F V V V F V V V V <p></p> <p>Notation usuelle en \u00e9lectronique : \\(Q=A \\vee B\\)</p> <p></p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exemples-en-python_1","title":"Exemples en Python","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; n = 20\n&gt;&gt;&gt; (n % 10 == 0) or (n % 7 == 0)\nTrue\n&gt;&gt;&gt; (n % 4 == 0) or (n % 5 == 0)\nTrue\n&gt;&gt;&gt; (n % 7 == 0) or (n % 3 == 0)\nFalse\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#levaluation-paresseuse-retour","title":"L'\u00e9valuation paresseuse (retour)","text":"<p>Pouvez-vous pr\u00e9voir le r\u00e9sultat du code ci-dessous ?</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; (n % 5 == 0) or (n % 0 == 0)\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#23-negation-not","title":"2.3  N\u00e9gation (NOT)","text":"<ul> <li>symbole usuel : ~</li> <li>fran\u00e7ais : NON</li> <li>anglais (et Python) : <code>not</code></li> <li>notation logique :  \\(\\neg\\)</li> <li>notation math\u00e9matique :  \\(\\overline{x}\\)</li> </ul> <p>C'est l'op\u00e9ration d\u00e9finie par:</p> <ul> <li><code>~V = F</code></li> <li><code>~F = V</code></li> </ul> <p>On en d\u00e9duit la table suivante:</p> <p>Table de v\u00e9rit\u00e9 de NOT </p> <code>x</code> <code>~x</code> F V V F <p></p> <p>Notation usuelle en \u00e9lectronique : \\(Q=\\neg A\\)</p> <p></p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exemples-en-python_2","title":"Exemples en Python","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; n = 20\n&gt;&gt;&gt; not(n % 10 == 0)\nFalse\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exercice-1","title":"Exercice 1","text":"<p>Comprendre ce m\u00e8me : </p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exercice-2","title":"Exercice 2","text":"<p>Il existe une propri\u00e9t\u00e9 appel\u00e9 la distributivit\u00e9 en logique formelle.</p> <p>Distributivit\u00e9</p> <p>a et (b ou c) = (a et b) ou (a et c)  a ou (b et c) = (a ou b) et (a ou c)</p> <p>D\u00e9montrer les deux \u00e9galit\u00e9s de la distributivit\u00e9 \u00e0 l\u2019aide des tables de v\u00e9rit\u00e9 suivantes  </p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exercice-3","title":"Exercice 3","text":"<p>Le math\u00e9maticien britannique Auguste de Morgan (1806\u20131871) a \u00e9galement contribu\u00e9 \u00e0 d\u00e9velopper l\u2019alg\u00e8bre de Boole \u00e0 l\u2019aide de son th\u00e9or\u00e8me :</p> <p>Loi de Morgan</p> <p>non (a ou b) = (non a) et (non b)  non (a et b) = (non a) ou (non b)</p> <p>D\u00e9montrer ce th\u00e9or\u00e8me \u00e0 l\u2019aide des tables ci-dessous : </p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exercice-4","title":"Exercice 4","text":"<ol> <li>Ouvrir le simulateur de circuits et cr\u00e9er pour chaque op\u00e9ration AND, OR, NOT un circuit \u00e9lectrique illustrant ses propri\u00e9t\u00e9s.</li> </ol> <p>Exemple (inint\u00e9ressant) de circuit : </p> <ol> <li>Utiliser successivement les circuits XOR, NAND et NOR et \u00e9tablir pour chacun leur table de v\u00e9rit\u00e9.</li> </ol>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#3-fonctions-composees","title":"3. Fonctions compos\u00e9es","text":""},{"location":"T2_Type_de_base/2.5_Booleens/cours/#31-disjonction-exclusive-xor","title":"3.1 Disjonction exclusive XOR","text":"<p>(en fran\u00e7ais OU EXCLUSIF)</p> <p>En fran\u00e7ais, quand on dit \u201cfromage ou dessert\u201d, c\u2019est l\u2019un ou l\u2019autre. Ce qui n\u2019est pas le cas du OU utilis\u00e9 dans les bool\u00e9ens. On appelle ou exclusif ou xor l\u2019op\u00e9ration d\u00e9finie par</p> <p><code>x ^ y = (x &amp; ~y) | (~x &amp; y)</code></p> <p>Table de v\u00e9rit\u00e9 de XOR </p> <code>x</code> <code>y</code> <code>x ^ y</code> F F F F V V V F V V V F <p></p> <p></p> <p>Le XOR joue un r\u00f4le fondamental en cryptographie car il poss\u00e8de une propri\u00e9t\u00e9 tr\u00e8s int\u00e9ressante :  \\((x\\wedge y)\\wedge y=x\\)</p> <p>Si \\(x\\) est un message et \\(y\\) une cl\u00e9 de chiffrage, alors \\(x\\wedge y\\) est le message chiffr\u00e9.  Mais en refaisant un XOR du message chiffr\u00e9 avec la cl\u00e9 \\(y\\), on retrouve donc le message \\(x\\) initial.</p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#32-fonction-non-et-nand","title":"3.2 Fonction Non Et (NAND)","text":"<p><code>x \u2191 y = ~(x &amp; y)</code></p> <p>Table de v\u00e9rit\u00e9 de NAND </p> <code>x</code> <code>y</code> <code>x \u2191 y</code> F F V F V V V F V V V F <p></p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#33-fonction-non-ou-nor","title":"3.3 Fonction Non Ou (NOR)","text":"<p><code>x \u2193 y = ~(x &amp; y)</code></p> <p>Table de v\u00e9rit\u00e9 de NOR </p> <code>x</code> <code>y</code> <code>x \u2193 y</code> F F V F V F V F F V V F <p></p> <p>Il est temps de se reposer un peu et d'admirer cette vid\u00e9o : </p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#remarque","title":"Remarque :","text":"<p>Les fonctions NAND ET NOR sont dites universelles : chacune d'entre elles peut g\u00e9n\u00e9rer l'int\u00e9gralit\u00e9 des autres portes logiques. Il est donc possible de coder toutes les op\u00e9rations uniquement avec des NAND (ou uniquement avec des NOR). Voir Wikipedia</p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exercice-5","title":"Exercice 5","text":"<p>Calculer les op\u00e9rations suivantes.</p> \ud83d\udc0d Script Python<pre><code>   1011011\n&amp;  1010101\n----------\n\n\n   1011011\n|  1010101\n----------\n\n\n   1011011\n^  1010101\n----------\n</code></pre> solution \ud83d\udc0d Script Python<pre><code> 1011011\n&amp;1010101\n----------\n 1010001\n\n 1011011\n|1010101\n----------\n 1011111\n\n 1011011\n^1010101\n----------\n 0001110\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#34-calculs-en-python","title":"3.4 Calculs en Python","text":"<p>les op\u00e9rateurs <code>&amp;</code>, <code>|</code> et <code>^</code> sont utilisables directement en Python</p> \ud83d\udc0d Script Python<pre><code># calcul A\n&gt;&gt;&gt; 12 &amp; 7\n4\n</code></pre> \ud83d\udc0d Script Python<pre><code># calcul B\n&gt;&gt;&gt; 12 | 7\n15\n</code></pre> \ud83d\udc0d Script Python<pre><code># calcul C\n&gt;&gt;&gt; 12 ^ 5\n9\n</code></pre> <p>Pour comprendre ces r\u00e9sultats, il faut travailler en binaire. Voici les m\u00eames calculs :</p> \ud83d\udc0d Script Python<pre><code># calcul A\n&gt;&gt;&gt; bin(0b1100 &amp; 0b111)\n    '0b100'\n</code></pre> \ud83d\udc0d Script Python<pre><code># calcul B\n&gt;&gt;&gt; bin(0b1100 | 0b111)\n   '0b1111'\n</code></pre> \ud83d\udc0d Script Python<pre><code># calcul C\n&gt;&gt;&gt; bin(0b1100 ^ 0b111)\n    '0b1011'\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exercice-6-preparation-du-pydefi","title":"Exercice 6 : pr\u00e9paration du pyd\u00e9fi","text":"<p>Objectif : chiffrer (= crypter) le mot \"BONJOUR\" avec la cl\u00e9 (de m\u00eame taille) \"MAURIAC\".  </p> <p>Protocole de chiffrage : XOR entre le code ASCII des lettres de m\u00eame position.</p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#exercice-7-facultatif","title":"Exercice 7 (facultatif)","text":"<p> R\u00e9solvez le pyd\u00e9fi </p>"},{"location":"T2_Type_de_base/2.5_Booleens/cours/#complement-proprietes-des-operateurs-logiques","title":"Compl\u00e9ment : propri\u00e9t\u00e9s des op\u00e9rateurs logiques","text":"<p>Les propri\u00e9t\u00e9s suivantes sont facilement d\u00e9montrables \u00e0 l'aide de tables de v\u00e9rit\u00e9s: (source : G.Connan)</p> <p></p> <p>Toutes ces lois sont ais\u00e9ment compr\u00e9hensibles si on les transpose en math\u00e9matiques : </p> <ul> <li>&amp; \u00e9quivaut \u00e0 \\(\\times\\)</li> <li>\\(|\\) \u00e9quivaut \u00e0 \\(+\\)</li> <li>\\(\\neg\\) \u00e9quivaut \u00e0 \\(-\\)</li> </ul>"},{"location":"T2_Type_de_base/2.5_Booleens/enonce/","title":"\u00c9nigme","text":""},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#1-a-la-recherche-du-personnage-mystere","title":"1. \u00c0 la recherche du personnage myst\u00e8re","text":"<p>Vous avez trouv\u00e9 une image bien \u00e9trange :</p> <p></p> <p>Un visage semble se deviner derri\u00e8re un champ de fleurs... mais quel est ce visage ?</p> <p>L'image du champ de fleurs ne vous est pas inconnue, d'ailleurs en cherchant bien vous l'avez retrouv\u00e9e dans vos dossiers :</p> <p></p> <p>On dirait que le personnage-myst\u00e8re a voulu se fondre dans le champ de fleurs...</p> <p>XORez-vous d\u00e9couvrir qui est ce personnage-myst\u00e8re ?</p>"},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#2-aide-pour-la-manipulation-dimages-et-lextraction-de-pixels","title":"2. Aide pour la manipulation d'images et l'extraction de pixels","text":""},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#21-code-de-demarrage","title":"2.1 Code de d\u00e9marrage","text":"\ud83d\udc0d Script Python<pre><code>from PIL import Image\n\nimg_myst = Image.open(\"mystere.bmp\")\nimg_mask = Image.open(\"mask.jpg\")\n\nlargeur = img_myst.width\nhauteur = img_myst.height\n\nimg_new = Image.new('RGB', img_myst.size)\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#22-manipulation-de-pixels","title":"2.2 Manipulation de pixels","text":"<p>Les expressions ci-dessous sont \u00e0 tester pour en comprendre le fonctionnement. </p>"},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#221-recuperer-le-code-rgb-un-pixel","title":"2.2.1 R\u00e9cup\u00e9rer le code <code>RGB</code>  un pixel","text":"<p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img_myst.getpixel((125, 80))\n(54, 217, 174)\n</code></pre> Le pixel de coordonn\u00e9es (125, 80) a pour composantes RGB (54, 217, 174).</p>"},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#222-modifier-la-couleur-dun-pixel","title":"2.2.2 Modifier la couleur d'un pixel","text":"<p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img_new.putpixel((30,70), (255,0,0))\n&gt;&gt;&gt; \n</code></pre> Le pixel de coordonn\u00e9es (30, 70) est maintenant un pixel rouge.</p>"},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#223-afficher-une-image","title":"2.2.3 Afficher une image","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img_mask.show()\n</code></pre>"},{"location":"T2_Type_de_base/2.5_Booleens/enonce/#224-sauvegarder-une-image","title":"2.2.4 Sauvegarder une image","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img_new.save(\"solution.png\")\n</code></pre>"},{"location":"T3_Type_construit/sommaire/","title":"Type construit","text":"<p>Cr\u00e9dits</p> <p>Cr\u00e9dit du cours : @Gilles Lassus</p> <ol> <li>Listes</li> <li>Tuples</li> <li>Dictionnaires</li> <li>Bilan</li> </ol>"},{"location":"T3_Type_construit/3.1_Listes/cours/","title":"3.1 Listes","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul> <p>Les listes font partie de ce qu'on appelle les donn\u00e9es composites (nous verrons plus tard les tuples et les dictionnaires). Elles permettent de regrouper de mani\u00e8re structur\u00e9e un ensemble de valeurs (et non plus une valeur unique). On les appelle listes en Python, ou bien tableaux de mani\u00e8re plus g\u00e9n\u00e9rale.</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#1-declaration-dune-liste","title":"1. D\u00e9claration d'une liste","text":"<p>Exemple fondateur n\u00b01 </p> <p>Une variable de type liste sera d\u00e9limit\u00e9e par des crochets, et ses \u00e9l\u00e9ments s\u00e9par\u00e9s par des virgules : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maliste = [\"riri\", \"fifi\", \"loulou\"]\n</code></pre></p> <p>On peut observer le type de la variable ainsi cr\u00e9\u00e9e : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; type(maliste)\n&lt;class 'list'&gt;\n</code></pre></p> <p>Remarques :</p> <ul> <li> <p>M\u00eame si cela n'a ici un grand int\u00e9r\u00eat, les \u00e9l\u00e9ments d'une liste peuvent donc \u00eatre de types diff\u00e9rents : ici, tous les \u00e9l\u00e9ments de ma liste sont des cha\u00eenes de caract\u00e8res (<code>str</code>), mais la liste <code>[\"riri\", 5, \"fifi\", \"loulou\"]</code> est aussi une liste valide.</p> </li> <li> <p>Une liste vide se d\u00e9clarera avec <code>[]</code>. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maliste2 = []\n</code></pre> Nous verrons plus tard qu'il est fr\u00e9quent dans les exercices de partir d'une liste vide et d'ajouter progressivement des \u00e9l\u00e9ments.</p> </li> </ul>"},{"location":"T3_Type_construit/3.1_Listes/cours/#2-acces-aux-elements-dune-liste","title":"2. Acc\u00e8s aux \u00e9l\u00e9ments d'une liste","text":"<p>Exemple fondateur n\u00b02 </p> <p>On acc\u00e8de \u00e0 un \u00e9l\u00e9ment d'une liste en mettant entre crochets l'indice de l'\u00e9l\u00e9ment (qui commence \u00e0 z\u00e9ro). \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; famille = [\"Bart\", \"Lisa\", \"Maggie\"] # (1)\n&gt;&gt;&gt; famille[0]\n'Bart'\n&gt;&gt;&gt; famille[1]\n'Lisa'\n&gt;&gt;&gt; famille[2]\n'Maggie'\n&gt;&gt;&gt; famille[3]\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre></p> <ol> <li>Nous prendrons souvent l'exemple de la famille Simpsons.</li> </ol> <p>Remarques :</p> <ul> <li> <p>Un indice qui d\u00e9passe la valeur \u00a0<code>longueur de la liste -1</code> provoquera donc une erreur <code>list index out of range</code>. C'est une erreur tr\u00e8s fr\u00e9quente lorsqu'on manipule des listes. </p> </li> <li> <p>Il est par contre possible d'utiliser des indices n\u00e9gatifs. On utilise par exemple tr\u00e8s souvent l'indice -1 pour acc\u00e9der au dernier \u00e9l\u00e9ment de la liste, sans avoir \u00e0 conna\u00eetre la longueur de celle-ci :</p> </li> </ul> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; famille[-1]\n'Maggie'\n</code></pre>"},{"location":"T3_Type_construit/3.1_Listes/cours/#3-longueur-dune-liste","title":"3. Longueur d'une liste","text":"<p>Exemple fondateur n\u00b03 </p> <p>La longueur d'une liste sera donn\u00e9e par la fonction <code>len()</code>, qui renvoie donc un nombre entier positif ou nul. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; len(famille)\n3\n</code></pre></p> <p>Remarques :</p> <ul> <li>La liste vide a pour longueur 0 : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; len([])\n0\n</code></pre></li> <li>Le dernier \u00e9l\u00e9ment d'une liste <code>maliste</code> (non vide) sera donc toujours l'\u00e9l\u00e9ment d'indice <code>len(maliste)-1</code>. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; famille[len(famille) - 1]\n'Maggie'\n</code></pre></li> <li>Comme indiqu\u00e9 pr\u00e9c\u00e9demment, ce dernier \u00e9l\u00e9ment est aussi accessible par l'indice -1.</li> </ul>"},{"location":"T3_Type_construit/3.1_Listes/cours/#4-parcours-des-elements-dune-liste","title":"4. Parcours des \u00e9l\u00e9ments d'une liste","text":"<p>Il existe deux m\u00e9thodes pour parcourir s\u00e9quentiellement tous les \u00e9l\u00e9ments d'une liste. Ces deux m\u00e9thodes sont \u00e0 ma\u00eetriser imp\u00e9rativement.</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#41-parcours-par-elements","title":"4.1 Parcours \u00abpar \u00e9l\u00e9ments\u00bb","text":"<p>C'est la m\u00e9thode la plus naturelle, celle d\u00e9j\u00e0 vue lors de la pr\u00e9sentation de la boucle <code>for</code>. Nous allons simplement it\u00e9rer sur les \u00e9l\u00e9ments de la liste.</p> <p>Exemple fondateur n\u00b04 </p> <p>Le code : \ud83d\udc0d Script Python<pre><code>famille = [\"Bart\", \"Lisa\", \"Maggie\"]\n\nfor membre in famille:\n    print(membre)\n</code></pre> renverra : \ud83d\udc0d Script Python<pre><code>Bart\nLisa\nMaggie\n</code></pre></p> <p>Remarque :</p> <ul> <li>Penser \u00e0 donner un nom signifiant \u00e0 la variable qui parcourt la liste. Il aurait par exemple \u00e9t\u00e9 tr\u00e8s maladroit d'\u00e9crire  \ud83d\udc0d Script Python<pre><code>for k in famille:\n    print(k)\n</code></pre> En effet le nom de variable <code>k</code> est habituellement utilis\u00e9 pour les nombres (les indices, les compteurs...).</li> </ul> <p>exercice 3</p> \u00c9nonc\u00e9Correction <p>Apr\u00e8s un r\u00e9f\u00e9rendum, la liste <code>urne</code> contient uniquement des <code>'oui'</code> ou des <code>'non'</code>. D\u00e9terminer le vainqueur de ce r\u00e9f\u00e9rendum.</p> \ud83d\udc0d Script Python<pre><code>urne = ['oui', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'oui', 'non', 'oui', 'non', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'non', 'non', 'non', 'non', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'non', 'non', 'non', 'oui', 'non', 'non', 'non', 'non', 'non', 'non', 'non', 'non', 'oui', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'non', 'non', 'non', 'oui', 'oui', 'non', 'oui', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'oui', 'non', 'non', 'non', 'non', 'non', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'oui']\n</code></pre> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>urne = ['oui', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'oui', 'non', 'oui', 'non', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'non', 'non', 'non', 'non', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'non', 'non', 'non', 'oui', 'non', 'non', 'non', 'non', 'non', 'non', 'non', 'non', 'oui', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'non', 'non', 'non', 'oui', 'oui', 'non', 'oui', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'non', 'non', 'oui', 'oui', 'oui', 'non', 'oui', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'non', 'oui', 'non', 'non', 'non', 'non', 'non', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'non', 'non', 'oui', 'oui', 'oui', 'oui', 'oui', 'oui', 'non', 'oui']\n\nnb_oui = 0\nfor vote in urne:\n    if vote == 'oui':\n        nb_oui += 1\nprint('pourcentage de oui', 100*nb_oui/len(urne), '%')\n</code></pre> \" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#42-parcours-par-indice","title":"4.2 Parcours \u00abpar indice\u00bb","text":"<p>Chaque \u00e9l\u00e9ment \u00e9tant accessible par son indice (de <code>0</code> \u00e0   <code>len(liste) - 1</code> ), il suffit de faire parcourir \u00e0 une variable <code>i</code> l'ensemble des entiers de <code>0</code> \u00e0   <code>len(liste) - 1</code>, par l'instruction <code>range(len(liste))</code> :</p> <p>Exemple fondateur n\u00b05 </p> <p>Le code : \ud83d\udc0d Script Python<pre><code>famille = [\"Bart\", \"Lisa\", \"Maggie\"]\n\nfor i in range(len(famille)):\n    print(famille[i])\n</code></pre> renverra : \ud83d\udc0d Script Python<pre><code>Bart\nLisa\nMaggie\n</code></pre></p> <p> Bonne habitude \u00e0 prendre : nommer sa variable d'indice <code>i</code>, <code>j</code>, <code>k</code> ou <code>indice</code> mais pas autre chose !  </p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#43-avantages-et-inconvenients-de-chaque-methode","title":"4.3 Avantages et inconv\u00e9nients de chaque m\u00e9thode","text":""},{"location":"T3_Type_construit/3.1_Listes/cours/#431-parcours-par-element","title":"4.3.1 Parcours par \u00e9l\u00e9ment","text":"\ud83d\udc0d Script Python<pre><code>    for membre in famille:\n        print(membre)\n</code></pre> <p>Les avantages </p> <ul> <li>la simplicit\u00e9 : un code plus facile \u00e0 \u00e9crire, avec un nom de variable explicite.</li> <li>la s\u00e9curit\u00e9  : pas de risque d'<code>index out of range</code> !</li> </ul> <p>Les inconv\u00e9nients </p> <ul> <li>m\u00e9thode rudimentaire : lorsqu'on est \u00abpositionn\u00e9\u00bb sur un \u00e9l\u00e9ment, il n'est pas possible d'acc\u00e9der au pr\u00e9c\u00e9dent ou au suivant. (et c'est parfois utile).</li> <li>on ne peut pas modifier l'\u00e9l\u00e9ment sur lequel on est positionn\u00e9 :</li> </ul> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = [1, 2, 3]\n&gt;&gt;&gt; for nb in lst:\n        nb = nb * 2 # (1)\n\n&gt;&gt;&gt; lst \n[1, 2, 3] # (2)\n</code></pre> <ol> <li>On veut multiplier par 2 chaque \u00e9l\u00e9ment de la liste</li> <li>La liste <code>lst</code> n'a pas chang\u00e9...</li> </ol>"},{"location":"T3_Type_construit/3.1_Listes/cours/#432-parcours-par-indice","title":"4.3.2 Parcours par indice","text":"\ud83d\udc0d Script Python<pre><code>    for i in range(len(famille)):\n        print(famille[i])\n</code></pre> <p>Les avantages </p> <ul> <li>le contr\u00f4le : en parcourant par indice, on peut s'arr\u00eater o\u00f9 on veut, on peut acc\u00e9der au suivant/pr\u00e9c\u00e9dent...</li> <li>pour les tableaux \u00e0 deux dimensions, on retrouve la d\u00e9signation classique d'un \u00e9l\u00e9ment par num\u00e9ro de ligne / num\u00e9ro de colonne.</li> </ul> <p>Les inconv\u00e9nients </p> <ul> <li>la complexit\u00e9 : il faut conna\u00eetre le nombre d'\u00e9l\u00e9ments de la liste (ou le r\u00e9cup\u00e9rer par la fonction <code>len()</code> )</li> <li>le risque d'erreur : encore et toujours le <code>index out of range</code>...</li> </ul> <p>exercice 4</p> \u00c9nonc\u00e9Correction  <p>On donne la liste : \ud83d\udc0d Script Python<pre><code>lst = [3, 1, 4, 1, 5, 9]\n</code></pre> En utilisant un parcours par indice :</p> <ol> <li>Afficher les \u00e9l\u00e9ments de cette liste.</li> <li>Afficher les \u00e9l\u00e9ments de cette liste dans l'ordre inverse (en commen\u00e7ant par 9)</li> </ol> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>lst = [3, 1, 4, 1, 5, 9]\n\nfor i in range(len(lst)-1, -1, -1):\n    print(lst[i])\n</code></pre> \" ) }}</p> <p>exercice 5</p> \u00c9nonc\u00e9Correction 1.Correction 2. <p>Trouvez le nombre qui est exactement \u00e0 la m\u00eame place dans la liste <code>list1</code> et dans la liste <code>list2</code>, sachant que les deux listes ont la m\u00eame taille.</p> <ol> <li>En utilisant une boucle <code>for</code> (une seule !). </li> <li>En utilisant une boucle <code>while</code>. Quel est l'avantage de la boucle <code>while</code> ? </li> </ol> \ud83d\udc0d Script Python<pre><code>list1 = [8468, 4560, 3941, 3328, 7, 9910, 9208, 8400, 6502, 1076, 5921, 6720, 948, 9561, 7391, 7745, 9007, 9707, 4370, 9636, 5265, 2638, 8919, 7814, 5142, 1060, 6971, 4065, 4629, 4490, 2480, 9180, 5623, 6600, 1764, 9846, 7605, 8271, 4681, 2818, 832, 5280, 3170, 8965, 4332, 3198, 9454, 2025, 2373, 4067]\nlist2 = [9093, 2559, 9664, 8075, 4525, 5847, 67, 8932, 5049, 5241, 5886, 1393, 9413, 8872, 2560, 4636, 9004, 7586, 1461, 350, 2627, 2187, 7778, 8933, 351, 7097, 356, 4110, 1393, 4864, 1088, 3904, 5623, 8040, 7273, 1114, 4394, 4108, 7123, 8001, 5715, 7215, 7460, 5829, 9513, 1256, 4052, 1585, 1608, 3941]\n</code></pre> \ud83d\udc0d Script Python<pre><code>list1 = [8468, 4560, 3941, 3328, 7, 9910, 9208, 8400, 6502, 1076, 5921, 6720, 948, 9561, 7391, 7745, 9007, 9707, 4370, 9636, 5265, 2638, 8919, 7814, 5142, 1060, 6971, 4065, 4629, 4490, 2480, 9180, 5623, 6600, 1764, 9846, 7605, 8271, 4681, 2818, 832, 5280, 3170, 8965, 4332, 3198, 9454, 2025, 2373, 4067]\nlist2 = [9093, 2559, 9664, 8075, 4525, 5847, 67, 8932, 5049, 5241, 5886, 1393, 9413, 8872, 2560, 4636, 9004, 7586, 1461, 350, 2627, 2187, 7778, 8933, 351, 7097, 356, 4110, 1393, 4864, 1088, 3904, 5623, 8040, 7273, 1114, 4394, 4108, 7123, 8001, 5715, 7215, 7460, 5829, 9513, 1256, 4052, 1585, 1608, 3941]\n\nfor i in range(len(list1)):\n    if list1[i] == list2[i]:\n        print(list1[i])\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>list1 = [8468, 4560, 3941, 3328, 7, 9910, 9208, 8400, 6502, 1076, 5921, 6720, 948, 9561, 7391, 7745, 9007, 9707, 4370, 9636, 5265, 2638, 8919, 7814, 5142, 1060, 6971, 4065, 4629, 4490, 2480, 9180, 5623, 6600, 1764, 9846, 7605, 8271, 4681, 2818, 832, 5280, 3170, 8965, 4332, 3198, 9454, 2025, 2373, 4067]\nlist2 = [9093, 2559, 9664, 8075, 4525, 5847, 67, 8932, 5049, 5241, 5886, 1393, 9413, 8872, 2560, 4636, 9004, 7586, 1461, 350, 2627, 2187, 7778, 8933, 351, 7097, 356, 4110, 1393, 4864, 1088, 3904, 5623, 8040, 7273, 1114, 4394, 4108, 7123, 8001, 5715, 7215, 7460, 5829, 9513, 1256, 4052, 1585, 1608, 3941]\n\ni = 0\nwhile list1[i] != list2[i]:\n    i += 1\nprint(list1[i])\n</code></pre> Avantage : on s'arr\u00eate d\u00e8s qu'on a trouv\u00e9 !</p> <p>Inconv\u00e9nient : on part du principe que ce nombre existe vraiment. Si on ne le trouve pas, on aura une erreur...</p> <p>exercice 6</p> \u00c9nonc\u00e9Correction <p>Dans la liste </p> <p>\ud83d\udc0d Script Python<pre><code>lst = [2428970, 1518306, 4971405, 1690994, 7918102, 4030834, 8830131, 7514856, 7903128, 6307569, 6624056, 5260490, 6447835, 4598783, 9108626, 5045240, 4128269, 4460134, 2497873, 5076659, 8104003, 7604887, 7451976, 4136924, 5691945, 8726293, 7855592, 3562473, 8849129, 6488474, 5303587, 2606124, 5484044, 4559758, 7592232, 2211406, 9974334, 7988936, 7582946, 7668748, 1799997, 3837917, 3196209, 7064342, 2543765, 1182013, 7253381, 1153735, 1037391, 4375946, 4445821, 5965587, 6001887, 4162629, 5235783, 8716582, 4901175, 5445422, 1120005, 8332321, 7075046, 2194175, 5557300, 2887907, 5103214, 2520744, 5104399, 2065665, 3035703, 7890213, 1758301, 3407982, 1355453, 4896338, 7979392, 9671602, 9690721, 7423779, 7423780, 3080825, 6785783, 3836837, 7310931, 1857470, 3492507, 2823231, 1492310, 1911148, 9620515, 5564910, 7009452, 7464745, 9608747, 7267383, 6939140, 6556578, 3592267, 8135497, 4881660, 5346884, 6859150]\n</code></pre> se cachent deux nombres cons\u00e9cutifs. Pouvez-vous les trouver ?</p> \ud83d\udc0d Script Python<pre><code>lst = [2428970, 1518306, 4971405, 1690994, 7918102, 4030834, 8830131, 7514856, 7903128, 6307569, 6624056, 5260490, 6447835, 4598783, 9108626, 5045240, 4128269, 4460134, 2497873, 5076659, 8104003, 7604887, 7451976, 4136924, 5691945, 8726293, 7855592, 3562473, 8849129, 6488474, 5303587, 2606124, 5484044, 4559758, 7592232, 2211406, 9974334, 7988936, 7582946, 7668748, 1799997, 3837917, 3196209, 7064342, 2543765, 1182013, 7253381, 1153735, 1037391, 4375946, 4445821, 5965587, 6001887, 4162629, 5235783, 8716582, 4901175, 5445422, 1120005, 8332321, 7075046, 2194175, 5557300, 2887907, 5103214, 2520744, 5104399, 2065665, 3035703, 7890213, 1758301, 3407982, 1355453, 4896338, 7979392, 9671602, 9690721, 7423779, 7423780, 3080825, 6785783, 3836837, 7310931, 1857470, 3492507, 2823231, 1492310, 1911148, 9620515, 5564910, 7009452, 7464745, 9608747, 7267383, 6939140, 6556578, 3592267, 8135497, 4881660, 5346884, 6859150]\n\nfor i in range(len(lst)-1): # Il faut s'arr\u00eater \u00e0 l'avant-dernier \u00e9l\u00e9ment de la liste\n    if lst[i] + 1 == lst[i+1]:\n        print(lst[i], lst[i+1])\n</code></pre>"},{"location":"T3_Type_construit/3.1_Listes/cours/#5-modification-dune-liste","title":"5. Modification d'une liste","text":"<p>En Python, les objets de type <code>List</code> sont modifiables (on emploie le mot mutables). Et c'est souvent une bonne chose, car des listes peuvent \u00e9voluer apr\u00e8s leur cr\u00e9ation. Lorsqu'on souhaitera figer le contenu d'une liste (pour des raisons de s\u00e9curit\u00e9 du code essentiellement), on utilisera alors le type <code>Tuple</code>, qui sera vu ult\u00e9rieurement.</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#51-modification-dun-element-existant","title":"5.1 Modification d'un \u00e9l\u00e9ment existant","text":"<p>Il suffit d'\u00e9craser la valeur actuelle avec une nouvelle valeur</p> <p>Exemple fondateur n\u00b06 </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; famille = [\"Bart\", \"Lisa\", \"Maggie\"]\n&gt;&gt;&gt; famille[0] = \"Bartholomew\" # oui, c'est son vrai nom\n&gt;&gt;&gt; famille\n['Bartholomew', 'Lisa', 'Maggie']   \n</code></pre>"},{"location":"T3_Type_construit/3.1_Listes/cours/#52-ajout-dun-element-a-la-fin-dune-liste-la-methode-append","title":"5.2 Ajout d'un \u00e9lement \u00e0 la fin d'une liste : la m\u00e9thode append()","text":"<p>Exemple fondateur n\u00b07 </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; famille = [\"Bart\", \"Lisa\", \"Maggie\"]\n&gt;&gt;&gt; famille.append(\"Milhouse\")\n&gt;&gt;&gt; famille\n['Bart', 'Lisa', 'Maggie', 'Milhouse']  \n</code></pre> <p>Remarques :</p> <ul> <li>La m\u00e9thode <code>append()</code> rajoute donc un \u00e9l\u00e9ment \u00e0 la fin de la liste.</li> <li>Dans beaucoup d'exercices, on part d'une liste vide <code>[]</code> que l'on remplit peu \u00e0 peu avec des <code>append()</code>.</li> <li>(HP) Il est possible d'ins\u00e9rer un \u00e9l\u00e9ment \u00e0 la position <code>i</code> avec la m\u00e9thode <code>insert</code> : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; famille = [\"Bart\", \"Lisa\", \"Maggie\"]\n&gt;&gt;&gt; famille.insert(1, \"Nelson\") # on ins\u00e8re \u00e0 la position 1\n&gt;&gt;&gt; famille\n['Bart', 'Nelson', 'Lisa', 'Maggie']\n</code></pre></li> </ul> <p>exercice 7</p> \u00c9nonc\u00e9Correction <p>Construire une liste contenant tous les nombres inf\u00e9rieurs \u00e0 100 qui sont divisibles par 7.</p> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>lst = []\nfor n in range(1, 101):\n    if n % 7 == 0:\n        lst.append(n)\n</code></pre> \" ) }}</p> <p>exercice 8</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la liste <code>temp = [4, -5, 8, 10, -1, -2, 7, 13]</code>. Construire la liste <code>temp_pos</code> qui ne contient que les \u00e9l\u00e9ments positifs de  <code>temp</code>. </p> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>temp = [4, -5, 8, 10, -1, -2, 7, 13]\n\ntemp_pos = []\nfor t in temp:\n    if t &gt; 0:\n        temp_pos.append(t)\n</code></pre> \" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#53-suppression-dun-element-dune-liste","title":"5.3 Suppression d'un \u00e9l\u00e9ment d'une liste ...","text":""},{"location":"T3_Type_construit/3.1_Listes/cours/#531-par-la-methode-remove","title":"5.3.1 ... par la m\u00e9thode remove()","text":"<p>Exemple fondateur n\u00b07 </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; famille = ['Bart', 'Nelson', 'Lisa', 'Maggie']\n&gt;&gt;&gt; famille.remove(\"Nelson\")\n&gt;&gt;&gt; famille\n['Bart', 'Lisa', 'Maggie']\n</code></pre> <p>Remarques :</p> <ul> <li>Attention, <code>remove</code> n'enl\u00e8ve que la premi\u00e8re occurrence de l'\u00e9l\u00e9ment d\u00e9sign\u00e9. S'il y en a d'autres apr\u00e8s, elles resteront dans la liste : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = [3, 1, 4, 5, 1, 9, 4]\n&gt;&gt;&gt; lst.remove(4)\n&gt;&gt;&gt; lst\n[3, 1, 5, 1, 9, 4]\n</code></pre></li> <li>Si l'\u00e9l\u00e9ment \u00e0 supprimer n'est pas trouv\u00e9, un message d'erreur est renvoy\u00e9 : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = [3, 1, 4, 5, 1, 9]\n&gt;&gt;&gt; lst.remove(2)\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nValueError: list.remove(x): x not in list\n</code></pre></li> </ul>"},{"location":"T3_Type_construit/3.1_Listes/cours/#532-par-linstruction-del","title":"5.3.2 ... par l'instruction <code>del</code>","text":"<p>L'instruction <code>del</code>  (qui n'est pas une fonction) permet de supprimer un \u00e9l\u00e9ment en donnant son indice.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maliste = [8, 4, 2, 5, 7]\n&gt;&gt;&gt; del maliste[3]\n&gt;&gt;&gt; maliste\n[8, 4, 2, 7]\n</code></pre> <p>exercice 9</p> \u00c9nonc\u00e9 <p>Exercice de la BNS.</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#6-construction-dune-liste-delements-identiques","title":"6. Construction d'une liste d'\u00e9l\u00e9ments identiques","text":"<p>Il est souvent pratique d'initialiser une liste de taille donn\u00e9e, souvent en la remplissant de 0.</p> <p>Imaginons par exemple que nous souhaitions une liste de taille 26 remplie de 0. Il est possible de faire comme ceci :</p> \ud83d\udc0d Script Python<pre><code>lst = []\nfor _ in range(26):\n    lst.append(0)\n</code></pre> <p>mais on pr\u00e9f\u00e8rera ce code :</p> <p>Exemple fondateur n\u00b08 </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = [0]*26\n</code></pre> <p>qui produira la liste <code>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</code> </p> <p>exercice 10</p> \u00c9nonc\u00e9Correction <p>Que fait le code ci-dessous ? \ud83d\udc0d Script Python<pre><code>texte = \"cet texte est prodigieusement ennuyeux\"\n\ndef rang(lettre):\n    return(ord(lettre) - 97)\n\ncompt = [0]*26\nfor lettre in texte :\n    if lettre != \" \" :\n        compt[rang(lettre)] += 1\n</code></pre></p> <p>{{ correction(True, \" \u00c0 l'issue de ce code la variable <code>compt</code> contient <code>[0, 0, 1, 1, 9, 0, 1, 0, 2, 0, 0, 0, 1, 3, 1, 1, 0, 1, 2, 5, 3, 0, 0, 2, 1, 0]</code>, qui correspond au nombre d'occurences de chaque lettre : 0 fois la lettre 'a', 0 fois la lettre 'b', 1 fois la lettre 'c', etc.</p> <p>Ce genre de comptage se fera de mani\u00e8re beaucoup plus efficace et \u00e9l\u00e9gante avec la structure de dictionnaire. \" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#7-construction-dune-liste-en-comprehension","title":"7. Construction d'une liste en compr\u00e9hension","text":"<p>C'est une grande caract\u00e9ristique du langage Python (m\u00eame si ce n'est pas une exclusivit\u00e9) : la m\u00e9thode de liste en compr\u00e9hension propose une mani\u00e8re \u00e9l\u00e9gante, rapide et naturelle pour cr\u00e9er des listes.</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#71-en-comprehension-pourquoi","title":"7.1 \u00aben compr\u00e9hension\u00bb, pourquoi ?","text":"<p>Cette expression vient des math\u00e9matiques. On dit qu'on d\u00e9finit un sous-ensemble par compr\u00e9hension lorsqu'on part d'un ensemble plus grand dont on ne garde que les \u00e9l\u00e9ments v\u00e9rifiant une certaine propri\u00e9t\u00e9.</p> <p>On pourrait par exemple d\u00e9finir les \u00e9l\u00e8ves de Premi\u00e8re NSI de cette mani\u00e8re :</p> <p>\u00ab\u00e9l\u00e8ves du lyc\u00e9e inscrits en classe de Premi\u00e8re ayant choisi la sp\u00e9cialit\u00e9 NSI\u00bb</p> <p>On part d'un ensemble large (les \u00e9l\u00e8ves du lyc\u00e9e) qu'on va ensuite r\u00e9duire par des caract\u00e9risations sp\u00e9cifiques : \u00eatre un \u00e9l\u00e8ve de Premi\u00e8re, puis avoir choisi la sp\u00e9cialit\u00e9 NSI.</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#72-premier-exemple","title":"7.2 Premier exemple","text":"<p>Exemple fondateur n\u00b09 </p> <p>Imaginons que nous poss\u00e9dons une liste <code>data</code> de temp\u00e9ratures, dont nous ne voulons garder que celles strictement sup\u00e9rieures \u00e0 20.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; data = [17, 22, 15, 28, 16, 13, 21, 23]\n&gt;&gt;&gt; good = [t for t in data if t &gt; 20]\n&gt;&gt;&gt; good\n[22, 28, 21, 23]\n</code></pre> <p>Explications :</p> <p></p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#721-le-filtre-eventuel","title":"7.2.1 le filtre \u00e9ventuel","text":"<p>C'est lui qui donne tout son sens \u00e0 cette m\u00e9thode : il permet de ne garder que certaines valeurs.  Il est pourtant \u00e9ventuel : que se passe-t-il s'il n'y a pas de filtre ?</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; data = [17, 22, 15, 28, 16, 13, 21, 23]\n&gt;&gt;&gt; good = [t for t in data]\n&gt;&gt;&gt; good\n[17, 22, 15, 28, 16, 13, 21, 23]\n</code></pre> On se retrouve \u00e9videmment avec une nouvelle liste qui contient exactement les \u00e9l\u00e9ments de la liste de d\u00e9part, ce qui n'est pas tr\u00e8s int\u00e9ressant. Pourtant les listes en compr\u00e9hension sans filtre sont tr\u00e8s fr\u00e9quentes, nous le verrons plus loin.</p> <p>exercice 11</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la variable <code>phrase = 'Bonjour les vacances sont finies'</code> et la variable <code>voyelles = 'aeiouy'</code>.</p> <p>Construire en compr\u00e9hension la liste <code>liste_voyelles</code> qui contient toutes les voyelles pr\u00e9sentes dans la variable <code>phrase</code>.   </p> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; phrase = 'Bonjour les vacances sont finies'\n&gt;&gt;&gt; voyelles = 'aeiouy'\n&gt;&gt;&gt; liste_voyelles = [lettre for lettre in phrase if lettre in voyelles]\n&gt;&gt;&gt; liste_voyelles\n['o', 'o', 'u', 'e', 'a', 'a', 'e', 'o', 'i', 'i', 'e']\n</code></pre> \" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#722-lensemble-de-depart","title":"7.2.2 l'ensemble de d\u00e9part","text":"<p>C'est \u00e0 partir de lui que va se construire notre liste. Pour l'instant, cet ensemble de d\u00e9part a toujours \u00e9t\u00e9 de type <code>list</code>.</p> <p>Cet ensemble peut \u00eatre aussi donn\u00e9 \u00e0 partir de l'instruction <code>range()</code>.  Souvenons-nous de l'exercice 4 : \u00abConstruire une liste contenant tous les nombres inf\u00e9rieurs \u00e0 100 qui sont divisibles par 7.\u00bb.</p> <p>Une solution possible \u00e9tait :</p> \ud83d\udc0d Script Python<pre><code>lst = []\nfor n in range(1, 101):\n    if n % 7 == 0:\n        lst.append(n)\n</code></pre> <p>Ce code peut maintenant s'\u00e9crire tr\u00e8s simplement en une seule instruction :</p> <p>Exemple fondateur n\u00b010 </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = [n for n in range(1,101) if n % 7 == 0]\n&gt;&gt;&gt; lst\n[7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98]\n</code></pre>"},{"location":"T3_Type_construit/3.1_Listes/cours/#723-la-valeur-a-garder","title":"7.2.3 la valeur \u00e0 garder","text":"<p>Pour l'instant, nous avons proc\u00e9d\u00e9 \u00e0 des filtres sur des ensembles existants, sans modifier la valeur filtr\u00e9e (la valeur \u00e0 garder). Les listes en compr\u00e9hension deviennent encore plus int\u00e9ressantes lorsqu'on comprend qu'il est possible de modifier la valeur filtr\u00e9e :</p> <p>Exemple fondateur n\u00b011 </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst_carres = [t**2 for t in range(1,10)]\n&gt;&gt;&gt; lst_carres\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre> <p>exercice 12</p> \u00c9nonc\u00e9Correction <ol> <li>On consid\u00e8re la fonction math\u00e9matique \\(f : x \\mapsto 2x+3\\). Coder la fonction <code>f</code>.</li> <li>Cr\u00e9er (en compr\u00e9hension) une liste contenant l'image des entiers de 1 \u00e0 10 par la fonction \\(f\\).</li> </ol> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>def f(x):\n    return 2*x + 3\n\nlst = [f(x) for x in range(1, 11)]\n</code></pre> \" ) }}</p> <p>exercice 13</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la liste <code>lst = [51, 52, 66, 91, 92, 82, 65, 53, 86, 42, 79, 95]</code>. Seuls les nombres entre 60 et 90 ont une signification : ce sont des codes ASCII (r\u00e9cup\u00e9rables par la fonction <code>chr</code> ). Cr\u00e9er (en compr\u00e9hension) une liste <code>sol</code> qui contient les lettres correspondants aux nombres ayant une signification.</p> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = [51, 52, 66, 91, 92, 82, 65, 53, 86, 42, 79, 95]\n&gt;&gt;&gt; decode = [chr(k) for k in lst if k &gt; 60  and k &lt; 90]\n&gt;&gt;&gt; decode\n['B', 'R', 'A', 'V', 'O']\n</code></pre> \" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#8-un-phenomene-inquietant-la-copie-de-liste","title":"8. Un ph\u00e9nom\u00e8ne inqui\u00e9tant : la copie de liste","text":"<p>une copie un peu trop parfaite</p> <p>Observez le code ci-dessous, r\u00e9alis\u00e9 sans trucage. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; listA = [1, 2, 3]\n&gt;&gt;&gt; listB = listA\n&gt;&gt;&gt; listA.append(7)\n&gt;&gt;&gt; listB\n[1, 2, 3, 7]\n&gt;&gt;&gt; listB.append(8)\n&gt;&gt;&gt; listA\n[1, 2, 3, 7, 8]\n</code></pre></p> <p>Tout se passe comme si les listes  <code>listA</code> et<code>listB</code> \u00e9taient devenus des clones \u00absynchronis\u00e9s\u00bb depuis l'affectation <code>listB = listA</code>.</p> <p>Analyse gr\u00e2ce \u00e0 PythonTutor</p> <p> </p> <p>L'illustration de PythonTutor nous donne la cl\u00e9 de l'\u00e9nigme : </p> <p><code>listA</code> et<code>listB</code> sont en fait un seul et m\u00eame objet.</p> <p>Comment en avoir le c\u0153ur net ? En observant leur adresse-m\u00e9moire, disponible gr\u00e2ce \u00e0 la fonction <code>id</code> :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; id(listA)\n140485841327616\n&gt;&gt;&gt; id(listB)\n140485841327616\n</code></pre> <p>Ceci met en \u00e9vidence que la m\u00e9taphore du tiroir dont on se sert pour expliquer ce qu'est une variable est malheureusement inexacte. Une variable est une r\u00e9f\u00e9rence vers une adresse-m\u00e9moire. Si deux variables font r\u00e9f\u00e9rence \u00e0 la m\u00eame adresse-m\u00e9moire, alors elles sont totalement identiques:  toute modification de l'une entra\u00eene une modification de l'autre.  </p> <p>Pour en savoir plus sur les variables, vous pouvez revenir sur la partie optionnelle du cours sur les variables.</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#mais-alors-comment-copier-le-contenu-dune-liste-vers-une-autre-sans-creer-un-clone","title":"Mais alors, comment copier le contenu d'une liste vers une autre sans cr\u00e9er un clone ?","text":"<p>Exemple fondateur n\u00b012 </p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; listA = [3, 4, 5]\n&gt;&gt;&gt; listB = list(listA)\n</code></pre> D'autres possibilit\u00e9s existent, comme <code>listA.copy()</code>, ou encore <code>listA[::]</code>...  </p> <p>exercice 14</p> \u00c9nonc\u00e9Correction <p>Effectuer les tests n\u00e9cessaires pour prouver que l'exemple pr\u00e9c\u00e9dent a bien produit deux objets diff\u00e9rents.</p> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; listA = [3, 4, 5]\n&gt;&gt;&gt; listB = list(listA)\n&gt;&gt;&gt; listA.append(9)\n&gt;&gt;&gt; listB\n[3, 4, 5]\n&gt;&gt;&gt; id(listA)\n140157471522368\n&gt;&gt;&gt; id(listB)\n140157465797184\n</code></pre> \" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#9-tableaux-a-plusieurs-dimensions-listes-de-listes","title":"9. Tableaux \u00e0 plusieurs dimensions : listes de listes","text":"<p>Nous avons vu qu'une liste pouvait contenir des \u00e9l\u00e9ments de tous types : des entiers, des chaines des caract\u00e8res... et pourquoi pas une liste qui contient des listes ?</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#91-syntaxe","title":"9.1 Syntaxe","text":"<p>Exemple fondateur n\u00b012 </p> <p>La liste <code>tab</code> ci-dessous est compos\u00e9e de 3 listes qui elles-m\u00eames contiennent trois nombres : \ud83d\udc0d Script Python<pre><code>tab =  [[3, 5, 2],\n        [7, 1, 4], \n        [8, 6, 9]]\n</code></pre></p> <ul> <li><code>tab[0][0] = 3</code></li> <li><code>tab[0][1] = 5</code></li> <li><code>tab[2][1] = 6</code> </li> <li><code>tab[1] = [7, 1, 4]</code> </li> </ul> <p></p> <p>La liste <code>a</code> est compos\u00e9e de 3 \u00e9l\u00e9ments qui sont eux-m\u00eame des listes de 3 \u00e9l\u00e9ments.</p> <p>exercice 15</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re le jeu du Morpion (ou Tic-Tac-Toe) dont la surface de jeu vierge est represent\u00e9e par le tableau : <code>tab = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]</code> </p> <p>Les premiers coups jou\u00e9s sont ceux-ci :</p> <ul> <li><code>tab[1][1] = 'X'</code> </li> <li><code>tab[2][1] = 'O'</code> </li> <li><code>tab[2][2] = 'X'</code> </li> <li><code>tab[0][0] = 'O'</code> </li> </ul> <p>Quel coup doit maintenant jouer le joueur  <code>'X'</code> pour s'assurer la victoire ?</p> <p>{{ correction(False, \" \ud83d\udc0d Script Python<pre><code>tab[0][2] = 'X'\n# ou\ntab[1][2] = 'X'\n</code></pre> \" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/cours/#92-parcours-dune-liste-de-listes","title":"9.2 Parcours d'une liste de listes","text":"<p>Exemple fondateur n\u00b013 </p> <ul> <li> <p>Parcours par \u00e9l\u00e9ments : \ud83d\udc0d Script Python<pre><code>for ligne in tab:\n    for elt in ligne:\n        print(elt)\n</code></pre></p> </li> <li> <p>Parcours par indice : \ud83d\udc0d Script Python<pre><code>for i in range(3):\n    for j in range(3):\n        print(tab[i][j])\n</code></pre></p> </li> </ul> <p>exercice 2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la liste <code>m</code> ('m' comme matrice) suivante :  </p> <p><code>m = [[1, 9, 4], [4, 1, 8], [7, 10, 1]]</code> </p> <p>Quelle est la somme de tous les nombres de la matrice <code>m</code> ?</p> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>m = [[1, 9, 4], [4, 1, 8], [7, 10, 1]]\n\nsomme = 0\nfor ligne in m:\n    for elt in ligne:\n        somme += elt\n\nprint(somme)\n</code></pre></p> <p>ou bien \ud83d\udc0d Script Python<pre><code>m = [[1, 9, 4], [4, 1, 8], [7, 10, 1]]\n\nsomme = 0\nfor i in range(3):\n    for j in range(3):\n        somme += m[i][j]\n\nprint(somme)\n</code></pre></p> <p>\" ) }}</p>"},{"location":"T3_Type_construit/3.1_Listes/exercices/","title":"Exercices","text":"<p>exercice 1</p> \u00c9nonc\u00e9Correction <p> R\u00e9solvez le Pyd\u00e9fi propos\u00e9 \u00e0 cette adresse</p> <p>Vous pouvez vous cr\u00e9er un compte pour valider vos r\u00e9sultats, ce site (g\u00e9r\u00e9 par l'Acad\u00e9mie de Poitiers) est remarquable. </p> <p>(avec les valeurs de test) \ud83d\udc0d Script Python<pre><code>lst = [0, 50, 40, 100, 70, 90, 0]\n\ntotal = 0\nfor i in range(len(lst)-1):\n    if lst[i] &gt; lst[i+1]:\n        nb_pierres = (lst[i]-lst[i+1])//10 + 1\n        total += nb_pierres\n\nprint(total)\n</code></pre></p> <p>exercice 2</p> \u00c9nonc\u00e9Correction <p>On donne la liste <code>jours</code> suivante : \ud83d\udc0d Script Python<pre><code>jours = [\"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\", \"dimanche\"]\n</code></pre></p> <p>On rappelle que la fonction <code>len</code> permet d'obtenir le nombre de caract\u00e8res d'une chaine de caract\u00e8res :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; len(\"test\")\n4\n</code></pre> <ol> <li>Cr\u00e9er en compr\u00e9hension une liste <code>lst1</code> contenant uniquement les jours comportant 5 lettres.</li> <li>Cr\u00e9er en compr\u00e9hension une liste <code>lst2</code> contenant uniquement les jours comportant la lettre <code>a</code> dans leur nom.</li> <li>Cr\u00e9er une fonction <code>compte_e</code> qui prend en param\u00e8tre une chaine de caract\u00e8res et qui renvoie le nombre de <code>e</code> que contient cette chaine de caract\u00e8res.</li> <li>Cr\u00e9er en compr\u00e9hension une liste <code>lst4</code> contenant uniquement les jours comportant deux fois la lettre <code>e</code> dans leur nom.</li> </ol> <p>1. \ud83d\udc0d Script Python<pre><code>lst1 = [day for day in jours if len(day) == 5]\n</code></pre> 2. \ud83d\udc0d Script Python<pre><code>lst2 = [day for day in jours if 'a' in day]\n</code></pre></p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def compte_e(mot):\n    compteur = 0\n    for lettre in mot:\n    if lettre == 'e':\n        compteur += 1\n    return compteur\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>lst4 = [day for day in jours if compte_e(day) == 2]\n</code></pre> </li> </ol> <p>exercice 3</p> \u00c9nonc\u00e9Correction <p>On donne le tableau <code>m</code> suivant : \ud83d\udc0d Script Python<pre><code>m = [[17, 71, 75, 89, 45, 10, 54, 26, 59, 47, 57, 64, 44], \\\n    [67, 25, 47, 49, 28, 40, 10, 17, 77, 35, 87, 15, 68], \\\n    [66, 89, 28, 43, 16, 14, 12, 21, 68, 22, 14, 18, 59], \\\n    [60, 35, 30, 23, 22, 37, 49, 89, 82, 80, 85, 28, 17], \\\n    [61, 42, 39, 46, 29, 38, 85, 72, 44, 60, 47, 35, 52], \\\n    [44, 28, 24, 40, 71, 71, 46, 25, 78, 54, 66, 84, 52], \\\n    [29, 71, 7, 38, 71, 60, 71, 60, 16, 82, 35, 39, 23], \\\n    [18, 61, 38, 7, 8, 32, 67, 43, 23, 28, 29, 16, 30], \\\n    [45, 30, 74, 9, 84, 78, 11, 80, 42, 64, 9, 39, 26], \\\n    [78, 57, 54, 66, 57, 63, 10, 42, 61, 19, 26, 25, 53], \\\n    [38, 87, 10, 64, 75, 26, 14, 68, 19, 33, 75, 50, 18], \\\n    [52, 81, 24, 67, 37, 78, 17, 19, 61, 82, 57, 24, 54]]\n</code></pre> Afficher successivement chaque ligne du tableau en respectant les r\u00e8gles suivantes :</p> <ul> <li>si le nombre est divisible par 7, afficher <code>*</code>, sinon afficher une espace <code></code></li> <li>sur une m\u00eame ligne, on affichera tous les symboles c\u00f4te \u00e0 c\u00f4te, en rajoutant le param\u00e8tre <code>end = ''</code> \u00e0 la fonction <code>print</code>. (exemple : <code>print('*', end = '')</code> )</li> <li>on ira \u00e0 la ligne \u00e0 la fin de chaque ligne, par l'instruction <code>print()</code> </li> </ul> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>m = [[17, 71, 75, 89, 45, 10, 54, 26, 59, 47, 57, 64, 44], \\\\\n    [67, 25, 47, 49, 28, 40, 10, 17, 77, 35, 87, 15, 68], \\\\\n    [66, 89, 28, 43, 16, 14, 12, 21, 68, 22, 14, 18, 59], \\\\\n    [60, 35, 30, 23, 22, 37, 49, 89, 82, 80, 85, 28, 17], \\\\\n    [61, 42, 39, 46, 29, 38, 85, 72, 44, 60, 47, 35, 52], \\\\\n    [44, 28, 24, 40, 71, 71, 46, 25, 78, 54, 66, 84, 52], \\\\\n    [29, 71, 7, 38, 71, 60, 71, 60, 16, 82, 35, 39, 23], \\\\\n    [18, 61, 38, 7, 8, 32, 67, 43, 23, 28, 29, 16, 30], \\\\\n    [45, 30, 74, 9, 84, 78, 11, 80, 42, 64, 9, 39, 26], \\\\\n    [78, 57, 54, 66, 57, 63, 10, 42, 61, 19, 26, 25, 53], \\\\\n    [38, 87, 10, 64, 75, 26, 14, 68, 19, 33, 75, 50, 18], \\\\\n    [52, 81, 24, 67, 37, 78, 17, 19, 61, 82, 57, 24, 54]]\n\nfor ligne in m:\n    for elt in ligne:\n        if elt % 7 == 0:\n            print('*', end = '')\n        else:\n            print(' ', end = '')\n    print('')\n</code></pre> \" ) }}</p> <p>exercice 4</p> \u00c9nonc\u00e9Correction <p>R\u00e9solvez le pyd\u00e9fi Insaisissable matrice propos\u00e9 \u00e0 cette adresse </p> <p>{{ correction(True, \" \ud83d\udc0d Script Python<pre><code>M=[[17, 3, 4, 14, 5, 17], [8, 16, 3, 17, 14, 12], [13, 5, 15, 4, 16, 3], [14, 7, 3, 16, 3, 2], [6, 1, 16, 10, 5, 13], [11, 1, 9, 11, 18, 8]]\n\ndef f(k):\n    return (9*k + 3) % 19\n\nfor _ in range(39):\n    for i in range(6):\n        for j in range(6):\n            M[i][j] = f(M[i][j])\n\nsomme = 0\nfor i in range(6):\n    for j in range(6):\n        somme += M[i][j]\n\nprint(somme)\n</code></pre> \" ) }}</p> <p>et pour vous entra\u00eener encore et encore : </p> <ul> <li>Recherche dans un tableau</li> <li>Parcours de tableau</li> </ul>"},{"location":"T3_Type_construit/3.1_Listes/manipulation/","title":"Echauffement","text":"<p>Manipulation de tableau</p> \u00c9nonc\u00e9Correction <p>On rappelle que la fonction randint(a, b) du module random retourne un nombre entier al\u00e9atoire compris entre a et b (b compris).</p> <ol> <li> <p>\u00c9crire une fonction <code>lancer_trois_des</code> permettant de retourner une liste de 3 nombres entiers simulant le lancer de 3 d\u00e9s cubiques.</p> </li> <li> <p>On appelle cette fonction avec l'instruction suivante : \ud83d\udccb Texte<pre><code>mon_lancer = lancer_trois_des()\n</code></pre> Quel est le type de la variable mon_lancer ?</p> </li> <li> <p>Quelle instruction permet alors de calculer la somme des trois d\u00e9s ?</p> <ul> <li> somme = mon_lancer[1] + mon_lancer[2] + mon_lancer[3]</li> <li> somme = mon_lancer[0] + mon_lancer[1] + mon_lancer[2]</li> <li> somme = mon_lancer + mon_lancer + mon_lancer</li> </ul> </li> <li> <p>On appelle cette fonction avec l'instruction suivante :     <code>de_1, de_2, de_3 = lancer_trois_des()</code></p> <p>Cette instruction g\u00e9n\u00e8re-t-elle une erreur ? </p> <p>Si oui, pourquoi ? Si non, donner une instruction permettant d'affecter \u00e0 une variable la somme des trois d\u00e9s.</p> </li> </ol> <ol> <li> <p>Question 1 : </p> \ud83d\udc0d Script Python<pre><code>import random\n\ndef lancer_trois_des():\n    a = random.randint(1, 6)\n    b = random.randint(1, 6)\n    c = random.randint(1, 6)\n    return a, b, c\n</code></pre> </li> <li> <p>c'est une liste</p> </li> <li> <ul> <li> somme = mon_lancer[1] + mon_lancer[2] + mon_lancer[3]</li> <li> somme = mon_lancer[0] + mon_lancer[1] + mon_lancer[2]</li> <li> somme = mon_lancer + mon_lancer + mon_lancer</li> </ul> </li> <li>Non mais on peut \u00e9crire <code>somme = de_1 + de_2 + de_3</code></li> </ol> <p>Manipulation de tableau</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la suite d'instructions donn\u00e9es ci-contre. Donner l'\u00e9tat des deux tableaux \u00e0 la fin de la suite d'instructions.</p> \ud83d\udc0d Script Python<pre><code>    tab_x = [7, 77, 777, 7777]\n    tab_y = [5, 55, 555, 5555]\n    tab_x[2] = tab_y[1]\n    tab_y[3] = tab_x[0]\n    tab_x[1] = tab_x[2]\n    tab_y[1] = tab_y[3]\n</code></pre> <p>tab_x vaut [7, 55, 55, 7777]</p> <p>tab_y vaut [5, 7, 555, 7]</p> <p>Manipulation de tableau</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la suite d'instructions donn\u00e9es ci-contre. Donner les valeurs de chacune des variables a \u00e0 f. \ud83d\udc0d Script Python<pre><code>tab = ['z', 'yy', 'xxx', 'wwww', 'paf']\n\na = len(tab)\nb = tab[ len(tab)\u20131 ]\nc = tab[-1]\nd = tab[ len(tab)\u20132 ]\ne = tab[-2]\nf = tab[-3]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>a=5 \nb='paf'\nc='paf'\nd='wwww'\ne='wwww'\nf='xxx'\n</code></pre> <p>Manipulation de tableau</p> \u00c9nonc\u00e9Correction <p>Pour chacune des instructions ci-dessous, \u00e9crire le tableau qui a \u00e9t\u00e9 cr\u00e9\u00e9. \ud83d\udc0d Script Python<pre><code>tab_a = [ 2**x for x in range(11) ]\ntab_b = [ 7 * x%2 for x in range(11) ]\ntab_c = [ 7 * ((10**x) // 9) for x in range(1, 5) ]\ntab_d = [ 'M. ' + car + ' ?' for car in 'XYZ' ]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>tab_a vaut [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\ntab_b vaut [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]\ntab_c vaut [7, 77, 777, 7777]\ntab_d vaut ['M. X ?', 'M. Y ?', 'M. Z ?']\n</code></pre> <p>Manipulation de tableau</p> \u00c9nonc\u00e9Correction <p>On rappelle que la fonction len() permet de retourner la longueur d'un tableau mais aussi la longueur d'une cha\u00eene de caract\u00e8res.</p> <ol> <li>Combien de noms vont \u00eatre affich\u00e9s \u00e0 l'issue de la s\u00e9quence d'instructions ci-dessous ?  \ud83d\udc0d Script Python<pre><code>grands_noms = [\"Lovelace\", \"Clarke\", \"Goldstine\", \"Hopper\", \"Recoque\", \"Hamilton\"]\nfor nom in grands_noms:\n    if \"o\" in nom:\n        print(nom)\n</code></pre></li> <li>Quelle sera la valeur de quantite_mystere \u00e0 la fin de la sequence d'instructions ci-dessous  \ud83d\udc0d Script Python<pre><code>grands_noms = [\"Lovelace\", \"Clarke\", \"Goldstine\", \"Hopper\", \"Recoque\", \"Hamilton\"]\nquantite_mystere = 0\nfor nom in grands_noms:\n    quantite_mystere = quantite_mystere + len(nom)\n</code></pre></li> </ol> <ol> <li>Cinq. Tout ceux qui comporte un O dans leur nom</li> <li>44 (somme des nombres de caract\u00e8res de chacun des noms)</li> </ol> <p>Manipulation de tableau</p> \u00c9nonc\u00e9Correction <p>On repr\u00e9sente la matrice donn\u00e9e ci-contre gr\u00e2ce au tableau ma_belle_matrice. \ud83d\udc0d Script Python<pre><code>ma_belle_matrice = [ ['a', 'b', 'c', 'd'],\n                     ['e', 'f', 'g', 'h'],\n                     ['i', 'j', 'k', 'l'],\n                     ['m', 'n', 'o', 'p'],\n                     ['q', 'r', 's', 't'] ]\na = ma_belle_matrice[3]\nb = ma_belle_matrice[3][2]\nc = ma_belle_matrice[1][2]\nd = ma_belle_matrice[2][1]\n</code></pre></p> <ol> <li>Donner les valeurs de chacune des variables a, b, c et d</li> <li>Proposer une suite d'instructions permettant de modifier <code>ma_belle _matrice</code> afin qu'elle corresponde \u00e0 la matrice donn\u00e9e ci-contre.      a b X d X X X X i j X l m n X p q r X t </li> </ol> <ol> <li> <p>a vaut ['m', 'n', 'o', 'p']    b vaut o, c vaut g, d vaut j</p> </li> <li> <p>une possibilit\u00e9 est </p> </li> </ol> \ud83d\udc0d Script Python<pre><code>    #Pour la premi\u00e8re ligne\n    ma_belle_matrice[1] = ['X', 'X', 'X', 'X']\n    #Pour la troisi\u00e8me colonne\n    for ligne in range(5):\n        ma_belle_matrice[ligne][2] = 'X'\n</code></pre> <p>Manipulation de tableau</p> \u00c9nonc\u00e9Correction Cas n\u00b01Correction Cas n\u00b02Correction Cas n\u00b03Correction Cas n\u00b04Correction Cas n\u00b05Correction Cas n\u00b06 <p>Colorier les bonnes cases en fonction de l'algorithme propos\u00e9</p> <ol> <li> <p>Cas n\u00b01  \ud83d\udc0d Script Python<pre><code>for i in range(0, 8):\n    for j in range(0, i):\n         M[i][j] = 'X'\n</code></pre></p> </li> <li> <p>Cas n\u00b02 \ud83d\udc0d Script Python<pre><code>for i in range(0, 8):\n    for j in range(i+1, 8):\n        M[i][j] = 'X'\n</code></pre></p> </li> <li> <p>Cas n\u00b03 \ud83d\udc0d Script Python<pre><code>for i in range(1, 8):\n    for j in range(0, 8-i):\n        M[i][j] = 'X'\n</code></pre></p> </li> <li> <p>Cas n\u00b04 \ud83d\udc0d Script Python<pre><code>for i in range(0, 8):\n    for j in range(3, 5):\n        M[i][j] = 'X'\n</code></pre></p> </li> <li> <p>Cas n\u00b05 \ud83d\udc0d Script Python<pre><code>for i in range(3, 5):\n    for j in range(1, 7):\n        M[i][j] = 'X'\n</code></pre></p> </li> <li> <p>Cas n\u00b06 \ud83d\udc0d Script Python<pre><code>for i in range(1, 8):\n    for j in range(8-i, 8):\n        M[i][j] = 'X'\n</code></pre></p> </li> </ol> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"T3_Type_construit/3.2_Tuples/cours/","title":"2.2 Tuples","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul> <p></p>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#1definition-des-tuples","title":"1.D\u00e9finition des tuples","text":"<p>Les tuples (appel\u00e9s p-uplets dans le programme officiel de NSI) sont une collection d'objets ordonn\u00e9e mais NON MODIFIABLE. Pour rappel :</p> <ul> <li>chaine de caract\u00e8res : ordonn\u00e9e et non modifiable</li> <li>liste : ordonn\u00e9e et modifiable</li> <li>tuple : ordonn\u00e9e et non modifiable </li> </ul> <p>Quel peut \u00eatre l'int\u00e9r\u00eat d'un tuple par rapport \u00e0 une liste ?</p> <ul> <li>Justement son caract\u00e8re prot\u00e9g\u00e9 : jamais une portion de code ne pourra venir modifier les informations contenues dans le tuple. </li> <li>L'utilisation des tuples est \u00e9conome en ressources-syst\u00e8me par rapport \u00e0 une liste (en particulier, parce que sa taille est fixe).</li> </ul> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; monPremierTuple = (3, 5, 6)\n</code></pre> <p>Un tuple se diff\u00e9rencie d'une liste par l'utilisation des parenth\u00e8ses au lieu des crochets.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; type(monPremierTuple)\ntuple\n</code></pre> <p>\u00c0 noter qu'un tuple peut \u00eatre d\u00e9clar\u00e9 sans parenth\u00e8ses. C'est toutefois \u00e0 \u00e9viter.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille = 600, 800\n&gt;&gt;&gt; type(taille)\ntuple\n</code></pre>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#2-acces-aux-elements-dun-tuple","title":"2. Acc\u00e8s aux \u00e9l\u00e9ments d'un tuple","text":"<p>Comme pour une liste ou une cha\u00eene de caract\u00e8re, l'acc\u00e8s se fait par un indice entre crochets.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = (12, 25, 6)\n&gt;&gt;&gt; a[0]\n12\n</code></pre>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#3-tentative-de-modification-dun-tuple","title":"3. Tentative de modification d'un tuple","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a[0] = 4\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n\n    &lt;ipython-input-7-5fe525706b2b&gt; in &lt;module&gt;()\n    ----&gt; 1 a[0] = 4\n\n\n    TypeError: 'tuple' object does not support item assignment\n</code></pre>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#4-parcours-dun-tuple","title":"4. Parcours d'un tuple","text":"<p>On retrouve bien \u00e9videmment les deux m\u00e9thodes utilisables pour les listes :</p>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#41-parcours-par-indice","title":"4.1 Parcours par indice","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; for k in range(len(a)):\n        print(a[k])\n12\n25\n6\n</code></pre>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#41-parcours-par-element","title":"4.1 Parcours par \u00e9l\u00e9ment","text":"\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; for k in a :\n        print(k)\n12\n25\n6\n</code></pre>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#5-construction-dune-fonction-renvoyant-un-tuple","title":"5. Construction d'une fonction renvoyant un tuple","text":"\ud83d\udc0d Script Python<pre><code>def division(a, b):\n    # fonction renvoyant le tuple (quotient, reste) de la division euclidienne de a par b.\n    q = a // b\n    r = a % b\n    return (q, r)\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; division(49,12)\n(4,1)\n</code></pre>"},{"location":"T3_Type_construit/3.2_Tuples/cours/#6-exercice","title":"6. Exercice","text":"<p>Exercice</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re deux points A et B d'un rep\u00e8re quelconque. Leurs coordonn\u00e9es sont des tuples \u00e0 deux \u00e9l\u00e9ments. \u00c9crire une fonction qui prend en argument les coordonn\u00e9es de deux points et qui renvoie le milieu de ces deux points.</p> <p>La fonction doit fonctionner de cette mani\u00e8re : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; C = (45, 12)\n&gt;&gt;&gt; D = (49, 32)\n&gt;&gt;&gt; milieu(C,D)\n(47, 22)\n</code></pre></p>"},{"location":"T3_Type_construit/3.2_Tuples/exercices/","title":"Exercices","text":"<p>Manipulation de tuple</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la suite d'instructions donn\u00e9e ci-contre.  Quelles sont les valeurs affect\u00e9es aux variables a, b et c \u00e0 la fin de cette s\u00e9quence d'instructions ? \ud83d\udc0d Script Python<pre><code>tuple1 = (19, -2.2, 888)\ntuple2 = (\"Mlle\", \"Mme\", \"M.\")\na, b, c = tuple1\nc, a = a, c\nd, e, f = tuple2\n(b, a) = (f, e)\n</code></pre></p> <p>a vaut Mme  b vaut M.  c vaut 19</p> <p>exercice</p> \u00c9nonc\u00e9Correction <p> R\u00e9solvez le Pyd\u00e9fi propos\u00e9 \u00e0 cette adresse</p> <p>Vous pouvez vous cr\u00e9er un compte pour valider vos r\u00e9sultats, ce site (g\u00e9r\u00e9 par l'Acad\u00e9mie de Poitiers) est remarquable. </p> <p>(avec les valeurs de test) \ud83d\udc0d Script Python<pre><code>lst = [0, 50, 40, 100, 70, 90, 0]\n\ntotal = 0\nfor i in range(len(lst)-1):\n    if lst[i] &gt; lst[i+1]:\n        nb_pierres = (lst[i]-lst[i+1])//10 + 1\n        total += nb_pierres\n\nprint(total)\n</code></pre></p>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/","title":"2.3 Dictionnaires","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#1-les-dictionnaires-premiers-exemples","title":"1. Les dictionnaires : premiers exemples","text":"<p>Une liste est un ensemble d'\u00e9l\u00e9ments accessibles par leur indice. Cet indice est en quelque sorte la \u00abplace\u00bb de l'\u00e9l\u00e9ment dans la liste. On peut dire que cet indice est la cl\u00e9 qui permet d'acc\u00e9der \u00e0 l'\u00e9l\u00e9ment.</p> <p>Dans un dictionnaire, chaque \u00e9l\u00e9ment est accessible par une cl\u00e9 qui n'est plus forc\u00e9ment un nombre : une chaine de caract\u00e8re, un nombre, ou autre chose, peut \u00eatre une cl\u00e9.</p> <p>Imaginons que je fasse l'inventaire de mon dressing :</p> habits quantit\u00e9 pantalons 3 pulls 4 tee-shirts 8 <p>Exemple fondateur n\u00b01 </p> <ul> <li>La cr\u00e9ation du dictionnaire repr\u00e9sentant mon dressing se fera par :     \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dressing = {\"pantalons\":3, \"pulls\":4, \"tee-shirts\":8}\n</code></pre></li> <li>L'acc\u00e8s \u00e0 une valeur se fera par :     \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dressing[\"pulls\"]\n  4\n</code></pre></li> <li> <p>On dit que <code>\"pulls\"</code> est la cl\u00e9 et que 4 est la valeur associ\u00e9e \u00e0 la cl\u00e9.</p> </li> <li> <p>Un dictionnaire est un ensemble cl\u00e9s / valeurs.  </p> </li> </ul> <p>Attention   : une cl\u00e9 peut aussi \u00eatre un nombre : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; myst = {9:4, 1:2, 6:3, 7:4} \n&gt;&gt;&gt; myst[1]\n2\n&gt;&gt;&gt; myst[7]\n4 \n</code></pre></p>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#2-definitions-et-proprietes-dun-dictionnaire","title":"2. D\u00e9finitions et propri\u00e9t\u00e9s d'un dictionnaire","text":""},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#21-definitions","title":"2.1 D\u00e9finitions","text":"<p>D\u00e9finition</p> <p>Un dictionnaire est une donn\u00e9e composite qui n'est pas ordonn\u00e9e (\u00e0 la diff\u00e9rence des listes !) Il fonctionne par un syst\u00e8me de <code>cl\u00e9:valeur</code>. Les cl\u00e9s, comme les valeurs, peuvent \u00eatre de types diff\u00e9rents. Un dictionnaire est d\u00e9limit\u00e9 par des accolades. </p> <p>Rappel :</p> <ul> <li>crochets <code>[ ]</code> -&gt; listes</li> <li>parenth\u00e8ses <code>( )</code> -&gt; tuples</li> <li>accolades <code>{ }</code> -&gt; dictionnaires</li> </ul>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#22-methodes-keys-et-values","title":"2.2 M\u00e9thodes <code>.keys()</code> et   <code>.values()</code>","text":"<p>Exemples fondateurs n\u00b02 </p> <ul> <li>Pour lister les cl\u00e9s d'un dictionnaire :     \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dressing.keys()\ndict_keys(['pantalons', 'pulls', 'tee-shirts'])\n</code></pre></li> <li>Pour lister les valeurs d'un dictionnaire :     \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dressing.values()\ndict_values([3, 4, 8])\n</code></pre></li> </ul> <p>Ces m\u00e9thodes sont importantes (elles figurent explicitement au programme de NSI) mais sont en pratique peu utilis\u00e9es. On leur pr\u00e9f\u00e8rera tr\u00e8s largement la m\u00e9thode de parcours suivante :</p>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#23-parcours-dun-dictionnaire","title":"2.3 Parcours d'un dictionnaire","text":"<p>Exemple fondateur n\u00b03 </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; for habit in dressing:\n        print(dressing[habit])\n3\n4\n8\n#La variable habit prend successivement pour valeur les cl\u00e9s du dico.\n# habit vaudra donc pantalons au premier tour de boucle.\n# et donc dressing[\"pantalon\"] renvoie bien 3 comme vu juste avant.\n</code></pre> <p>Observation gr\u00e2ce \u00e0 PythonTutor</p> <p> </p>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#24-creation-dun-dictionnaire-vide","title":"2.4 Cr\u00e9ation d'un dictionnaire vide","text":"<p>Exemple fondateur n\u00b04 </p> <p>Deux m\u00e9thodes existent pour cr\u00e9er un dictionnaire : <code>dict()</code> et <code>{}</code> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mondico = dict()\n&gt;&gt;&gt; mondico\n{}\n&gt;&gt;&gt; mondico['john'] = 12\n&gt;&gt;&gt; mondico\n{'john': 12}\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; contacts = {}\n&gt;&gt;&gt; contacts['bob'] = '06 12 17 21 32'\n</code></pre></p>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#25-ajout-modification-dun-element-dans-un-dictionnaire","title":"2.5 Ajout / Modification d'un \u00e9l\u00e9ment dans un dictionnaire","text":"<p>Exemple fondateur n\u00b05 </p> <p>Pas besoin d'une m\u00e9thode <code>append()</code>, il suffit de rajouter une paire <code>cl\u00e9 : valeur</code> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dressing[\"chaussettes\"] = 12\n</code></pre></p> <p>On peut aussi modifier un dictionnaire existant.</p> \ud83d\udc0d Script Python<pre><code>dressing[\"chaussettes\"] = 11\n</code></pre>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#26-suppression-dune-valeur","title":"2.6 Suppression d'une valeur","text":"<p>Exemple fondateur n\u00b06 </p> <p>On utilise l'instruction <code>del</code> (d\u00e9j\u00e0 rencontr\u00e9e pour les listes)</p> \ud83d\udc0d Script Python<pre><code>del dressing[\"chaussettes\"]\n</code></pre> <p>fonction habit</p> \u00c9nonc\u00e9Correction <p>Reprenons notre dictionnaire <code>dressing</code> : \ud83d\udc0d Script Python<pre><code>dressing = {\"pantalons\":3, \"pulls\":4, \"tee-shirts\":8}\n</code></pre> Cr\u00e9er une fonction <code>achat(habit)</code> qui augmente de 1 le nombre d'habits (pantalon, pull ou tee-shirt) de mon dressing. </p> \ud83d\udc0d Script Python<pre><code>dressing = {\"pantalons\":3, \"pulls\":4, \"tee-shirts\":8}\n\ndef achat(habit):\n    dressing[habit] += 1\n</code></pre> <p>Remarque : Petit probl\u00e8me si on essaie d'acheter un v\u00eatement pour la 1\u00e8re fois</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; achat(\"chemises\")\n    ---------------------------------------------------------------------------\n\n    KeyError                                  Traceback (most recent call last)\n\n    &lt;ipython-input-28-fd9d1ac5f62d&gt; in &lt;module&gt;\n    ----&gt; 1 achat(\"chemises\")\n\n\n    &lt;ipython-input-27-feb173444189&gt; in achat(habit)\n          1 def achat(habit):\n    ----&gt; 2     dressing[habit] = dressing[habit] + 1\n\n\n    KeyError: 'chemises'\n</code></pre> <p>Nous allons r\u00e9soudre ce probl\u00e8me gr\u00e2ce \u00e0 :</p>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#27-test-dappartenance-a-un-dictionnaire","title":"2.7 Test d'appartenance \u00e0 un dictionnaire","text":"<p>Exemple fondateur n\u00b07 </p> <p>Le mot <code>in</code> permet de tester l'appartenance d'une cl\u00e9 \u00e0 un dictionnaire. Un bool\u00e9en est renvoy\u00e9.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; \"cravates\" in dressing\n  False\n</code></pre>"},{"location":"T3_Type_construit/3.3_Dictionnaires/cours/#3-application","title":"3. Application","text":"<p>fonction habit version 2</p> \u00c9nonc\u00e9Correction <p>Am\u00e9liorer la fonction <code>achat(habit)</code> en y incluant un test pour prendre en compte les nouveaux habits.</p> \ud83d\udc0d Script Python<pre><code>def achat(habit):\n    if habit in dressing:\n        dressing[habit] += 1\n    else:\n        dressing[habit] = 1\n</code></pre>"},{"location":"T3_Type_construit/3.3_Dictionnaires/exercices/","title":"Exercices","text":""},{"location":"T3_Type_construit/3.3_Dictionnaires/exercices/#exercice-1-creation-dun-dico-a-partir-dune-liste","title":"Exercice 1 : Cr\u00e9ation d'un dico \u00e0 partir d'une liste","text":"<p>exercice 1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la liste suivante :</p> \ud83d\udc0d Script Python<pre><code>lst = ['Emmy', 'Ahmed', 'Antoine', 'Emma', 'Louan', 'Louka', 'Louan', 'Elouo', 'Candice', 'Tristan', 'Alissa', 'Louka', 'Louka', 'Emma', 'Alissa', 'Antoine', 'Elouo', 'Louan', 'Mathias', 'Candice', 'Antoine', 'Tristan', 'Louka', 'Emma', 'Tristan', 'Mathias', 'Louan', 'Vincent', 'Vincent', 'Ahmed', 'Louka', 'Elouo', 'Ahmed', 'Elouo', 'Candice', 'Louka', 'Mathias', 'Mathias', 'Emmy', 'Candice', 'Tristan', 'Antoine', 'Mathias', 'Ahmed', 'Candice', 'Louka', 'Alissa', 'Vincent', 'Elouo', 'Vincent', 'Antoine', 'Elouo', 'Emmy', 'Hugo', 'Vincent', 'Louan', 'Emmy', 'Emma', 'Vincent', 'Louan', 'Elouo', 'Emmy', 'Emmy', 'Emma', 'Mathias', 'Elouo', 'Louka', 'Hugo', 'Emma', 'Vincent', 'Candice', 'Ahmed', 'Hugo', 'Emma', 'Candice', 'Louan', 'Louka', 'Candice', 'Emma', 'Hugo', 'Mathias', 'Tristan', 'Mathias', 'Tristan', 'Antoine', 'Antoine', 'Hugo', 'Louka', 'Mathias', 'Hugo', 'Alissa', 'Elouo', 'Louka', 'Louka', 'Alissa', 'Vincent', 'Ahmed', 'Emma', 'Hugo', 'Mathias', 'Hugo', 'Mathias', 'Antoine', 'Ahmed', 'Antoine', 'Antoine', 'Vincent', 'Ahmed', 'Candice', 'Mathias', 'Emmy', 'Mathias', 'Emma', 'Antoine', 'Tristan', 'Antoine', 'Tristan', 'Candice', 'Louka', 'Louka', 'Tristan', 'Ahmed', 'Elouo', 'Emmy', 'Antoine', 'Alissa', 'Ahmed', 'Antoine', 'Alissa', 'Louan', 'Emma', 'Elouo', 'Tristan', 'Emmy', 'Elouo', 'Louka', 'Emmy', 'Ahmed', 'Louka', 'Vincent', 'Vincent', 'Antoine', 'Ahmed', 'Ahmed', 'Vincent', 'Tristan', 'Louan', 'Emmy', 'Elouo', 'Louka', 'Emmy', 'Hugo', 'Emmy', 'Emma', 'Emma', 'Hugo', 'Louan', 'Hugo', 'Antoine', 'Ahmed', 'Emmy', 'Vincent', 'Emma', 'Candice', 'Candice', 'Louka', 'Louan', 'Alissa', 'Vincent', 'Vincent', 'Tristan', 'Louka', 'Louan', 'Louka', 'Antoine', 'Tristan', 'Alissa', 'Ahmed', 'Vincent', 'Louka', 'Alissa', 'Mathias', 'Elouo', 'Emmy', 'Ahmed', 'Emmy', 'Vincent', 'Elouo', 'Emma', 'Mathias', 'Ahmed', 'Vincent', 'Mathias', 'Candice', 'Elouo', 'Louan', 'Elouo', 'Vincent', 'Emmy', 'Emma']\n</code></pre> <p>Cr\u00e9er un dictionnaire qui associera \u00e0 chaque pr\u00e9nom son nombre d'occurrences dans la liste.</p> \ud83d\udc0d Script Python<pre><code>occurrence = {}\n\nfor prenom in lst:\n    if prenom in occurrence:\n        occurrence[prenom] += 1\n    else:\n        occurrence[prenom] = 1\n</code></pre>"},{"location":"T3_Type_construit/3.3_Dictionnaires/exercices/#exercice-2-calcul-doccurrence-dans-une-liste","title":"Exercice 2 : Calcul d'occurrence dans une liste","text":"<p>exercice 2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la liste suivante : <code>lst = ['5717', '1133', '5545', '4031', '6398', '2734', '3070', '1346', '7849', '7288', '7587', '6217', '8240', '5733', '6466', '7972', '7341', '6616', '5061', '2441', '2571', '4496', '4831', '5395', '8584', '3033', '6266', '2452', '6909', '3021', '5404', '3799', '5053', '8096', '2488', '8519', '6896', '7300', '5914', '7464', '5068', '1386', '9898', '8313', '1072', '1441', '7333', '5691', '6987', '5255']</code> </p> <p>Quel est le chiffre qui revient le plus fr\u00e9quemment dans cette liste ?</p> \ud83d\udc0d Script Python<pre><code>lst = ['5717', '1133', '5545', '4031', '6398', '2734', '3070', '1346', '7849', '7288', '7587', '6217', '8240', '5733', '6466', '7972', '7341', '6616', '5061', '2441', '2571', '4496', '4831', '5395', '8584', '3033', '6266', '2452', '6909', '3021', '5404', '3799', '5053', '8096', '2488', '8519', '6896', '7300', '5914', '7464', '5068', '1386', '9898', '8313', '1072', '1441', '7333', '5691', '6987', '5255']\n\nocc = {}\n\nfor nombre in lst:\n    for chiffre in nombre:\n        if chiffre in occ:\n            occ[chiffre] += 1\n        else:\n            occ[chiffre] = 1\n\n# d\u00e9termination du max:\nocc_max = 0\n\nfor chiffre in occ:\n    if occ[chiffre] &gt; occ_max:\n        occ_max = occ[chiffre]\n        chiffre_max = chiffre\n\nprint(chiffre_max, 'est le chiffre le plus fr\u00e9quent')\nprint('il apparait', occ_max, 'fois')\n</code></pre>"},{"location":"T3_Type_construit/3.3_Dictionnaires/exercices/#exercice-3-les-pokemons","title":"Exercice 3 : Les pok\u00e9mons","text":"<p>Source de l'exercice : pr\u00e9pabac NSI premi\u00e8re, HATIER</p> <p>On mod\u00e9lise des informations (nom, taille et poids) sur des pokemons de fa\u00e7on suivante :</p> \ud83d\udc0d Script Python<pre><code>exemple_pokemons = {\n    'bulbizarre':(70,7),\n    'herbizarre':(100,13),\n    'abo':(200,7),\n    'jungko':(170,52)\n}\n</code></pre> <p>Par exemple, bulbizarre est un pokemon qui mesure 70cm et qui p\u00e8se 7kg. Question 1. Quel est le type de exemple_pokemons ?</p> Correction <p>Il s'agit d'un dictionnaire</p> \ud83d\udc0d Script Python<pre><code>type(exemple_pokemons)\n</code></pre> <p>Question 2. Quelle instruction permet d'ajouter \u00e0 cette structure de donn\u00e9es le pokemon goupix qui mesure 60 cm et qui p\u00e8se 10kg ?</p> Correction \ud83d\udc0d Script Python<pre><code>exemple_pokemons[\"goupix\"] = (60,10)\n</code></pre> <p>Question 3. On donne le code suivant :</p> \ud83d\udc0d Script Python<pre><code>def le_plus_grand(pokemons):\n    grand=None\n    taille_max=None\n    for (nom,(taille,poids)) in pokemons.items():\n        if taille_max is None or taille&gt; taille_max:\n            taille_max=taille\n            grand=nom\n    return (grand,taille_max)\n</code></pre> <p>Question 3a. En utilisant la fonction, quelle est la valeur du plus grand pokemon dans le dictionnaire d\u00e9fini ci dessus ?</p> Correction \ud83d\udc0d Script Python<pre><code>le_plus_grand(exemple_pokemons)[1]\n</code></pre> <p>Question 3b. Ecrire le code d'une fonction le_plus_leger qui prends des pokemons en param\u00e8tre et qui renvoie un tuple dont la premi\u00e8re composante est le nom du pokemon et la seconde est son poids. Exemple : <code>assert le_plus_leger(exemple_pokemons)==('bulbizarre',7)</code></p> Correction \ud83d\udc0d Script Python<pre><code>def le_plus_leger(pokemons):\n    leger=None\n    poids_min=None\n    for (nom,(taille,poids)) in pokemons.items():\n        if poids_min is None or poids&lt; poids_min:\n            poids_min=poids\n            leger=nom\n    return (leger,poids_min)\nassert le_plus_leger(exemple_pokemons)==('bulbizarre',7)\n</code></pre> <p>Question 4. Ecrire le code d'une fonction taille qui prend en param\u00e8tre un dictionnaire de pokemons ainsi que le nom d'un pokemon, et qui renvoie la taille de ce pokemon.  Exemple :  \ud83d\udc0d Script Python<pre><code>assert taille(exemple_pokemons,'abo')==200\nassert taille(exemple_pokemons,'jungko')==170\nassert taille(exemple_pokemons,'dracaufeu')==None\n</code></pre></p> Correction \ud83d\udc0d Script Python<pre><code>#fonction taille qui prend en param\u00e8tre un dictionnaire de pokemons ainsi que le nom d'un pokemon,\n# et qui renvoie la taille de ce pokemon\ndef taille(dico,nom):\n    \"\"\"\n    Renvoie la taille d'un pokemon\n    @params : dico -&gt; Dictionnaire : ensemble des pokemons. Structure : {'pokemon1',(taille,poids)}\n            nom -&gt; str : Nom du pokemon doit on veut conna\u00eetre la taille\n    @\u263areturn : int -&gt; Taille \n    \"\"\"\n    if nom in dico.keys():\n        return dico[nom][0]\n\nassert taille(exemple_pokemons,'abo')==200\nassert taille(exemple_pokemons,'jungko')==170\nassert taille(exemple_pokemons,'dracaufeu')==None\n</code></pre>"},{"location":"T3_Type_construit/3.3_Dictionnaires/exercices/#exercice-4-lecture-et-manipulation-des-metadonnees-exif-dune-image","title":"Exercice 4 : lecture et manipulation des m\u00e9tadonn\u00e9es EXIF d'une image","text":"<p>On consid\u00e8re l'image ci dessus dont nous allons extraire les donn\u00e9es EXIF \u00e0 l'aide du module exifread</p> \ud83d\udc0d Script Python<pre><code>import exifread\nf = open(\"liberty.jpg\", 'rb')\ndata = exifread.process_file(f)\n</code></pre> <p>Question 1 Observer ce que contient la variable <code>data</code>. De quel type est-elle ?</p> Correction <p>C'est un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>type(data)\n{'Image ImageWidth': (0x0100) Long=3264 @ 18,\n'Image ImageLength': (0x0101) Long=1836 @ 30,\n'Image Make': (0x010F) ASCII=SAMSUNG @ 158,\n'Image Model': (0x0110) ASCII=GT-I9195 @ 166,\n'Image Orientation': (0x0112) Short=Horizontal (normal) @ 66,\n'Image XResolution': (0x011A) Ratio=72 @ 176,\n'Image YResolution': (0x011B) Ratio=72 @ 184,\n'Image ResolutionUnit': (0x0128) Short=Pixels/Inch @ 102,\n'Image Software': (0x0131) ASCII=Shotwell 0.22.0 @ 192,\n'Image YCbCrPositioning': (0x0213) Short=Centered @ 126,\n'Image ExifOffset': (0x8769) Long=208 @ 138,\n'GPS GPSVersionID': (0x0000) Byte=[2, 2, 0, 0] @ 830,\n'GPS GPSLatitudeRef': (0x0001) ASCII=N @ 842,\n'GPS GPSLatitude': (0x0002) Ratio=[44, 51, 24163/1250] @ 934,\n'GPS GPSLongitudeRef': (0x0003) ASCII=W @ 866,\n'GPS GPSLongitude': (0x0004) Ratio=[0, 34, 169537/10000] @ 958,\n'GPS GPSAltitudeRef': (0x0005) Byte=0 @ 890,\n'GPS GPSAltitude': (0x0006) Ratio=58 @ 982,\n'GPS GPSTimeStamp': (0x0007) Ratio=[12, 28, 10] @ 990,\n'GPS GPSDate': (0x001D) ASCII=2019:03:28 @ 1014,\n'Image GPSInfo': (0x8825) Long=820 @ 150,\n'EXIF ExposureTime': (0x829A) Ratio=1/1093 @ 586,\n'EXIF FNumber': (0x829D) Ratio=13/5 @ 594,\n'EXIF ExposureProgram': (0x8822) Short=Aperture Priority @ 242,\n'EXIF ISOSpeedRatings': (0x8827) Short=50 @ 254,\n'EXIF ExifVersion': (0x9000) Undefined=0220 @ 266,\n'EXIF ComponentsConfiguration': (0x9101) Undefined=YCbCr @ 278,\n'EXIF ShutterSpeedValue': (0x9201) Signed Ratio=1/1093 @ 602,\n'EXIF ApertureValue': (0x9202) Ratio=69/25 @ 610,\n'EXIF BrightnessValue': (0x9203) Signed Ratio=76 @ 618,\n'EXIF ExposureBiasValue': (0x9204) Signed Ratio=0 @ 626,\n'EXIF MaxApertureValue': (0x9205) Ratio=69/25 @ 634,\n'EXIF MeteringMode': (0x9207) Short=CenterWeightedAverage @ 350,\n'EXIF LightSource': (0x9208) Short=Unknown @ 362,\n'EXIF Flash': (0x9209) Short=Flash did not fire @ 374,\n'EXIF FocalLength': (0x920A) Ratio=37/10 @ 642,\n'EXIF MakerNote': (0x927C) Undefined=[7, 0, 1, 0, 7, 0, 4, 0, 0, 0, 48, 49, 48, 48, 2, 0, 4, 0, 1, 0, ... ] @ 650,\n'EXIF UserComment': (0x9286) Undefined=User comments @ 748,\n'EXIF FlashPixVersion': (0xA000) Undefined=0100 @ 422,\n'EXIF ColorSpace': (0xA001) Short=sRGB @ 434,\n'EXIF ExifImageWidth': (0xA002) Signed Long=2524 @ 446,\n'EXIF ExifImageLength': (0xA003) Signed Long=1662 @ 458,\n'Interoperability InteroperabilityIndex': (0x0001) ASCII=R98 @ 800,\n'Interoperability InteroperabilityVersion': (0x0002) Undefined=[48, 49, 48, 48] @ 812,\n'EXIF InteroperabilityOffset': (0xA005) Long=790 @ 470,\n'EXIF SensingMethod': (0xA217) Short=One-chip color area @ 482,\n'EXIF SceneType': (0xA301) Short=Directly Photographed @ 494,\n'EXIF ExposureMode': (0xA402) Short=Auto Exposure @ 506,\n'EXIF WhiteBalance': (0xA403) Short=Auto @ 518,\n'EXIF DigitalZoomRatio': (0xA404) Ratio=3 @ 770,\n'EXIF SceneCaptureType': (0xA406) Short=Standard @ 542,\n'EXIF Saturation': (0xA409) Short=Normal @ 554,\n'EXIF Sharpness': (0xA40A) Short=Normal @ 566,\n'EXIF ImageUniqueID': (0xA420) ASCII=S08Q0LEGC01 @ 778}\n</code></pre> <p>Question 2 Afficher la valeur correspondant \u00e0 la cl\u00e9 <code>'Image Make'</code>.</p> Correction \ud83d\udc0d Script Python<pre><code>data['Image Make']\n</code></pre> <p>Question 3 Modifier cette valeur pour que l'appareil apparaisse comme \u00e9tant fabriqu\u00e9 par Apple.</p> Correction \ud83d\udc0d Script Python<pre><code>data['Image Make']=\"(0x010F) ASCII=APPLE @ 158\"\n</code></pre> <p>Question 4 Rep\u00e9rer dans le dictionnaire les renseignements relatifs \u00e0 la latitude et la longitude enregistr\u00e9es dans les m\u00e9tadonn\u00e9es de cette image.   Attention, les donn\u00e9es sont au format Degr\u00e9 Minutes Secondes.  La derni\u00e8re valeur donn\u00e9e est donn\u00e9e sous forme de quotient, il faut le calculer ! Vous pourrez utiliser le site https://www.coordonnees-gps.fr/</p> Correction <p>\ud83d\udc0d Script Python<pre><code>print(data['GPS GPSLatitudeRef'])\nprint(data['GPS GPSLatitude'])\nprint(data['GPS GPSLongitudeRef'])\nprint(data['GPS GPSLongitude'])\n</code></pre> soit <code>N[44, 51, 24163/1250]W[0, 34, 169537/10000]</code> En DMS, la latitude est 44\u00b051'19.3304''Nord. La longitude est 0\u00b034'16.9537'' Ouest. Ce qui donne :  En effet, cette photographie a \u00e9t\u00e9 prise Place Picard, \u00e0 Bordeaux, o\u00f9 se trouve une Statue de la Libert\u00e9. </p>"},{"location":"T3_Type_construit/3.3_Dictionnaires/exercices/#exercice-5-resolution-du-pydefi-pokemons-le-seul-et-unique","title":"Exercice 5 : r\u00e9solution du pyd\u00e9fi Pok\u00e9mons \"le seul et unique\"","text":"<p>D'apr\u00e8s le d\u00e9fi propos\u00e9 par L.Signac .</p> <p></p> <p>Travail pr\u00e9alable</p> <p>Nous allons travailler avec les quelques donn\u00e9es suivantes, pr\u00e9sent\u00e9es sous forme d'une liste de listes :</p> \ud83d\udc0d Script Python<pre><code>L = [['givrali', '75', '46'],\n ['branette', '35', '153'],\n ['kyogre', '23', '-10'],\n ['roserade', '-87', '91'],\n ['balignon', '44', '-155'],\n ['keunotor', '32', '163'],\n ['givrali', '-22', '124'],\n ['kyogre', '-54', '-26'],\n ['pyronille', '11', '-102']]\n</code></pre> <p>Question 1 Cr\u00e9er un dictionnaire <code>pokemon</code> dont la cl\u00e9 sera le nom du Pok\u00e9mon, et la valeur le tuple de ses coordonn\u00e9es. Si le Pok\u00e9mon est en double dans la liste, sa valeur sera alors la cha\u00eene de caract\u00e8re <code>\"doublon\"</code>.</p> Correction \ud83d\udc0d Script Python<pre><code>pokemon = {}\nfor personnage in L :\n    nom = personnage[0]\n    if nom in pokemon :\n        pokemon[nom] = \"doublon\"\n    else :\n        pokemon[nom] = (personnage[1],personnage[2])\n</code></pre> <p>Question 2  Les donn\u00e9es d'entr\u00e9e du pyd\u00e9fi ont \u00e9t\u00e9 enregistr\u00e9es dans le fichier input_defi.txt. Les lignes suivantes permettent de parcourir chacun des personnages de la liste.</p> \ud83d\udc0d Script Python<pre><code>#exemple de code pour lire un fichier\nfich = open(\"input_defi.txt\", \"r\")\nfor ligne in fich.readlines():\n    personnage = ligne[:-1] #on enl\u00e8ve le caract\u00e8re de retour \u00e0 la ligne \\n\n    personnage = personnage.split(\",\") # on s\u00e9pare les trois \u00e9l\u00e9ments de personnage, qui deviennent une liste\n</code></pre> <p>Tous les personnages ont \u00e9t\u00e9 parcourus : seul le dernier (\"tauros\" s'affiche). Gr\u00e2ce au code ci-dessous et \u00e0 la question 1, cr\u00e9er de la m\u00eame mani\u00e8re qu'\u00e0 la question 1 un dictionnaire qui contiendra tous les pokemons. </p> Correction \ud83d\udc0d Script Python<pre><code>pokemon = {}\nfich = open(\"input_defi.txt\", \"r\")\nfor ligne in fich.readlines():\n    personnage = ligne[:-1] \n    personnage = personnage.split(\",\") \n    nom = personnage[0]\n    if nom in pokemon :\n        pokemon[nom] = \"doublon\"\n    else :\n        pokemon[nom] = (personnage[1],personnage[2])\n</code></pre> <p>Question 3 R\u00e9pondre au d\u00e9fi : quelles sont les coordonn\u00e9es du seul pok\u00e9mon unique de cette liste ?</p> Correction \ud83d\udc0d Script Python<pre><code>for (cle, valeur) in pokemon.items() :\nif valeur != \"doublon\" :\n    print(valeur)\n</code></pre>"},{"location":"T3_Type_construit/3.4_bilan/cours/","title":"Fiche bilan : Types construits","text":"<p>Cette fiche bilan n'est pas exhaustive ! Libre \u00e0 vous de rajouter des \u00e9l\u00e9ments !</p>  Tuple  Liste  Dictionnaire  Listes de listes  Description Caract\u00e9ristiques  De tout type ?  OUI OUI Non pour les cl\u00e9s Oui pour les valeurs OUI Peut contenir des nombres entiers, des r\u00e9els, des bool\u00e9ens, des cha\u00eenes de caract\u00e8res, ...  Ordonn\u00e9 ?  OUI OUI NON mais les logiciels s'en chargent parfois OUI Les \u00e9l\u00e9ments sont conserv\u00e9s dans l'ordre  Indexable ?  OUI OUI OUI gr\u00e2ce aux cl\u00e9s OUI Chaque \u00e9l\u00e9ment est accessible gr\u00e2ce \u00e0 son index  It\u00e9rable ?  OUI OUI OUI OUI Il est possible de parcourir les \u00e9l\u00e9ments gr\u00e2ce \u00e0 une boucle for par exemple  Mutable ?  NON OUI OUI seulement pour les valeurs OUI Il est possible de modifier les \u00e9l\u00e9ments d\u00e9j\u00e0 pr\u00e9sents Op\u00e9rations in OUI OUI OUI OUI Permet de savoir si un \u00e9l\u00e9ment est pr\u00e9sent len OUI OUI OUI OUI Permet de conna\u00eetre le nombre d'\u00e9l\u00e9ments index OUI OUI NON OUI Permet de conna\u00eetre l'index de l'\u00e9l\u00e9ment Slice [i : j] OUI OUI NON OUI Renvoie une partie des \u00e9l\u00e9ments de l\u2019indice i \u00e0 j non inclus count OUI OUI NON OUI Renvoie le nombre d'apparitions d'un \u00e9l\u00e9ment  Concat\u00e9nation + OUI OUI NON OUI Renvoie une nouvelle s\u00e9quence \u00e0 partir de deux s\u00e9quences append NON OUI NON OUI Ajoute un \u00e9l\u00e9ment (\u00e0 la fin) remove NON OUI NON OUI Supprime la premi\u00e8re apparition d'un \u00e9l\u00e9ment insert NON OUI NON OUI Ins\u00e8re un \u00e9l\u00e9ment gr\u00e2ce \u00e0 son index pop ON OUI OUI OUI Supprime un \u00e9l\u00e9ment gr\u00e2ce \u00e0 son index (ou cl\u00e9) sort NON OUI NON OUI Permet de trier keys NON NON OUI NON Permet de chercher parmi les cl\u00e9s values NON NON OUI NON Permet de chercher parmi les valeurs items NON NON OUI NON Permet de chercher parmi les cl\u00e9s et les valeurs get NON NON OUI NON Renvoie la valeur associ\u00e9 \u00e0 une cl\u00e9"},{"location":"T4_Architecture_materielle/sommaire/","title":"Th\u00e8me 4 : Architecture mat\u00e9rielle","text":"<ol> <li>Architecture Von Neumann</li> <li>Architecture r\u00e9seau</li> <li>Protocoles de communication dans un r\u00e9seau</li> <li>D\u00e9couverte des commandes Linux</li> </ol>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/","title":"Architecture Von Neumann et langage assembleur","text":"<p>On distingue 4 zones essentielles :</p> <ul> <li>le CPU (Central Processing Unit) qui contient lui-m\u00eame : l'Unit\u00e9 Arithm\u00e9tique et Logique (UAL) dans laquelle sont effectu\u00e9es les op\u00e9rations de base (addition, multiplication...) Cette zone comporte notamment les registres (peu nombreux, de l'ordre de la dixaine) qui sont les espaces de travail ultra-rapides dans lesquels l'UAL va effectuer ses calculs. Une fois ceux-ci effectu\u00e9s, les valeurs des registres repartent dans la m\u00e9moire. l'Unit\u00e9 de contr\u00f4le, qui va s\u00e9quencer les op\u00e9rations. Lorsqu'on parle d'un processeur \u00e0 3 GHz, cela signifie (approximativement) que Unit\u00e9 de Contr\u00f4le va envoyer l'ordre d'une nouvelle op\u00e9ration \u00e0 l'UAL 3 milliards de fois par seconde.</li> <li>la m\u00e9moire, qui contient \u00e0 la fois les donn\u00e9es \u00e0 traiter et les instructions du programme. Cette id\u00e9e de stocker au m\u00eame endroit donn\u00e9es et programme est l'id\u00e9e centrale de l'architecture von Neumann.</li> <li>les bus de communication (des fils \u00e9lectriques permettant de transporter les donn\u00e9es entre les diff\u00e9rents composants)</li> <li>les Entr\u00e9es/Sorties, permettant de g\u00e9rer les informations avec l'ext\u00e9rieur.</li> </ul> <p>Cette activit\u00e9 est disponible ici en vid\u00e9o. </p> In\u00a0[\u00a0]: Copied! <pre>a = 3\nb = 5\nc = a + b\n</pre> a = 3 b = 5 c = a + b <p>Ce programme est ici \u00e9crit en langage Python. Le processeur ne comprend pas ce langage : les instructions doivent lui \u00eatre pass\u00e9es en langage-machine. C'est le r\u00f4le des interpr\u00e9teurs (pour le Python, par exemple) ou des compilateurs (pour le C, par exemple) que de faire le lien entre le langage pratiqu\u00e9 par les humains (Python, C...) et le langage-machine, qui n'est qu'une succession de chiffres binaires.</p> <p>Par exemple : notre code ci-dessus s'\u00e9crit</p> 01010000 00001111 00011000 00000000 00000000 00000000 01010000 00111111 00011100 00000000 00000000 00000000 01100000 00000011 01000000 00111111 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000011 00000000 00000000 00000000 00000101 00000000 00000000 00000000  <p>en langage-machine. Comment a lieu cette transformation ?</p> In\u00a0[\u00a0]: Copied! <pre>.pos 0\n    mrmovl a, %eax\n    mrmovl b, %ebx\n    addl %eax, %ebx\n    rmmovl %ebx, c\n    halt\n\n.align 4\na:  .long 3\nb:  .long 5\nc:  .long\n</pre> .pos 0     mrmovl a, %eax     mrmovl b, %ebx     addl %eax, %ebx     rmmovl %ebx, c     halt  .align 4 a:  .long 3 b:  .long 5 c:  .long       <p>Le simulateur Y86 permet de simuler la mani\u00e8re dont le processeur va ex\u00e9cuter ce programme. Vous pouvez retrouver le programme \u00e0 charger ici.</p> <p></p> <p>rappel : la totalit\u00e9 des lignes est comment\u00e9e dans la vid\u00e9o disponible ici</p> 500f1800 0000503f 1c000000 6003403f 20000000 00000000 03000000 05000000  <p>Une fois transform\u00e9 en binaire, on retrouve le code donn\u00e9 au d\u00e9but du paragraphe pr\u00e9c\u00e9dent.</p> <p>Coder en assembleur la s\u00e9quence d'instruction suivante :</p> In\u00a0[1]: Copied! <pre>w = 10\nx = 3\ny = 5\nz = w - (x + y)\n</pre> w = 10 x = 3 y = 5 z = w - (x + y) <p>Vous aurez pour cela besoin de l'instruction <code>subl rA rB</code> qui effectue l'op\u00e9ration <code>rB-rA</code> et la stocke dans <code>rB</code>. (<code>rA</code> et <code>rB</code> sont les noms des registres).</p> In\u00a0[\u00a0]: Copied! <pre>#include \"stdio.h\"\n#include \"stdlib.h\"\n#include \"string.h\"\n\nint main()\n{\n\nchar saisie[50] = \"\";\nprintf(\"Acc\u00e8s restreint : saisissez votre mot de passe \\n\");\nwhile (strcmp(saisie,\"NSIMAURIAC\")!=0)\n{\nprintf(\"Mot de passe ? \\n\");\nscanf(\"%s\",&amp;saisie);\n}\n\nprintf(\"Acc\u00e8s autoris\u00e9 \\n\");\n\nreturn 0;\n}\n</pre> #include \"stdio.h\" #include \"stdlib.h\" #include \"string.h\"  int main() {  char saisie[50] = \"\"; printf(\"Acc\u00e8s restreint : saisissez votre mot de passe \\n\"); while (strcmp(saisie,\"NSIMAURIAC\")!=0) { printf(\"Mot de passe ? \\n\"); scanf(\"%s\",&amp;saisie); }  printf(\"Acc\u00e8s autoris\u00e9 \\n\");  return 0; }  <ul> <li>Que fait ce programme ?</li> <li>Quel est le mot de passe ?</li> </ul> <p>\u00c0 l'aide du programme GHex, il est possible d'aller observer la valeur des octets directement dans le fichier binaire <code>crackme</code>. </p> <p>Ce fichier binaire est \u00e9crit en langage-machine. Il est donc incompr\u00e9hensible pour un autre humain... m\u00eame si GHex nous aide en affichant notamment (dans la partie droite) les cha\u00eenes de caract\u00e8res... dont notre mot de passe ;)</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#architecture-von-neumann-et-langage-assembleur","title":"Architecture Von Neumann et langage assembleur\u00b6","text":""},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#le-fonctionnement-dun-processeur-modele-von-neumann","title":"Le fonctionnement d'un processeur : mod\u00e8le von Neumann\u00b6","text":"<p>John Von Neumann (1903-1957) est un math\u00e9maticien et physicien (et bien d'autres choses) am\u00e9ricano-hongrois. Il a le premier th\u00e9oris\u00e9 l'architecture des processeurs, tels qu'ils fonctionnent encore aujourd'hui.</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#architecture-von-neumann","title":"Architecture von Neumann\u00b6","text":""},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#activite-1-simulation-dun-programme-en-assembleur","title":"Activit\u00e9 1 : simulation d'un programme en assembleur\u00b6","text":""},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#le-programme-que-nous-etudierons","title":"Le programme que nous \u00e9tudierons\u00b6","text":""},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#au-plus-proche-de-la-machine-mais-encore-humainement-comprehensible-le-langage-assembleur","title":"Au plus proche de la machine mais encore humainement compr\u00e9hensible : le langage assembleur\u00b6","text":"<p>Il existe un langage dit de \"bas-niveau\" (au sens qu'il est plus proche du langage machine qu'un langage de haut-niveau comme le Python) qui permet de passer des instructions directement au processeur : c'est le langage assembleur (ou ASM).</p> <p>En assembleur, notre programme s'\u00e9crirait (par exemple) :</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#code-en-langage-machine","title":"Code en langage-machine :\u00b6","text":"<p>Sur la partie droite du simulateur, la zone M\u00e9moire contient, apr\u00e8s assemblage, la traduction de notre code en langage-machine  :</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#exercice","title":"Exercice\u00b6","text":""},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#notions-essentielles","title":"Notions essentielles\u00b6","text":"<ul> <li>Les registres sont \u00e0 percevoir comme des zones de travail temporaires, \u00e0 l'acc\u00e8s tr\u00e8s rapide. Les donn\u00e9es font l'aller-retour entre la m\u00e9moire et le registre : elles sont stock\u00e9es en m\u00e9moire, passent dans le registre pour y \u00eatre modifi\u00e9es, et reviennent en m\u00e9moire.</li> <li>les donn\u00e9es ET les instructions sont stock\u00e9es ensemble dans la m\u00e9moire : c'est le principe fondateur de l'architecture Von Neumann. Ici, l'octet <code>03</code> situ\u00e9 \u00e0 l'adresse <code>0x000d</code> signifie qu'il va falloir ajouter (on le sait gr\u00e2ce au <code>60</code> qui pr\u00e9c\u00e8de) le registre num\u00e9rot\u00e9 <code>0</code> (donc <code>%eax</code>) au registre num\u00e9rot\u00e9 <code>3</code> (donc <code>%ebx</code>). On retrouve un octet de m\u00eame valeur <code>03</code> \u00e0 l'adresse <code>0x0018</code>. Mais dans ce cas, cet octet n'est pas une instruction mais une simple donn\u00e9e : c'est la valeur 3 qu'on a donn\u00e9e \u00e0 la variable $a$ dans notre programme. Cette caract\u00e9ristique (une m\u00eame valeur peut-\u00eatre une donn\u00e9e ou une instruction) peut provoquer des vuln\u00e9rabilit\u00e9s : c'est notamment le principe fondateur de l'injection SQL.</li> </ul>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#conclusion","title":"Conclusion\u00b6","text":"<p>Le simulateur Y86 nous a permis d'observer comment un processeur r\u00e9alise des op\u00e9rations \u00e9l\u00e9mentaires. Nous avons d\u00e9couvert le langage assembleur, qui est un langage beaucoup moins agr\u00e9able qu'un langage de haut-niveau, mais qui reste n\u00e9anmoins compr\u00e9hensible par un \u00eatre humain. Certains informaticiens codent (encore de nos jours) directement en langage assembleur, pour \"coller\" au mieux au processeur et optimiser les ressources.</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#activite-2-modification-dun-programme-par-desassemblage","title":"Activit\u00e9 2 : modification d'un programme par d\u00e9sassemblage\u00b6","text":"<p>On consid\u00e8re ci-dessous le programme <code>crackme.c</code>, r\u00e9dig\u00e9 en langage en C. Vous pouvez t\u00e9l\u00e9charger ce programme ici.</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#compilation-et-execution-du-programme","title":"Compilation et ex\u00e9cution du programme\u00b6","text":"<ul> <li>Dans un terminal, tapez l'instruction <code>gcc crackme.c -o crackme</code>.</li> <li>Tapez <code>./crackme</code> et jouez avec le programme.</li> </ul>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#observation-du-fichier-binaire","title":"Observation du fichier binaire\u00b6","text":""},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#modification-du-fichier-binaire","title":"Modification du fichier binaire\u00b6","text":"<p>Dans notre code C l'instruction <code>while (strcmp(saisie,\"NSIMAURIAC\")!=0)</code> est le c\u0153ur de la v\u00e9rification du mot de passe. En assembleur, elle va donner naissance \u00e0 une instruction <code>JNE</code> (pour Jump if Not Equal, voir ici). Cette instruction est cod\u00e9e en hexad\u00e9cimal par l'opcode 75 C5. Nous allons rechercher ces octets et les remplacer par 90 90, 90 \u00e9tant l'opcode pour <code>NOP</code> (ne rien faire).</p> <ul> <li>Recherchez dans GHex 75 C5.</li> <li>Remplacez par 90 90.</li> <li>Sauvegardez le fichier sous le nom <code>crackme2</code>. Vous pouvez sinon le t\u00e9l\u00e9charger ici</li> <li>Rendez ce fichier ex\u00e9cutable par <code>sudo chmod 777 crackme2</code></li> <li>Ex\u00e9cutez ce code et constatez les changements !</li> </ul>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/02_Architecture_von_Neumann/#conclusion","title":"Conclusion\u00b6","text":"<p>Le d\u00e9sassemblage d'un programme est une op\u00e9ration tr\u00e8s complexe et les op\u00e9rations et cha\u00eenes de caract\u00e8res qui apparaissent sont souvent incompr\u00e9hensibles (parfois volontairement, dans le cas d'obfuscation de code). N\u00e9anmoins, il est parfois possible d'agir au niveau le plus bas (le langage-machine) pour modifier un code, comme nous venons de le faire.</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/cours/","title":"3.2 Architecture Von Neumann","text":"<p>John Von Neumann (1903-1957) est un math\u00e9maticien et physicien (et bien d'autres choses) am\u00e9ricano-hongrois. Il a le premier th\u00e9oris\u00e9 l'architecture des processeurs, tels qu'ils fonctionnent encore aujourd'hui.</p>"},{"location":"T4_Architecture_materielle/4.1_Architecture_Von_Neumann/logique/","title":"3.0 Les portes logiques","text":"<p>Dans les syst\u00e8mes digitaux (syst\u00e8mes informatiques et autres automatismes num\u00e9riques) toutes les donn\u00e9es sont trait\u00e9es et enregistr\u00e9es \u00e0 partir d'\u00e9l\u00e9ments d'informations binaires. Ces informations binaires \u00e0 la mani\u00e8re des contacts \u00e9lectriques n'ont que deux \u00e9tats possibles : un contact \u00e9lectrique est ouvert ou ferm\u00e9, de m\u00eame le bit est une information \u00e9l\u00e9mentaire qui ne peut prendre que deux valeurs 0 et 1. Les op\u00e9rations logiques sont en informatique aussi courantes si pas plus que les op\u00e9rations arithm\u00e9tiques. La logique combinatoire tout comme l'arithm\u00e9tique repose sur quelques op\u00e9rations \u00e9l\u00e9mentaires. \u2022   En arithm\u00e9tique, ces op\u00e9rations sont l'addition, la soustraction, la multiplication et la division ( +, -, *, / ). Il est possible \u00e0 partir de l\u00e0 d'imaginer toutes les autres op\u00e9rations telles que les exposants, les racines, les logarithmes etc. \u2022   En logique, les op\u00e9rations fondamentales sont le ET, le OU et le NON. Nous utiliserons des signes particuliers pour repr\u00e9senter ces trois op\u00e9rations fondamentales lors d'\u00e9criture d'\u00e9quations logiques. C'est George Boole, un math\u00e9maticien britannique, qui le premier eu l'id\u00e9e de reprendre des notations alg\u00e9briques pour cr\u00e9er les bases de ce qui sera la logique informatique. Nous ferons donc de la logique bool\u00e9enne et aussi de l'alg\u00e8bre bool\u00e9enne en \u00e9crivant des \u00e9quations logiques pour exprimer les relations entre les variables logiques appel\u00e9es aussi variables bool\u00e9ennes. Cette logique a trouv\u00e9 apr\u00e8s George Boole ses premi\u00e8res applications dans les circuits \u00e9lectriques. C'est Claude Shannon, un autre p\u00e8re fondateur des th\u00e9ories \u00e0 la base de l'informatique, qui entreprit de mettre en \u00e9quation les circuits \u00e9lectriques o\u00f9 des relais \u00e9lectriques consid\u00e9r\u00e9s comme des variables logiques en agissent sur des contacts ouverts (0) ou ferm\u00e9 (1).</p> <p>La mani\u00e8re la plus simple de comprendre les fonctions logiques est de se les repr\u00e9senter par des sch\u00e9mas \u00e9lectriques qui comportent un ou plusieurs contacts et une lampe. Cette lampe s'allume \"\u00e0 condition\" que les contacts \u00e9lectriques y laissent passer le courant. C'est dans l'expression de cette condition que va intervenir la logique.</p> <p></p> <p>Le sch\u00e9ma ci-dessus traduit la condition la plus simple : La lampe s'allume si le bouton poussoir A est actionn\u00e9. Autrement dit ( S = 1) si ( A = 1) Le fonctionnement de ce circuit s'exprime par l'\u00e9quation logique S = A</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/","title":"3.3 Architecture d'un r\u00e9seau","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul> <p>Ce cours a pour but de pr\u00e9senter la constitution classique d'un r\u00e9seau, et les \u00e9quipements associ\u00e9s. La partie relative aux protocoles utilis\u00e9s lors des \u00e9changes entre deux machines est d\u00e9taill\u00e9e dans le cours sur les protocoles de communication.</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#1-premier-reseau-local","title":"1. Premier r\u00e9seau local","text":"<p>lien de t\u00e9l\u00e9chargement de Filius sous Linux</p> <p>Au sein du logiciel Filius, cr\u00e9ons le r\u00e9seau local ci-dessous :</p> <p></p> <p>Testons le <code>ping</code> de la machine <code>192.168.0.1</code>  vers la machine <code>192.168.0.3</code>.</p> R\u00e9sultat du ping <p></p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#11-la-carte-reseau-et-son-adresse-mac","title":"1.1. La carte r\u00e9seau et son adresse MAC","text":"<p>Chaque ordinateur sur le r\u00e9seau dispose d'une adresse MAC, qui une valeur unique attribu\u00e9e \u00e0 sa carte r\u00e9seau (Ethernet, Wifi, 4G, 5G, ...) lors de sa fabrication en usine.</p> <p>Cette adresse est cod\u00e9e sur 48 bits, pr\u00e9sent\u00e9s sous la forme de 6 octets en hexad\u00e9cimal. Exemple : <code>fc:aa:14:75:45:a5</code></p> <p>Les trois premiers octets correspondent au code du fabricant. Un site comme https://www.macvendorlookup.com/ vous permet de retrouver le fabricant d'une adresse MAC quelconque.</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#12-switch-hub-quelle-difference","title":"1.2. Switch, hub, quelle diff\u00e9rence ?","text":"<ul> <li>Au sein d'un hub Ethernet (de moins en moins vendus), il n'y a aucune analyse des donn\u00e9es qui transitent : il s'agit simplement d'un d\u00e9doublement des fils de cuivre (tout comme une multiprise \u00e9lectrique). L'int\u00e9gralit\u00e9 des messages est donc envoy\u00e9e \u00e0 l'int\u00e9gralit\u00e9 des ordinateurs du r\u00e9seau, m\u00eame s'ils ne sont pas concern\u00e9s.</li> </ul> <ul> <li>Au sein d'un switch Ethernet , une analyse est effectu\u00e9e sur la trame qui est \u00e0 distribuer (voir ici). Lors d'un branchement d'un nouvel ordinateur sur le switch, celui-ci r\u00e9cup\u00e8re son adresse MAC, ce qui lui permet de trier les messages et de ne les distribuer qu'au bon destinataire.</li> </ul>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#2-un-deuxieme-sous-reseau","title":"2. Un deuxi\u00e8me sous-r\u00e9seau","text":"<p>Rajoutons un deuxi\u00e8me sous-r\u00e9seau de la mani\u00e8re suivante (penser \u00e0 bien renommer les switchs).</p> <p></p> <p>Comment relier ces deux sous-r\u00e9seaux ?</p> <p>Une r\u00e9ponse pas si b\u00eate : avec un cable entre les deux switchs !</p> <p></p> <p>Testons cette hypoth\u00e8se en essayant de pinger la machine <code>192.168.1.2</code> depuis la machine <code>192.168.0.1</code>.  </p> R\u00e9sultat du ping <p> Cela ne marche pas. L'ordinateur refuse d'envoyer le ping vers la machine <code>192.168.1.2</code>. (spoil : car elle n'est pas dans son sous-r\u00e9seau)</p> <p>Temporairement, renommons la machine <code>192.168.1.2</code> en <code>192.168.0.33</code>. Testons \u00e0 nouveau le ping depuis la machine <code>192.168.0.1</code>.</p> R\u00e9sultat du ping <p> Cela marche. Les paquets sont bien achemin\u00e9s.</p> <p>Intuition : la notion de sous-r\u00e9seau n'est pas topologique (\u00abil suffit de relier les ordinateurs entre eux\u00bb) mais ob\u00e9it \u00e0 des r\u00e8gles num\u00e9riques.</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#21-notion-de-masque-de-sous-reseau","title":"2.1. Notion de masque de sous-r\u00e9seau","text":"<p>Dans Filius, lors de l'attribution de l'adresse IP \u00e0 une machine, une ligne nous permet de sp\u00e9cifier le masque de sous-r\u00e9seau (appel\u00e9 simplement \u00ab Masque \u00bb dans Filius). C'est ce masque qui va permettre de d\u00e9terminer si une machine appartient \u00e0 un sous-r\u00e9seau ou non, en fonction de son adresse IP.</p> <p></p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#211-explication-basique","title":"2.1.1 Explication basique","text":"<ul> <li>Si le masque est <code>255.255.255.0</code>, toutes les machines partageant les m\u00eames trois premiers nombres de leur adresse IP appartiendront au m\u00eame sous-r\u00e9seau. Comme ceci est le r\u00e9glage par d\u00e9faut de Filius, cela explique pourquoi  <code>192.168.0.33</code> et <code>192.168.0.1</code> sont sur le m\u00eame sous-r\u00e9seau, et pourquoi  <code>192.168.1.2</code> et <code>192.168.0.1</code> ne sont pas sur le m\u00eame sous-r\u00e9seau.</li> </ul> <p>Dans cette configuration, 256 machines peuvent donc appartenir au m\u00eame sous-r\u00e9seau (ce n'est pas tout \u00e0 fait le cas car des adresses finissant par 0 ou par 255 sont r\u00e9serv\u00e9es).</p> <ul> <li>Si le masque est <code>255.255.0.0</code>, toutes les machines partageant les m\u00eames deux premiers nombres de leur adresse IP appartiendront au m\u00eame sous-r\u00e9seau. Dans cette configuration, 65536 machines peuvent \u00eatre dans le m\u00eame sous-r\u00e9seau. (car 256^2=65536)</li> </ul> <p>Exercice</p> <ul> <li>Renommons <code>192.168.0.33</code> en <code>192.168.1.2</code> et modifions son masque en <code>255.255.0.0</code>.</li> <li>Modifions aussi le masque de <code>192.168.0.1</code> en <code>255.255.0.0</code>.</li> <li>Testons le ping de <code>192.168.0.1</code> vers <code>192.168.1.2</code>.</li> </ul> R\u00e9sultat du ping <p> Cela marche. Les deux machines appartiennent maintenant au m\u00eame sous-r\u00e9seau.</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#212-explication-avancee","title":"2.1.2 Explication avanc\u00e9e","text":"<p>Lorsqu'une machine A veut envoyer un message \u00e0 une machine B, elle doit d\u00e9terminer si cette machine :</p> <ul> <li>appartient au m\u00eame sous-r\u00e9seau : auquel cas le message est envoy\u00e9 directement via un ou plusieurs switchs.</li> <li>n'appartient pas au m\u00eame sous-r\u00e9seau : auquel cas le message doit d'abord transiter par un routeur (voir 3.)</li> </ul> <p>Quelle op\u00e9ration permet de distinguer cette appartenance \u00e0 un m\u00eame sous-r\u00e9seau ?</p> <p>Appelons <code>IP_A</code> et <code>IP_B</code> les adresses IP respectives des machines A et B. Appelons <code>M</code> le masque de sous-r\u00e9seau. Nommons <code>&amp;</code> l'op\u00e9rateur de conjonction entre nombres binaires (voir ici): </p> <p>Propri\u00e9t\u00e9 : A et B appartiennent au m\u00eame sous-r\u00e9seau \u21d4 <code>IP_A &amp; M = IP_B &amp; M</code></p> <p>Exemple : consid\u00e9rons trois machines A, B, C d'IP respectives <code>192.168.129.10</code>, <code>192.168.135.200</code> et <code>192.168.145.1</code>, configur\u00e9es avec un masque de sous-r\u00e9seau \u00e9gal \u00e0 <code>255.255.248.0</code>.  </p> machine A machine B machine C IP 192.168.129.10 192.168.135.200 192.168.145.1 M 255.255.248.0 255.255.248.0 255.255.248.0 IP &amp; M 192.168.128.0 192.168.128.0 192.168.144.0 <p>rappel des r\u00e8gles de calcul :</p> <ul> <li>pour tout octet <code>x</code>, <code>x &amp; 255 = x</code>  et <code>x &amp; 0 = 0</code>.</li> <li><code>129 &amp; 248</code> s'\u00e9crit en binaire <code>10000001 &amp; 11111000</code> qui vaut <code>10000000</code>, soit <code>128</code> en d\u00e9cimal.</li> </ul> <p>Conclusion : les machines A et B sont sous le m\u00eame sous-r\u00e9seau, mais pas la machine C.</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#213-coherence-entre-les-deux-explications","title":"2.1.3 Coh\u00e9rence entre les deux explications","text":"<p>Lorsqu'un masque de sous-r\u00e9seau est \u00e9gal \u00e0 <code>255.255.255.0</code>, l'op\u00e9ration de conjonction <code>&amp;</code> avec chaque IP ne laissera intacts que les 3 premiers octets, le dernier sera \u00e9gal \u00e0 0. Donc si deux adresses s'\u00e9crivent <code>A.B.C.X</code> et   <code>A.B.C.Y</code>, elles appartiendront forc\u00e9ment au m\u00eame sous-r\u00e9seau (typiquement, c'est le cas de <code>192.168.0.33</code> et <code>192.168.0.1</code>).</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#22-ecriture-des-masques-de-sous-reseau-notation-cidr","title":"2.2 \u00c9criture des masques de sous-r\u00e9seau : notation CIDR","text":"<p>D'apr\u00e8s ce qui pr\u00e9c\u00e8de, 2 informations sont n\u00e9cessaires pour d\u00e9terminer le sous-r\u00e9seau auquel appartient une machine : son IP et le masque de sous-r\u00e9seau.  Une convention de notation permet d'\u00e9crire simplement ces deux renseignements : la notation CIDR.</p> <p>Exemple : Une machine d'IP <code>192.168.0.33</code> avec un masque de sous-r\u00e9seau <code>255.255.255.0</code> sera d\u00e9sign\u00e9e par <code>192.168.0.33 / 24</code> en notation CIDR.</p> <p>Le suffixe <code>/ 24</code> signifie que le masque de sous-r\u00e9seau commence par  24 bits cons\u00e9cutifs de valeur 1 : le reste des bits (donc 8 bits) est \u00e0 mis \u00e0 0. Autrement dit, ce masque vaut <code>11111111.11111111.11111111.00000000</code> , soit <code>255.255.255.0</code>. De la m\u00eame mani\u00e8re, le suffixe <code>/ 16</code> donnera un masque de <code>11111111.11111111.00000000.00000000</code> , soit <code>255.255.0.0</code>. Ou encore, un suffixe <code>/ 21</code> donnera un masque de <code>11111111.11111111.11111000.00000000</code> , soit <code>255.255.248.0</code>. </p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#3-un-vrai-reseau-contenant-deux-sous-reseaux-distincts-la-necessite-dun-routeur","title":"3. Un vrai r\u00e9seau contenant deux sous-r\u00e9seaux distincts : la n\u00e9cessit\u00e9 d'un routeur","text":"<p>Notre solution initiale (relier les deux switchs par un cable pour unifier les deux sous-r\u00e9seaux) n'est pas viable \u00e0 l'\u00e9chelle d'un r\u00e9seau plan\u00e9taire.</p> <p>Pour que les machines de deux r\u00e9seaux diff\u00e9rents puissent \u00eatre connect\u00e9es, on va utiliser un dispositif \u00e9quip\u00e9 de deux cartes r\u00e9seaux, situ\u00e9 \u00e0 cheval entre les deux sous-r\u00e9seaux. Ce \u00e9quipement de r\u00e9seau est appel\u00e9 routeur ou passerelle.</p> <p></p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#31-principe-de-fonctionnement","title":"3.1 Principe de fonctionnement","text":"<p>Imaginons que la machine <code>192.168.0.1 / 24</code> veuille communiquer avec la machine  <code>172.16.52.3 / 24</code>. L'observation du masque de sous-r\u00e9seau de la machine <code>192.168.0.1 / 24</code> nous apprend qu'elle ne peut communiquer qu'avec les adresses de la forme <code>192.168.0.X / 24</code>, o\u00f9 <code>X</code> est un nombre entre 0 et 255. </p> <p>Les 3 \u00e9tapes du routage :</p> <ul> <li>Lorsque qu'une machine A veut envoyer un message \u00e0 une machine B, elle va tout d'abord v\u00e9rifier si cette machine appartient \u00e0 son r\u00e9seau local. si c'est le cas, le message est envoy\u00e9 par l'interm\u00e9diaire du switch qui relie les deux machines.</li> <li>Si la machine B n'est pas trouv\u00e9e sur le r\u00e9seau local de la machine A, le message va \u00eatre achemin\u00e9 vers le routeur, par l'interm\u00e9diaire de son adresse de passerelle (qui est bien une adresse appartenant au sous-r\u00e9seau de A).</li> <li>De l\u00e0, le routeur va regarder si la machine B appartient au deuxi\u00e8me sous-r\u00e9seau auquel il est connect\u00e9. Si c'est le cas, le message est distribu\u00e9, sinon, le routeur va donner le message \u00e0 un autre routeur auquel il est connect\u00e9 et va le charger de distribuer ce message : c'est le proc\u00e9d\u00e9 (complexe) de routage, qui sera vu en classe de Terminale.</li> </ul> <p>Dans notre exemple, l'adresse <code>172.16.52.3</code> n'est pas dans le sous-r\u00e9seau de <code>192.168.0.1</code>. Le message va donc transiter par le routeur. </p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#32-illustration-avec-filius","title":"3.2 Illustration avec Filius","text":"<ul> <li> <p>Rajoutons un routeur entre le SwitchA et le SwitchB. </p> </li> <li> <p>Configuration du routeur :      L'interface reli\u00e9e au Switch A doit avoir une adresse du sous-r\u00e9seau A. On donne souvent une adresse finissant par <code>254</code>, qui est en quelque sorte la derni\u00e8re adresse du r\u00e9seau (en effet l'adresse en <code>255</code> est appel\u00e9e adresse de broadcast, utilis\u00e9e pour pinger en une seule fois l'int\u00e9gralit\u00e9 d'un sous-r\u00e9seau).      On donne donc l'adresse <code>192.168.0.254</code> pour l'interface reli\u00e9e au Switch A, et <code>192.168.1.254</code> pour l'interface reli\u00e9e au Switch B.       Dans l'onglet g\u00e9n\u00e9ral, s\u00e9lectionner \u00ab Routage automatique \u00bb.      Ainsi configur\u00e9 notre routeur peut jouer le r\u00f4le de passerelle entre les deux sous-r\u00e9seaux.</p> </li> </ul>  Test du ping entre <code>192.168.0.1</code> et <code>192.168.1.2</code> <p> Cela ne marche pas. La carte r\u00e9seau refuse d'envoyer les paquets car elle ne sait pas o\u00f9 les envoyer.</p> <p>Pourquoi cet \u00e9chec ? Parce que nous devons dire \u00e0 chaque machine qu'une passerelle est maintenant disponible pour pouvoir sortir de son propre sous-r\u00e9seau. Il faut donc aller sur la machine <code>192.168.0.1</code> et lui donner l'adresse de sa passerelle, qui est <code>192.168.0.254</code>.</p> <p></p> <p>Attention, il faut faire de m\u00eame pour <code>192.168.1.2</code> (avec la bonne passerelle...) Testons \u00e0 nouveau le ping... Cette fois cela marche.</p> <p>Plus int\u00e9ressant : effectuons un <code>traceroute</code> entre  <code>192.168.0.1</code> et <code>192.168.1.2</code>.</p> <p></p> <p>On y aper\u00e7oit que la machine <code>192.168.1.2</code> est atteignable en deux sauts depuis <code>192.168.0.1</code>, en passant par la passerelle <code>192.168.0.254</code></p> <p>Cas d'un r\u00e9seau domestique </p> <p>Chez vous, la box de votre op\u00e9rateur joue simultan\u00e9ment le r\u00f4le de switch et de routeur :</p> <ul> <li>switch car elle r\u00e9partit la connexion entre les diff\u00e9rents dispositifs (ordinateurs branch\u00e9s en ethernet, smartphone en wifi, tv connect\u00e9e...)</li> <li>routeur car elle fait le lien entre ce sous-r\u00e9seau domestique (les appareils de votre maison) et le r\u00e9seau internet.</li> </ul> <p></p> <p>L'image ci-dessous pr\u00e9sente le r\u00e9sultat de la commande <code>ipconfig</code> sous Windows. On y retrouve l'adresse IP locale <code>192.168.9.103</code>, le masque de sous-r\u00e9seau <code>255.255.255.0</code> et l'adresse de la passerelle <code>192.168.9.1</code>. </p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#33-annexe-rajout-dun-serveur-dns","title":"3.3 Annexe : rajout d'un serveur DNS","text":""},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#331-rajout-dun-serveur-web","title":"3.3.1 Rajout d'un serveur web","text":"<ul> <li> <p>Connectons un ordinateur au SwitchB, sur l'adresse <code>192.168.1.30</code> et installons dessus un Serveur web et d\u00e9marrons-le.  </p> </li> <li> <p>Sur la machine <code>192.168.0.1</code>, rajoutons un Navigateur Web. En tapant dans la barre d'adresse l'adresse IP du Serveur web, la page d'accueil de Filius s'affiche. </p> </li> </ul> <p>Lors d'une utilisation classique d'un navigateur web, c'est une url m\u00e9morisable qui s'affiche, et non une adresse IP : on retient en effet plus facilement <code>https://www.google.com/</code> que <code>http://216.58.213.131</code>, qui renvoient pourtant \u00e0 la m\u00eame adresse.  La machine qui assure ce r\u00f4le d'annuaire entre les serveurs web et leur adresse IP s'appelle un serveur DNS. Pour pouvoir indexer la totalit\u00e9 des sites internet, son r\u00f4le est structur\u00e9 de mani\u00e8re hi\u00e9rarchique. Vous trouverez des d\u00e9tails ici</p>"},{"location":"T4_Architecture_materielle/4.2_Architecture_reseau/cours/#331-rajout-dun-serveur-dns","title":"3.3.1 Rajout d'un serveur DNS","text":"<ul> <li>Rajoutons un serveur DNS minimal, qui n'aura dans son annuaire d'un seul site. Il faut pour cela raccorder une nouvelle machine (mais une machine d\u00e9j\u00e0 sur le r\u00e9seau aurait tr\u00e8s bien pu jouer ce r\u00f4le), et installer dessus un serveur DNS. </li> <li> <p>Sur ce serveur DNS, associons l'adresse <code>http://www.vivelansi.fr</code>  \u00e0 l'adresse IP <code>192.168.1.30</code>. </p> </li> <li> <p>De retour sur notre machine <code>192.168.0.1</code>, sp\u00e9cifions maintenant l'adresse du serveur DNS : </p> </li> <li> <p>Depuis le navigateur web de la machine <code>192.168.0.1</code>, le site <code>http://www.vivelansi.fr</code> est maintenant accessible. </p> </li> </ul> <p></p> <p>Bibliographie</p> <ul> <li>Num\u00e9rique et Sciences Informatiques, 1re, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Cours d'OpenClassrooms : <ul> <li>https://openclassrooms.com/fr/courses/857447-apprenez-le-fonctionnement-des-reseaux-tcp-ip/854659-le-routage</li> <li>https://openclassrooms.com/fr/courses/1561696-les-reseaux-de-zero/3607286-ladressage-cidr</li> </ul> </li> </ul>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/","title":"3.4 Protocoles de communication dans un r\u00e9seau","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#i-modele-osi-modele-internet","title":"I. Mod\u00e8le OSI, mod\u00e8le Internet","text":"<p>Les bits transmis d'un ordinateur \u00e0 un autre contiennent, en plus des donn\u00e9es utiles (le mot \u00abbonjour\u00bb dans un email), une multitude de donn\u00e9es (tout aussi utiles) qui vont aider \u00e0 l'acheminement de ces bits au bon endroit, puis au bon ordinateur, puis au bon logiciel.  Les diff\u00e9rents protocoles qui r\u00e9gissent cette transmission sont regroup\u00e9s dans ce qui est appel\u00e9 un mod\u00e8le. Deux mod\u00e8les synth\u00e9tisent ces protocoles :</p> <ul> <li>le mod\u00e8le Internet (ou mod\u00e8le TCP/IP, 1974), organis\u00e9 en 4 couches : liaison, r\u00e9seau, transport, application.</li> <li>le mod\u00e8le OSI (Open Systems Interconnection, 1984), organis\u00e9 en 7 couches : physique, liaison, r\u00e9seau, transport, session, pr\u00e9sentation,application.</li> </ul> <p>Ces deux mod\u00e8les co\u00efncident suivant le sch\u00e9ma ci-dessus. Ce sont des mod\u00e8les th\u00e9oriques et d'une certaine rigidit\u00e9. Leur utilisation dans la pratique est parfois plus floue, avec des protocoles \u00e0 cheval sur plusieurs couches. Dans la suite de ce cours, nous \u00e9voquerons les couches par leur num\u00e9ro dans le mod\u00e8le OSI.</p> <p></p> <p>Lors de son \u00e9mission, un message va subir successivement toutes les transformations effectu\u00e9es par chaque couche, depuis sa cr\u00e9ation (couche 7) jusqu'\u00e0 sa transmission physique (couche 1).  </p> <p>Lorsque ce m\u00eame message sera r\u00e9ceptionn\u00e9, les transformations seront effectu\u00e9es dans l'ordre inverse, jusqu'\u00e0 la pr\u00e9sentation du message au destinataire.</p> <ul> <li> <p>couches 7-6-5  \u2014 couches application-pr\u00e9sentation-session :  Ces couches (r\u00e9unies dans le mod\u00e8le Internet en une couche unique \u00abapplication\u00bb ) regroupent les protocoles n\u00e9cessaires \u00e0 la bonne mise en forme d'un message (au sens large) avant sa transmission. Ces protocoles peuvent \u00eatre de nature tr\u00e8s diff\u00e9rente : protocole HTTP pour la transmisson de pages web, protocole FTP pour le transfert de fichiers, protocoles POP ou IMAP pour le courrier \u00e9lectronique... </p> </li> <li> <p>couche 4 \u2014 couche transport :  Le protocole majeur de cette couche est le protocole TCP :</p> <ul> <li>il s'assure par SYN-ACK que l'\u00e9metteur et le r\u00e9cepteur sont pr\u00eats \u00e0 \u00e9changer des messages. </li> <li>il d\u00e9coupe en segments num\u00e9rot\u00e9s le message \u00e0 transmettre (c\u00f4t\u00e9 \u00e9metteur) ou bien recompose le message total en remettant les segments dans l'ordre (c\u00f4t\u00e9 r\u00e9cepteur).   Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des segments. </li> </ul> </li> <li> <p>couche 3 \u2014 couche r\u00e9seau : C'est la couche o\u00f9 chaque segment num\u00e9rot\u00e9 est encapsul\u00e9 dans un paquet qui, suivant le protocole IP, va contenir son adresse source et son adresse de destination. C'est \u00e0 ce niveau que se d\u00e9cide si le message doit rester dans le r\u00e9seau local ou \u00eatre envoy\u00e9 sur un autre r\u00e9seau via la passerelle du routeur. Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des paquets. </p> </li> <li> <p>couche 2 \u2014 couche liaison : C'est l'encapsulation finale du message. Suivant le protocole Ethernet, les informations sont transmises d'une carte r\u00e9seau \u00e0 une autre, gr\u00e2ce \u00e0 leur adresse MAC (Media Access Controler). Les \u00e9l\u00e9ments \u00e9chang\u00e9s avec la couche inf\u00e9rieure sont des trames. </p> </li> <li> <p>couche 1 \u2014 couche physique : C'est la couche o\u00f9 le message est transmis physiquement d'un point \u00e0 un autre. Par signal lumineux (fibre optique), par ondes (wifi), par courant \u00e9lectrique (Ethernet)... Les \u00e9l\u00e9ments transmis sont les bits. </p> </li> </ul> <p>Lors de son parcours, une trame peut \u00eatre partiellement d\u00e9capsul\u00e9e et remonter \u00e0 la couche 3, avant de redescendre et de continuer son chemin. C'est le cas notamment lors du passage dans un routeur. Mais jamais, lors de son acheminement, le contenu r\u00e9el du message n'est ouvert : les paquets transmis sont achemin\u00e9s de mani\u00e8re identique, qu'ils contiennent les \u00e9l\u00e9ments constitutifs d'une vid\u00e9o YouTube ou d'un email \u00e0 votre cousin. Ce principe fondateur, actuellement menac\u00e9 par certains acteurs politiques et industriels, est connu sous l'expression \u00abla neutralit\u00e9 du net\u00bb.</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#ii-observation-des-trames-avec-filius","title":"II. Observation des trames avec Filius","text":""},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#1-ping-a-travers-un-switch","title":"1. Ping \u00e0 travers un switch","text":"<p>Vous pouvez t\u00e9l\u00e9charger le fichier ping_switch.fls.</p> <ul> <li>Relions une machine <code>192.168.0.10</code> d'adresse MAC <code>BC:81:81:42:9C:31</code>  \u00e0 une machine <code>192.168.0.11</code> d'adresse MAC <code>2A:AB:AC:27:D6:A7</code> \u00e0 travers un switch.  </li> </ul> <p> </p> <ul> <li>Observons la table SAT de notre switch : elle est vide, car aucune machine n'a encore cherch\u00e9 \u00e0 communiquer.  </li> </ul> <p> </p> <ul> <li>Lan\u00e7ons un ping depuis <code>192.168.0.10</code> vers <code>192.168.0.11</code> et observons les donn\u00e9es \u00e9chang\u00e9es :   </li> </ul> <p> </p> <ul> <li>Observons de plus pr\u00e8s la premi\u00e8re ligne de donn\u00e9es \u00e9chang\u00e9es.  </li> </ul> <p> </p> <p>Cette premi\u00e8re ligne est une requ\u00eate ARP. ARP est un protocole qui s'interface entre la couche 3 / r\u00e9seau (appel\u00e9e dans la capture d'\u00e9cran Internet)  et la couche 2 / liaison (appel\u00e9e dans la capture d'\u00e9cran R\u00e9seau). Comme indiqu\u00e9 dans le commentaire, elle consiste \u00e0 un appel \u00e0 tout le r\u00e9seau : \"Est-ce que quelqu'un ici poss\u00e8de l'IP <code>192.168.0.11</code> ?</p> <p>Message 1 : \u00ab Qui poss\u00e8de l'IP <code>192.168.0.11</code> ? \u00bb</p> <p>Il faut comprendre \u00e0 cette \u00e9tape que l'adresse IP est totalement inutile pour r\u00e9p\u00e9rer un ordinateur dans un sous-r\u00e9seau. Ce sont les adresses MAC qui permettent de se rep\u00e9rer dans un sous-r\u00e9seau. Les adresses IP, elles, permettront \u00e9ventuellement d'acheminer le message jusqu'au bon sous-r\u00e9seau (elles n'int\u00e9ressent donc que les routeurs).</p> <p>Revenons \u00e0 notre ping vers <code>192.168.0.11</code>.</p> <p>La commande <code>arp -a</code> effectu\u00e9e dans un terminal de la machine <code>192.168.0.10</code> nous permet de voir qu'elle ne conna\u00eet encore personne dans son sous-r\u00e9seau. La table de correspondance IP \u2b80 MAC ne contient que l'adresse de broadcast <code>255.255.255.255</code>, qui permet d'envoyer un message \u00e0 tout le r\u00e9seau. </p> <p>Constatant qu'elle ne sait pas quelle est l'adresse MAC de <code>192.168.0.11</code>, la machine <code>192.168.0.10</code> commence donc par envoyer un message \u00e0 tout le sous-r\u00e9seau, par l'adresse MAC de broadcast <code>FF:FF:FF:FF:FF:FF</code>. Le switch va lui aussi lui aussi relayer ce message \u00e0 tous les \u00e9quipements qui lui sont connect\u00e9s (dans notre cas, un seul ordinateur) </p> <p>Message 2 : \u00ab Moi ! \u00bb </p> <p>La machine <code>192.168.0.11</code> s'est reconnu dans le message de broadcast de la machine <code>192.168.0.10</code>. Elle lui r\u00e9pond pour lui donner son adresse MAC.  </p> <p> </p> <p>\u00c0 partir de ce moment, la machine <code>192.168.0.10</code> sait comment communiquer avec <code>192.168.0.11</code>. Elle l'\u00e9crit dans sa table <code>arp</code>, afin de ne plus avoir \u00e0 \u00e9mettre le message n\u00b01 :  </p> <p> </p> <p>Le switch, qui a vu passer sur ses ports 0 et 1 des messages venant des cartes MAC <code>BC:81:81:42:9C:31</code>  et <code>2A:AB:AC:27:D6:A7</code>, peut mettre \u00e0 jour sa table SAT :  </p> <p> </p> <p>Par la suite, il saura sur quel port rediriger les messages destin\u00e9s \u00e0 ces deux adresses MAC. Un switch est un \u00e9quipement de r\u00e9seau de la couche 2 du mod\u00e8le OSI, il ne sait pas lire les adresses IP : il ne travaille qu'avec les adresses MAC.</p> <p>Message 3 : le ping est envoy\u00e9</p> <p> </p> <p>Sch\u00e9matisons cette trame Ethernet (couche 2 du mod\u00e8le OSI) :</p> <p> </p> <p>Message 4 : le pong est retourn\u00e9</p> <p> </p> <p> </p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#2-ping-a-travers-un-routeur","title":"2. Ping \u00e0 travers un routeur","text":"<p>Vous pouvez t\u00e9l\u00e9charger le fichier ping_routeur.fls.</p> <p> </p> <p>L'objectif est d'observer les diff\u00e9rentes trames lors d'un ping entre :</p> <ul> <li>la machine <code>192.168.0.1 / 24</code> (adresse MAC <code>F9:E1:D6:0B:29:03</code> ) et</li> <li>la machine <code>192.168.1.1 / 24</code> (adresse MAC <code>D3:79:96:B8:5C:A4</code> )</li> </ul> <p>Le routeur est configur\u00e9 ainsi :</p> <ul> <li>interface sur le r\u00e9seau A :<ul> <li>IP : <code>192.168.0.254</code> </li> <li>MAC : <code>77:C2:22:C9:5C:E7</code> </li> </ul> </li> <li>interface sur le r\u00e9seau B :<ul> <li>IP : <code>192.168.1.254</code> </li> <li>MAC : <code>66:E5:4E:7D:0B:B0</code> </li> </ul> </li> </ul> <p>\u00c9tape 0 : le routeur signale sa pr\u00e9sence</p> <p>Lors de l'observation des messages re\u00e7us ou \u00e9mis par la machine <code>192.168.0.1</code>, on peut \u00eatre intrigu\u00e9 par ce tout premier message re\u00e7u, \u00e9mis par le routeur : </p> <p> </p> <p>On peut y distinguer les 4 couches du mod\u00e8le Internet. Le routeur, par ce message distribu\u00e9 \u00e0 tous les \u00e9l\u00e9ments du sous-r\u00e9seau A (il envoie un message \u00e9quivalent sur son sous-r\u00e9seau B), d\u00e9clare sa pr\u00e9sence, et le fait qu'il poss\u00e8de deux interfaces, une pour chaque r\u00e9seau.  Il se positionne ainsi comme une passerelle : \u00abc'est par moi qu'il faudra passer si vous voulez sortir de votre sous-r\u00e9seau\u00bb.  Dans cette trame envoy\u00e9e figure son adresse MAC, de sorte que tous les membres de son sous-r\u00e9seau pourront donc communiquer avec lui.</p> <p>\u00c9tape 1 : de <code>192.168.0.1</code> vers le routeur</p> <p>La machine <code>192.168.0.1 / 24</code> calcule que la machine <code>192.168.1.1 / 24</code> avec laquelle elle veut communiquer n'est pas dans son sous-r\u00e9seau. Elle va donc envoyer son message \u00e0 sa passerelle, qui est l'adresse du routeur dans son sous-r\u00e9seau. </p> <p>Cette premi\u00e8re trame est :</p> <p> </p> <p>\u00c9tape 2 : le routeur d\u00e9capsule la trame</p> <p>Le routeur est un \u00e9quipement de r\u00e9seau de couche 3 (couche r\u00e9seau). Il doit observer le contenu du paquet IP (sans remonter jusqu'au contenu du message) pour savoir, suivant le proc\u00e9d\u00e9 de routage (voir cours de Terminale), o\u00f9 acheminer ce paquet.</p> <p>Dans notre cas, l'adresse IP <code>192.168.1.1</code>de destination lui est accessible : elle fait partie de son sous-r\u00e9seau B.</p> <p>Le routeur va modifier la valeur du TTL (Time To Live), en la d\u00e9cr\u00e9mentant de 1. Si, apr\u00e8s de multiples routages, cette valeur devenait \u00e9gale \u00e0 0, ce paquet serait d\u00e9truit. Ceci a pour but d'\u00e9viter l'encombrement des r\u00e9seaux avec des paquets ne trouvant pas leur destination.</p> NAT : translation d'adresse <p>Dans notre cas, le routeur va laisser intacte l'adresse IP Source. Ce n'est pas toujours le cas. Dans le cas classique de la box qui relie votre domicile \u00e0 internet, le routeur contenu dans celle-ci va remplacer l'adresse locale de votre ordinateur ou smartphone (ex <code>192.168.0.26</code>) par son IP publique (celle apparaissant sur whatsmyip.com, par exemple). Elle effectue ce qu'on appelle une translation d'adresse (NAT).  Pourquoi ? Parce que sinon la r\u00e9ponse du serveur distant que vous interrogez serait envoy\u00e9e sur une adresse locale (votre adresse <code>192.168.0.26</code>), qui est introuvable depuis un r\u00e9seau ext\u00e9rieur. Il faut donc remplacer toutes les adresses locales par l'IP publique de votre box. Pour \u00e9viter que la r\u00e9ponse du serveur web que vous avez interrog\u00e9 ne soit affich\u00e9e sur l'ordinateur de vos parents, le routeur affecte des ports diff\u00e9rents \u00e0 chaque machine de son sous-r\u00e9seau. Ce port est inclus dans le message transmis au serveur, et il l'est aussi dans sa r\u00e9ponse : le routeur peut donc rediriger le trafic vers la bonne machine du sous-r\u00e9seau.</p> <p>Le routeur va r\u00e9-encapsuler le paquet IP modifi\u00e9, et cr\u00e9er une nouvelle trame Ethernet en modifiant :</p> <ul> <li>l'adresse MAC source : il va mettre l'adresse MAC de son interface dans le sous-r\u00e9seau B.</li> <li>l'adresse MAC de destination : il va mettre l'adresse MAC de <code>192.168.1.1</code> (qu'il aura peut-\u00eatre r\u00e9cup\u00e9r\u00e9e au pr\u00e9alable par le protocole ARP)</li> </ul> <p>Cette deuxi\u00e8me trame est donc :</p> <p> </p> <p>On peut observer dans Filius cette trame, en se positionnant sur l'interface <code>192.168.1.254</code> du routeur, ou sur <code>192.168.1.1</code> :</p> <p> </p> <p>En suivant le m\u00eame principe, la machine <code>192.168.1.1</code> pourra envoyer son pong.</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#iii-protocole-du-bit-alterne","title":"III. Protocole du bit altern\u00e9","text":"<p>Ce protocole est un exemple simple de fiabilisation du transfert de donn\u00e9es. </p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#1-contexte","title":"1. Contexte","text":"<ul> <li>Alice veut envoyer \u00e0 Bob un message M, qu'elle a pr\u00e9d\u00e9coup\u00e9 en sous-messages M0, M1, M2,...</li> <li>Alice envoie ses sous-messages \u00e0 une cadence \u0394t fix\u00e9e (en pratique, les sous-messages partent quand leur acquittement a \u00e9t\u00e9 re\u00e7u ou qu'on a attendu celui-ci trop longtemps : on parle alors de timeout)</li> </ul>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#2-situation-ideale","title":"2. Situation id\u00e9ale","text":"<p>Dans cette situation, les sous-messages arrivent tous \u00e0 destination dans le bon ordre. La transmission est correcte.</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#3-situation-reelle","title":"3. Situation r\u00e9elle","text":"<p>Mais parfois, les choses ne se passent pas toujours aussi bien. Car si on ma\u00eetrise parfaitement le timing de l'envoi des sous-messages d'Alice, on ne sait pas combien de temps vont mettre ces sous-messages pour arriver, ni m\u00eame (attention je vais passer dans un tunnel) s'ils ne vont pas \u00eatre d\u00e9truits en route.</p> <p> </p> <p>Le sous-message M0 est arriv\u00e9 apr\u00e8s le M1, le message M2 n'est jamais arriv\u00e9...</p> <p>Que faire ?</p> <p>\u00c9cartons l'id\u00e9e de num\u00e9roter les sous-messages, afin que Bob puisse remettre dans l'ordre les messages arriv\u00e9s, ou m\u00eame redemander sp\u00e9cifiquement des sous-messages perdus. C'est ce que r\u00e9alise le protocole TCP (couche 4 \u2014 transport), c'est tr\u00e8s efficace, mais cher en ressources. Essayons de trouver une solution plus basique.</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#3-solution-naive","title":"3. Solution na\u00efve...","text":"<p>Pourquoi ne pas demander \u00e0 Bob d'envoyer un signal pour dire \u00e0 Alice qu'il vient bien de recevoir son sous-message ? Nous appelerons ce signal ACK (comme acknowledgement, traduisible par \u00abaccus\u00e9 de r\u00e9ception\u00bb). Ce signal ACK permettra \u00e0 Alice de renvoyer un message qu'elle consid\u00e9rera comme perdu :</p> <p> </p> <p>N'ayant pas re\u00e7u le ACK cons\u00e9cutif \u00e0 son message M1, Alice suppose (avec raison) que ce message n'est pas parvenu jusqu'\u00e0 Bob, et donc renvoie le message M1.</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#4-mais-peu-efficace","title":"4. Mais peu efficace...","text":"<p>Le deuxi\u00e8me ACK de Bob a mis trop de temps pour arriver (ou s'est perdu en route) et donc Alice a suppos\u00e9 que son sous-message M1 n'\u00e9tait pas arriv\u00e9. Elle l'a donc renvoy\u00e9, et Bob se retrouve avec deux fois le sous-message M1. La transmission est incorrecte.  En faisant transiter un message entre Bob et Alice, nous multiplions par 2 la probabilit\u00e9 que des probl\u00e8mes techniques de transmission interviennent. Et pour l'instant rien ne nous permet de les d\u00e9tecter.</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#5-bob-prend-le-controle","title":"5. Bob prend le contr\u00f4le","text":"<p>Bob va maintenant int\u00e9grer une m\u00e9thode de validation du sous-message re\u00e7u. Il pourra d\u00e9cider de le garder ou de l'\u00e9carter. Le but est d'\u00e9viter les doublons.</p> <p>Pour r\u00e9aliser ceci, Alice va rajouter \u00e0 chacun de ses sous-messages un bit de contr\u00f4le, que nous appelerons FLAG (drapeau). Au d\u00e9part, ce FLAG vaut 0.  Quand Bob re\u00e7oit un FLAG, il renvoie un ACK \u00e9gal au FLAG re\u00e7u.</p> <p>Alice va attendre ce ACK contenant le m\u00eame bit que son dernier FLAG envoy\u00e9 :</p> <ul> <li>tant qu'elle ne l'aura pas re\u00e7u, elle continuera \u00e0 envoyer le m\u00eame sous-message, avec le m\u00eame FLAG.</li> <li>d\u00e8s qu'elle l'a re\u00e7u, elle peut envoyer un nouveau sous-message en inversant (\u00abalternant\u00bb) le bit de son dernier FLAG (d'o\u00f9 le nom de ce protocole).</li> </ul> <p>Bob, de son c\u00f4t\u00e9, va contr\u00f4ler la validit\u00e9 de ce qu'il re\u00e7oit : il ne gardera que les sous-messages dont le FLAG est \u00e9gal \u00e0 l'inverse de son dernier ACK. C'est cette m\u00e9thode qui lui permettra d'\u00e9carter les doublons.</p> <p>Observons ce protocole dans plusieurs cas :</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#51-cas-ou-le-sous-message-est-perdu","title":"5.1 Cas o\u00f9 le sous-message est perdu","text":""},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#52-cas-ou-le-ack-est-perdu","title":"5.2 Cas o\u00f9 le ACK  est perdu","text":"<p>Le protocole a bien d\u00e9tect\u00e9 le doublon du sous-message M1.</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#53-cas-ou-un-sous-message-est-en-retard","title":"5.3 Cas o\u00f9 un sous-message est en retard","text":"<p>Le protocole a bien d\u00e9tect\u00e9 le doublon du sous-message M1... mais que se passerait-il si notre premier sous-message M1 \u00e9tait encore plus en retard ?</p>"},{"location":"T4_Architecture_materielle/4.3_Protocoles_de_communication/cours/#6-conclusion","title":"6. Conclusion","text":"<p>Le protocole du bit altern\u00e9 a longtemps \u00e9t\u00e9 utilis\u00e9 au sein de la couche 2 du mod\u00e8le OSI (distribution des trames Ethernet). Simple et l\u00e9ger, il peut toutefois \u00eatre facilement mis en d\u00e9faut, ce qui explique qu'il ait \u00e9t\u00e9 remplac\u00e9 par des protocoles plus performants.</p> <p></p> <p>Bibliographie - Num\u00e9rique et Sciences Informatiques, 1re, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. - Pr\u00e9pabac NSI 1\u00e8re, C.ADOBET, G.CONNAN, G. ROZSAVOLGYI, L.SIGNAC, \u00e9ditions Hatier.</p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/","title":"4.4 D\u00e9couverte des Syst\u00e8mes d'exploitation (SE ou OS pour Op\u00e9rating Systems)","text":"<p>Cr\u00e9dits</p> <ul> <li>http://hmalherbe.fr</li> <li>Christophe B\u00e9asse</li> <li>David Roche</li> </ul> <p></p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#1-introduction","title":"1. Introduction","text":"<p>Sur un ordinateur, un utilisateur interagit avec des programmes (jeux, traitement de texte, navigateur Web ...). Ces programmes qui fonctionnent en m\u00eame temps, ont besoins d'utiliser les ressources de la machine pour effectuer leur t\u00e2ches : lire  ou sauvegarder des fichiers \u00e0 diff\u00e9rents endroits (disque dur, cl\u00e9 USB,...), afficher des images \u00e0 l'\u00e9cran, r\u00e9cup\u00e9rer des caract\u00e8res saisis au clavier, r\u00e9cup\u00e9rer la positions de la souris, g\u00e9rer un clic,...</p> <p></p> <p>Un syst\u00e8me d'exploitation est un ensemble de programmes qui est charg\u00e9 au d\u00e9marrage de l\u2019ordinateur et qui ensuite tourne en permanence. C'est lui qui permet de g\u00e9rer les ressources mat\u00e9rielles et logicielles d'un ordinateur. Les OS les plus r\u00e9pandus sont Windows, Mac OS, GNU/Linux (qui comporte diff\u00e9rentes distributions comme Ubuntu, Debian, Fedora pour les ordinateurs mais aussi Android ou iOsS pour les mobiles).</p> <p></p> <p>Les OS sont des syst\u00e8mes libres ou propri\u00e9taires. Outre la gratuit\u00e9 ou non, les diff\u00e9rences sont notables. Un syst\u00e8me libre comme GNU/Linux favorise la possibilit\u00e9 de g\u00e9rer la machine comme on l'entend. La plupart des appareils vendus sur le march\u00e9 sont \u00e9quip\u00e9s d'un syst\u00e8me d'exploitation propri\u00e9taire (qui nous est vendu avec !)   Les r\u00f4les principaux du syst\u00e8me d\u2019exploitation sont les suivants :  Fournir une \u00abinterface\u00bb entre l'ordinateur et l'utilisateur pour permettre \u00e0 ce dernier de donner des ordres \u00e0 la machine (par exemple : lire ou \u00e9crire des informations dans la m\u00e9moire, lancer une impression...) ou pour lui signaler les erreurs d'ex\u00e9cution ; cette interface prend soit la forme d'un langage de commande (comme \u00abMS-DOS\u00bb, Shell) soit la forme d'objets graphiques \u00e0 manipuler (fen\u00eatres, menus...) ;   G\u00e9rer les \u00abressources\u00bb de l'ordinateur, \u00e0 savoir ses m\u00e9moires, son microprocesseur et ses p\u00e9riph\u00e9riques : les syst\u00e8mes d'exploitation actuels, en effet, sont \u00abmultit\u00e2ches\u00bb ; cela signifie qu'ils permettent \u00e0 plusieurs programmes de s'ex\u00e9cuter en m\u00eame temps, et se chargent de r\u00e9partir l'occupation des ressources utilis\u00e9es par chacun d'eux (par exemple si deux programmes P1 et P2 sont lanc\u00e9s en m\u00eame temps, le syst\u00e8me d'exploitation permettra \u00e0 un petit bout de P1 de s'ex\u00e9cuter, puis laissera la place \u00e0 un petit bout de P2, puis de nouveau \u00e0 un petit bout de P1, etc., de sorte que l'utilisateur aura l'impression que P1 et P2 sont ex\u00e9cut\u00e9s en parall\u00e8le, alors que le processeur est toujours unique et s\u00e9quentiel).  \u00catre ind\u00e9pendant du mat\u00e9riel : masquer les particularit\u00e9s de la machine en substituant aux ressources physiques des abstractions (par exemple, la notion de fichier, est une notion abstraite, ind\u00e9pendante de la nature du support sur lequel les donn\u00e9es de ce fichier sont r\u00e9ellement stock\u00e9es).  Contr\u00f4ler les usagers en leur donnant des droits diff\u00e9rents selon leur statut (associ\u00e9s par exemple \u00e0 diff\u00e9rents mots de passe). </p> <p>Ressources</p> <p>Cookie Connect\u00e9 : L'OS expliqu\u00e9 en 3 minutes Histoire des syst\u00e8mes d'exploitation (vid\u00e9o) Histoire d'UNIX (vid\u00e9o) </p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#2-le-travail-en-ligne-de-commandes","title":"2. Le travail en ligne de commandes","text":"<p>\u00c0 la \"pr\u00e9histoire\" des syst\u00e8mes d'exploitation, ces derniers \u00e9taient d\u00e9pourvus d'interface graphique, toutes les interactions \"syst\u00e8me d'exploitation - utilisateur\" se faisaient par l'interm\u00e9diaire de \"lignes de commandes\": suites de caract\u00e8res, souvent \u00e9sot\u00e9riques, saisies par l'utilisateur. </p> <p> Dennis RITCHIE regarde Ken THOMPSON taper sur un terminal Teletype 33 reli\u00e9 au PDP-11/20 juste en face. Nous sommes en 1972 et ils viennent de mettre au point le syst\u00e8me d'exploitation UNIX  Il peut para\u00eetre surprenant de pr\u00e9senter des commandes en mode texte alors que la plupart des syst\u00e8mes d'exploitation modernes disposent d'une interface graphique conviviale et accessible \u00e0 tous. Pourtant, ma\u00eetriser ces commandes permet de disposer d'outils puissants de configuration et de gestion de sa machine. La possibilit\u00e9 d'utiliser ces commandes dans des scripts syst\u00e8mes (ce sont des programmes) va permettre d'automatiser de mani\u00e8re \u00e9l\u00e9gante et efficace un certain nombre de t\u00e2ches. De plus, la prise de contr\u00f4le \u00e0 distance d'une machine par l'interm\u00e9diaire des lignes de commandes se retrouve sur de nombreux syst\u00e8mes embarqu\u00e9s, les routeurs de l'internet, etc...</p> <p>C'est donc un outil indispensable \u00e0 ma\u00eetriser pour tout administrateur syst\u00e8me qui se respecte   Ma\u00eetriser ces instructions demande un temps r\u00e9ellement cons\u00e9quent, de l\u2019ordre d\u2019une ann\u00e9e de travail \u00e0 temps plein sous shell. Par contre, une fois les commandes ma\u00eetris\u00e9es, le gain de temps et de possibilit\u00e9 de r\u00e9alisation est important. Pour saisir des lignes de commandes, nous allons utiliser une console ou terminal : c'est l'invite de commande de Windows (cmd) ou le shell de Linux</p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#21-linux","title":"2.1 Linux","text":"<p>Linux est un OS open-source et libre, il est souvent cit\u00e9 comme \u00e9tant un syst\u00e8me d'exploitation alternatif \u00e0 Windows. Mais en fait Linux est avant tout un noyau de syst\u00e8me, c\u2019est pour \u00e7a qu\u2019on parle d\u2019ailleurs de \u201cLinux kernel\u201d. Le noyau d'un syst\u00e8me est l'ensemble des programmes (d\u00e9velopp\u00e9s essentiellement en langage C pour Linux) qui permettent de d\u00e9marrer la machine, d'assurer la liaison avec le mat\u00e9riel (souris, carte graphique , carte r\u00e9seau,...) et de permettre l'ex\u00e9cution des logiciels. Ce sont les distributions Linux qui proposent un syst\u00e8me d'exploitation b\u00e2ti autour de ce noyau Linux. On parle de distribution GNU/Linux quand il s\u2019agit d\u2019une solution pr\u00eate \u00e0 \u00eatre install\u00e9e par l\u2019utilisateur final sur sa machine. Ces distributions GNU/Linux comprennent le noyau Linux ainsi qu'une interface graphique, et des logiciels libres sous licence GNU. Exemples de distributions GNU/Linux : Debian, Ubuntu, Fedora, Mint.  Android est un syst\u00e8me fond\u00e9 sur Linux mais pas sur GNU. Grace \u00e0 sa puissance, sa l\u00e9g\u00e8ret\u00e9 et son cot\u00e9 open-source qui minimise les bugs, Linux est tr\u00e8s pr\u00e9sent dans le monde des serveurs. Il \u00e9quipe la plupart des syst\u00e8mes embarqu\u00e9s (box, robots, a\u00e9rospatial, drones\u2026) mais aussi les supercalculateurs. Linux domine le march\u00e9 des smartphones via l\u2019OS Android qui s\u2019appuie sur un noyau Linux. </p> <p>Ressources</p> <p>L'histoire de Linux (video) La folle histoire de Linux (article) GNU et les logiciels libres (site \u00e0 explorer) </p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#22-les-commandes-de-base-de-linux","title":"2.2 Les commandes de base de Linux","text":""},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#commandes-daide","title":"Commandes d'aide","text":"Commande Description - Syntaxe - Exemple man Retourne le mode d'emploi de la commande s'il existe : man nom_commande help Affiche l'aide de la commande"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#commandes-arborescences-des-dossiers-et-fichiers","title":"Commandes \"arborescences des dossiers et fichiers\"","text":"Commande Description - Syntaxe - Exemple cd Change le r\u00e9pertoire de travail du shell cd .. Change de r\u00e9pertoire de travail pour acc\u00e9der au r\u00e9pertoire p\u00e8re cd ~ Change le r\u00e9pertoire de travail pour revenir au r\u00e9pertoire personnel cp Copie le fichier et les r\u00e9pertoires : <code>cp source destination</code> cp -R Copie un r\u00e9pertoire et son contenu : <code>cp -R r\u00e9pertoire_source r\u00e9pertoire_destination</code> ls Liste le contenu du r\u00e9pertoire courant ls -l Liste le contenu du r\u00e9pertoire courant de mani\u00e8re d\u00e9taill\u00e9e ls -R Liste l'arbre du r\u00e9pertoire mkdir Cr\u00e9e un r\u00e9pertoire : <code>mkdir nom_r\u00e9pertoire</code> rmdir Efface un r\u00e9pertoire s'il est vide rm Supprime un fichier ou un r\u00e9pertoire : <code>rm nom_fichier</code> rm -r Supprime un r\u00e9pertoire et son contenu rmdir Supprimer un r\u00e9pertoire vide : <code>rmdir nom_r\u00e9pertoire</code> mv D\u00e9place ou renomme un fichier : <code>mv source destination</code> pwd Affiche le r\u00e9pertoire courant"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#commandes-gestion-des-droits","title":"Commandes \"gestion des droits\"","text":"Commande Description - Syntaxe - Exemple chmod Modifie les permissions d'acc\u00e8s \u00e0 un fichier ou \u00e0 un r\u00e9pertoire. chown Change le propri\u00e9taire et le groupe propri\u00e9taire d'un fichier. chgrp Change le groupe propri\u00e9taire d'un fichier : <code>chgrp nom_du_groupe nom_du_fichier</code>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#commandes-fichiers","title":"Commandes \"Fichiers\"","text":"Commande Description - Syntaxe - Exemple cat Affiche le contenu d'un fichier, peut aussi concat\u00e9ner des fichiers  <code>cat fichier1</code> (affiche le contenu de fichier1)  <code>cat fichier1 fichier2</code> (affiche la concat\u00e9nation de fichier1 et fichier2) <code>cat fichier1 fichier2 &gt; fichier3</code> (concat\u00e9nation de fichier1 et fichier2 dans fichier3) touch Change le timestamp d'un fichier. Si le fichier n'existe pas, la commande cr\u00e9\u00e9e un fichier vide.  <code>touch nom_fichier</code> <code>touch test.txt</code> (cr\u00e9e le fichier s'il n'existe pas)  <code>touch test.txt</code> (modifie le timestamp du fichier) echo Affiche une ligne de texte : <code>echo ligne_texte</code> echo &gt;&gt; Envoie  une ligne de texte vers une sortie : <code>echo \"ligne_texte\"  &gt;&gt; nom_fichier</code>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#commandes-utilisateurs-et-groupes","title":"Commandes \"Utilisateurs et groupes\"","text":"Commande Description - Syntaxe - Exemple adduser Ajoute un utilisateur. Il faut \u00eatre connect\u00e9 en tant que root : <code>adduser nom_utilisateur</code> adduser user groupe Ajoute un utilisateur dans un groupe. Il faut \u00eatre connect\u00e9 en tant que root : <code>adduser user groupe</code> addgroup Cr\u00e9e un groupe. Il faut \u00eatre connect\u00e9 en tant que root. id La commande <code>id</code> affiche les informations utilisateur et de groupe pour un utilisateur sp\u00e9cifi\u00e9, ou si aucun utilisateur n'est sp\u00e9cifi\u00e9, elle affiche les informations sur l'utilisateur courant : <code>id user</code> passwd Modifier le mot de passe : <code>passwd login</code>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#commandes-utiles","title":"Commandes utiles","text":"Commande Description - Syntaxe - Exemple shutdown -h now \u00c9teindre l'ordinateur. Il faut \u00eatre connect\u00e9 en tant que root. exit Fermer la session su  se connecter au compte  sudo \"super utilisateur do\" : permet d'effectuer des commandes non autoris\u00e9es <p>Ressources</p> <p>le shell et les commandes L\u00e9a-Linux Commandes et lignes de commandes Wiki-ubuntu.fr </p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/cours/#3-gestion-des-utilisateurs-et-des-groupes","title":"3. Gestion des utilisateurs et des groupes","text":"<p>Les syst\u00e8mes de type \"UNIX\" sont des syst\u00e8mes multi-utilisateurs. Plusieurs utilisateurs peuvent donc partager un m\u00eame ordinateur. Chaque utilisateur poss\u00e9dant un environnement de travail qui lui est propre. Chaque utilisateur poss\u00e8de certains droits lui permettant d'effectuer certaines op\u00e9rations et pas d'autres.  Le syst\u00e8me d'exploitation permet de g\u00e9rer ces droits tr\u00e8s finement. Un utilisateur un peu particulier est autoris\u00e9 \u00e0 modifier tous les droits : ce \"super utilisateur\" est appel\u00e9 \"administrateur\" ou \"root\".  </p> <p>L'administrateur pourra donc attribuer ou retirer des droits aux autres utilisateurs.  Au lieu de g\u00e9rer les utilisateurs un par un, il est possible de cr\u00e9er des groupes d'utilisateurs. L'administrateur attribue des droits \u00e0 un groupe au lieu d'attribuer des droits particuliers \u00e0 chaque utilisateur. </p> <p>Comme nous venons de le voir, chaque utilisateur poss\u00e8de des droits qui lui ont \u00e9t\u00e9 octroy\u00e9s par le \"super utilisateur\".   Nous nous int\u00e9resserons ici uniquement aux droits li\u00e9s aux fichiers, mais vous devez savoir qu'il existe d'autres droits li\u00e9s aux autres \u00e9l\u00e9ments du syst\u00e8me d'exploitation ((imprimante, installation de logiciels...).  Les fichiers et les r\u00e9pertoires poss\u00e8dent 3 types de droits : - les droits en lecture : r signifie \"lecture autoris\u00e9e\". - les droits en \u00e9criture : w signifie \"\u00e9criture autoris\u00e9e\". - les droits en ex\u00e9cution : x signifie \"ex\u00e9cution autoris\u00e9e\" pour un fichier et \"acc\u00e8s autoris\u00e9\" pour un r\u00e9pertoire. - le caract\u00e8re - \u00e0 la place d'un des trois pr\u00e9c\u00e9dents interdit le droit en question. Il existe 3 types d'utilisateurs pour un fichier ou un r\u00e9pertoire : - le propri\u00e9taire du fichier (par d\u00e9faut, la personne qui a cr\u00e9\u00e9 le fichier), il est symbolis\u00e9 par la lettre u - un fichier est associ\u00e9 \u00e0 un groupe, tous les utilisateurs appartenant \u00e0 ce groupe poss\u00e8dent des droits particuliers sur ce fichier. Le groupe est symbolis\u00e9 par la lettre g. - tous les autres utilisateurs, ils sont symbolis\u00e9s par la lettre o.  La commande <code>ls -l</code> donne des informations sur les droits de ce qui se trouve dans le r\u00e9pertoire courant.</p> <p>Exemple :  Lisons la premi\u00e8re ligne de gauche \u00e0 droite : <code>-rw-r--r-- 1 david david 0 avril 13 19:58 fic.txt</code> - le premier symbole - signifie que l'on a affaire \u00e0 un fichier (d pour un r\u00e9pertoire ou - pour un fichier - les 3 symboles suivants <code>rw-</code> donnent les droits du propri\u00e9taire du fichier : ici, lecture, \u00e9criture, mais pas d'ex\u00e9cution. - les 3 symboles suivants <code>r--</code> donnent les droits du groupe li\u00e9 au fichier : seule la lecture est autoris\u00e9e - les 3 symboles suivants <code>r--</code> donnent les droits des autres utilisateurs : seule la lecture est autoris\u00e9e - le caract\u00e8re suivant <code>1</code> donne le nombre de liens (nous n'\u00e9tudierons pas cette notion ici) - le premier <code>david</code> repr\u00e9sente le nom du propri\u00e9taire du fichier - le second <code>david</code> repr\u00e9sente le nom du groupe li\u00e9 au fichier - le <code>0</code> repr\u00e9sente la taille du fichier en octet (ici notre fichier est vide) - <code>avril 13 19:58</code> donne la date et l'heure de la derni\u00e8re modification du fichier  - <code>fic.txt</code> est le nom du fichier</p> <p>Lisons la deuxi\u00e8me ligne de gauche \u00e0 droite : <code>drwxr-xr-x 2 david david 4096 avril 13 20:05 info</code> - le premier symbole <code>d</code> signifie que l'on a affaire a un r\u00e9pertoire - les 3 symboles suivants <code>rwx</code> donnent les droits du propri\u00e9taire du r\u00e9pertoire : ici, lecture, \u00e9criture et ex\u00e9cution (acc\u00e8s) - les 3 symboles suivants <code>r-x</code> donnent les droits du groupe li\u00e9 au r\u00e9pertoire : modification du contenu du r\u00e9pertoire interdite - les 3 symboles suivants <code>r-x</code> donnent les droits des autres utilisateurs : modification du contenu du r\u00e9pertoire interdite - le caract\u00e8re suivant <code>2</code> donne le nombre de liens (nous n'\u00e9tudierons pas cette notion ici) - le premier <code>david</code> repr\u00e9sente le nom du propri\u00e9taire du r\u00e9pertoire - le second <code>david</code> repr\u00e9sente le nom du groupe li\u00e9 au r\u00e9pertoire - le <code>4096</code> repr\u00e9sente la taille du r\u00e9pertoire en octets - <code>avril 13 20:05</code> donne la date et l'heure de la derni\u00e8re modification du contenu du r\u00e9pertoire  - <code>info</code> est le nom du r\u00e9pertoire</p> <p>DM</p> <p> Terminus</p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/exercices/","title":"Exercices","text":"<p>Exercice 1</p> Ennonc\u00e9Correction <p>On suppose que le r\u00e9pertoire personnel de l'utilisateur courant est vide. 1. D\u00e9crire sans les tester dans un terminal l'effet de chacune des commandes suivantes, en supposant qu'elles ont \u00e9t\u00e9 ex\u00e9cut\u00e9es les unes \u00e0 la suite des autres.</p> <p>Bash<pre><code>    cd ~    \n    mkdir NSI   \n    mkdir NSI/TP_SHELL  \n    cd NSI/TP_SHELL \n    touch texte.txt \n    echo \"coucou\"&gt;&gt; texte.txt   \n    chmod  u+rwx,g-rwx,o-rwx texte.txt  \n    ls -l   \n    cd ..   \n    chmod 750 TP_SHELL  \n    ls -l   \n</code></pre> 2. Ouvrir un terminal et effectuer ces commandes pour v\u00e9rifier vos pr\u00e9visions en utilisant Weblinux </p> Commande Action cd ~ se postionne sur le r\u00e9pertoire racine mkdir NSI cr\u00e9\u00e9 le r\u00e9pertoire NSI \u00e0 la racine mkdir NSI/TP_SHELL cr\u00e9\u00e9 le r\u00e9pertoire TP_SHELL dans le r\u00e9pertoire NSI cd NSI/TP_SHELL Se d\u00e9place dans le r\u00e9pertoire NSI/TP_SHELL touch texte.txt cr\u00e9\u00e9 le fichier texte.txt \u00e0 vide dans le r\u00e9pertoire NSI/TP_SHELL echo \"coucou\"&gt;&gt; texte.txt Ecrit le mot coucou dans le fichier texte.txt chmod  u+rwx,g-rwx,o-rwx texte.txt Modifiie les droits du fichier le user \u00e0 tous les droits, le groupe et les autres n'ont aucun droit, \u00e9quivalent \u00e0 <code>chmod go-rwx texte.txt</code> ls -l Liste les fichiers du r\u00e9pertoire courant (V\u00e9rifier les droits sur texte.txt) cd .. Remonte d'un cran dans l'arborescence, ici dans le r\u00e9pertoire NSI chmod 750 TP_SHELL Modifie les droits du r\u00e9pertoire TP_SHELL, ajout des droits d'\u00e9x\u00e9cution aux groupes et aux autres ls -l Liste les fichiers du r\u00e9pertoire courant (V\u00e9rifier les droits sur TP_SHELL) <p>Exercice 2</p> Enonc\u00e9Correction <p>On suppose que l'on se trouve dans un r\u00e9pertoire TEST, que ce dernier est vide et que l'on ex\u00e9cute les sept commandes suivantes.  1. Sans tester ces commandes dans un terminal, dessiner ci-dessous l'arborescence finale des fichiers et des r\u00e9pertoires. On utilisera TEST comme racine de l'arborescence.</p> <p>Bash<pre><code>    mkdir a b c d\n    touch a/t.txt d/foo.txt\n    cd c\n    mkdir ../b/e f g\n    cd ..\n    cp */*.txt c/g  # le caract\u00e8re sp\u00e9cial \"*\" remplace n'importe quelle cha\u00eene de caract\u00e8re\n    rm -r f d\n</code></pre> 2. Ouvrir un terminal et effectuer ces commandes pour v\u00e9rifier vos pr\u00e9visions</p> <p></p> <p>Exercice 3</p> Enonc\u00e9Correction <p>On suppose que le r\u00e9pertoire courant est le r\u00e9pertoire personnel, que les r\u00e9pertoires <code>NSI</code> et <code>NSI/TP_SHELL</code> existent et que dans ce dernier r\u00e9pertoire il y a deux fichiers : <code>lisible.txt</code> et <code>secret.txt</code>. Donner les commandes permettant de mettre les permissions demand\u00e9es, quelles que soient les permissions initiales sur les fichier ou r\u00e9pertoires.</p> <ol> <li> <p>Le r\u00e9pertoire personnel poss\u00e8de tous les droites pour l'utilisateur et uniquement le droit d\u2019ex\u00e9cution pour le groupe et les autres</p> </li> <li> <p>Les r\u00e9pertoires NSI et NSI/TP_SHELL poss\u00e8dent tous les droits pour l'utilisateur et les droits de lecture et d'ex\u00e9cution pour le groupe et les autres</p> </li> <li> <p>Le fichier lisible.txt du r\u00e9pertoire NSI/TP_SHELL poss\u00e8de les droits de lecture et d'\u00e9criture pour l'utilisateur et uniquement les droits de lecture pour le groupe et les autres.</p> </li> <li> <p>Le fichier secret.txt du r\u00e9pertoire NSI/TP_SHELL poss\u00e8de les droits de lecture et d'\u00e9criture pour l'utilisateur et aucun droits pour le groupe et les autres.</p> </li> </ol> <ol> <li><code>chmod u+rwx, g+x, g-rw, o+x, o-rw ~</code> </li> <li><code>chmod u+rwx, g+xr, g-w, o+xr, o-w NSI</code> et <code>chmod u+rwx, g+xr, g-w, o+xr, o-w NSI/TP_SHELL</code></li> <li><code>chmod u+rw, u-x, g+r, g-wx, o+r, o-wx NSI/TP_SHELL/lisible.txt</code></li> <li><code>chmod u+rw, u-x, g-rwx, o-rwx NSI/TP_SHELL/secret.txt</code></li> </ol>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/tp/","title":"TP d\u00e9couverte des commandes Linux","text":"<p>On s\u2019appuieras notamment sur les ressources suivantes :</p> <p>Ressources</p> <ul> <li>Le chapitre 24 du manuel (Sp\u00e9cialit\u00e9 NSI, Th. Balabonski et al., Ellipses)</li> <li>Le site informatiquelycee propos\u00e9 sous licence  par le coll\u00e8gue D. Roche du lyc\u00e9e de Bonneville pour une pr\u00e9sentation g\u00e9n\u00e9rale des syst\u00e8mes d\u2019exploitation, et surtout ici pour une pr\u00e9sentation de la ligne de commande.</li> </ul> <p>Environnement</p> <p>Pour \u00e9viter toute installation, tout en disposant toujours du m\u00eame environnement de base, disponible depuis toute machine connect\u00e9e \u00e0 Internet, on utiliseras \u00e0 distance sur une machine \u00ab Weblinux \u00bb depuis un navigateur. Apr\u00e8s le lancement, la connexion est automatiquement, en tant qu\u2019utilisatrice <code>alice</code> et dans le r\u00e9pertoire personnel d'alice. </p> <p></p> <p>En bas du shell, les trois ic\u00f4nes permettent (de gauche \u00e0 droite) de :  Sauvegarder sur son PC une archive (.tar) qui reprend une grande partie du dossier personnel d\u2019alice (ce qui te permet de fournir la trace de ton travail au prof notamment!)</p> <p> D\u2019envoyer un fichier de son PC vers la WebLinux. Il sera pr\u00e9sent dans le r\u00e9pertoire personnel, \u00e0 sa base.</p> <p>  De coller dans le shell du texte que tu as copi\u00e9 sur son PC : apr\u00e8s avoir copi\u00e9, clic droit dans cette zone <code>clipboard</code> puis coller </p> <p>Par d\u00e9faut, l\u2019invite de commande y reste r\u00e9duite \u00e0 un simple <code>$</code>. On peut la rendre plus compl\u00e8te en ex\u00e9cutant la commande suivante (c\u2019est le moment id\u00e9al pour tester le copier-coller qu\u2019on vient d\u2019\u00e9voquer !) :</p> Bash<pre><code>PS1=\"\\[\\033[01;32m\\][\\u@\\h\\[\\033[00m\\]:\\[\\033[01;35m\\]\\w]\\[\\033[00m\\]$\" # (1)\n</code></pre> <ol> <li>Nous ne l\u2019expliquerons pas ici et il n\u2019est pas indispensable de r\u00e9aliser cette manipulation tout de suite.</li> </ol> <p>Prenez des notes de vos manipulations pour vous souvenir de ce que vous faites </p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/tp/#1-explorer-larborescence","title":"1. Explorer l\u2019arborescence","text":"<p>On va d\u2019abord utiliser des commandes shell qui permettent de se d\u00e9placer dans l\u2019arborescence, de visualiser les r\u00e9pertoires, fichiers, ainsi que d'r\u00e9cup\u00e9rer des informations sur eux :</p> <ol> <li> <p>Ex\u00e9cute <code>pwd</code> (pour \u00ab Print Working Directory \u00bb) qui donne l\u2019adresse du r\u00e9pertoire dans lequel on se trouve.      Est-ce une adresse absolue ou une adresse relative?      Comment le voit-on? Note : si tu n\u2019es pas \u00e0 l\u2019aise avec la diff\u00e9rence entre adresse absolue ou adresse relative (notion vue avec le HTML notamment), tu peux lire l\u2019article suivant</p> </li> <li> <p>Pour lister le contenu du r\u00e9pertoire courant (on dit aussi parfois dossier), utilise <code>ls</code>.      Combien d\u2019\u00e9l\u00e9ments contient-il?</p> </li> <li> <p>On peut ajouter des options \u00e0 la commande :</p> <ul> <li> <p><code>ls -a</code> (pour \u00aball\u00bb) permet de lister \u00e9galement les fichiers \u00abcach\u00e9s\u00bb (au sens large, les syst\u00e8mes POSIX, ou \u00ab de type UNIX \u00bb, voient les r\u00e9pertoires comme des fichiers particuliers), \u00e0 savoir ceux qui ont un nom commen\u00e7ant par <code>.</code> et qui sont invisibles par d\u00e9faut. On voit appara\u00eetre notamment le <code>.</code> qui repr\u00e9sente le r\u00e9pertoire courant, ainsi que <code>..</code> qui d\u00e9signe le dossier \u00ab parent \u00bb situ\u00e9 au niveau juste au dessus dans l\u2019arborescence.</p> </li> <li> <p><code>ls -l</code> (pour \u00ab long \u00bb) donne une description plus compl\u00e8te. Reporter vous au cours pour voir la d\u00e9composition des informations sur la ligne (le premier caract\u00e8re de chaque ligne indique s\u2019il s\u2019agit d\u2019un fichier classique (-) ou d\u2019un r\u00e9pertoire (d pour directory), etc ...)</p> </li> <li> <p>On peut combiner les options : <code>ls -a -l</code> ou <code>ls -al</code>. Donne le nom d\u2019un r\u00e9pertoire, celui d\u2019un fichier ordinaire cach\u00e9 et celui d\u2019un fichier ordinaire non cach\u00e9.</p> </li> <li> <p>On peut aussi donner en argument le dossier \u00e0 lister. Ex\u00e9cute <code>ls /</code> ou <code>ls -l /</code> et indique le nombre de r\u00e9pertoires imm\u00e9diatement pr\u00e9sents \u00e0 la racine de l\u2019arborescence (ignore le linuxrc qui est un lien symbolique comme l\u2019indique le l en d\u00e9but de ligne...) V\u00e9rifie avec <code>pwd</code> que tu es toujours dans le m\u00eame dossier.</p> </li> </ul> </li> <li> <p><code>cd</code> (pour \u00ab Change Directory \u00bb) permet de se d\u00e9placer dans les r\u00e9pertoires. On lui donne en argument (\u00e9crit apr\u00e8s un espace) l\u2019adresse relative ou absolue o\u00f9 l\u2019on veut se rendre.</p> <ul> <li><code>cd Documents</code> ou <code>cd Documents/</code> permet ainsi de se placer dans le sous-r\u00e9pertoire ainsi nomm\u00e9 (On peut commencer \u00e0 \u00e9crire le nom du dossier puis utiliser l\u2019autocompl\u00e9tion en appuyant sur la touche de tabulation). Combien de fichiers ordinaires et combien de dossiers contient ce r\u00e9pertoire ?</li> <li> Reviens dans le dossier parent avec <code>cd ..</code> puis remonte d\u2019un niveau encore en ex\u00e9cutant \u00e0 nouveau la m\u00eame commande </li> </ul> <p>Astuce</p> <p>On peut utiliser la fl\u00e8che \u00abvers le haut\u00bb  du clavier pour remonter dans l\u2019historique des commandes . Tu aurais pu \u00e9galement saisir directement <code>cd ../..</code> d\u00e8s le d\u00e9part au lieu de deux fois <code>cd ..</code>.</p> <ul> <li>Note le nom des utilisateurs identifi\u00e9s sur la Weblinux : ce sont ceux des sous-dossiers de <code>/home</code>.</li> <li>O\u00f9 que tu sois, tu peux revenir \u00e0 la base de son espace personnel avec <code>cd</code> ou <code>cd \u02dc</code>. </li> <li><code>cd -</code> te permet de revenir au pr\u00e9c\u00e9dent dossier dans lequel tu \u00e9tais. \u2003</li> </ul> </li> <li> <p>\u00c0 l\u2019aide des commandes pr\u00e9c\u00e9dentes, repr\u00e9sente l\u2019arborescence (partielle) des fichiers en partant de la racine <code>/</code>.      Tu peux l\u2019\u00e9crire sous la forme suivante :</p> <p>Bash<pre><code>/\n|--- bin\n|--- dev\n|--- home\n    |   |--- alice\n    |   |   |--- ...\n</code></pre> Limite-toi \u00e0 un niveau de profondeur, sauf pour <code>/home/</code> o\u00f9 tu illustreras les sous-r\u00e9pertoires, et <code>/home/alice</code> o\u00f9 tu montreras les fichiers ordinaires et quelques dossiers.</p> </li> <li> <p>Rends-toi dans le dossier <code>/home/bob/vide/</code>.     \u00c9cris une commande unique qui permet alors de se rendre directement dans <code>/home/alice/Documents/</code>.</p> </li> </ol>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/tp/#2-expansion-de-la-ligne-de-commande-motifs","title":"2. Expansion de la ligne de commande, motifs","text":"<p>Pour regrouper plusieurs noms de fichiers ou r\u00e9pertoires, on peut utiliser les motifs suivants dans ses commandes. Ils sont remplac\u00e9s par les valeurs correspondantes avant l\u2019ex\u00e9cution de la commande :</p> <p>Motif</p> <ul> <li><code>*</code> remplace n\u2019importe quelle suite de caract\u00e8re, \u00e9ventuellement vide : <code>ls *.txt</code> permet de lister tous les fichiers dont le nom se termine par <code>.txt</code></li> <li><code>?</code> remplace un unique caract\u00e8re quelconque.</li> <li><code>[abc]</code> remplace n\u2019importe quel caract\u00e8re indiqu\u00e9 entre crochets.</li> <li><code>[0-9]</code>, <code>[a-zA-Z]</code>, etc. permettent d\u2019accepter tous les caract\u00e8res d\u2019un intervalle.</li> <li>En ins\u00e9rant en premi\u00e8re position <code>\u02c6</code> ou <code>!</code>, on peut \u00e9crire <code>[\u02c6abc]</code> ou <code>[!abc]</code> qui d\u00e9signent tout caract\u00e8re diff\u00e9rent de tous ceux indiqu\u00e9s. On peut travailler aussi avec les intervalles.</li> </ul> <p>A faire :     Donne la commande \u00e0 utiliser pour lister les documents du dossier <code>~/Compagnon/A22/</code> qui v\u00e9rifient la condition propos\u00e9e, puis note combien il y en a :     1.  Fichiers dont le nom commence par un f     2.  Fichiers dont le nom commence par un f et qui se terminent par .txt     3.  Fichiers dont le nom commence par un fichier, suivi d\u2019un chiffre quelconque, puis de .txt     4.  Fichiers dont le nom commence par un fichier, suivi par n\u2019importe quel caract\u00e8re (un seul), puis de .txt     5.  Fichiers dont le nom commence par fi, suivi d\u2019un caract\u00e8re autre que <code>c</code> et que <code>e</code>, puis se termine par n\u2019importe quel(s) autre(s) caract\u00e8re(s).</p>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/tp/#3-creer-copier-supprimer","title":"3. Cr\u00e9er, copier supprimer","text":"<p> Retourne dans l'espace personnel d'alice <code>cd ~</code>.</p> <ol> <li>Affiche \u00e0 l\u2019\u00e9cran le contenu du fichier <code>/Compagnon/A13/Documents/detail-alice.txt</code> avec <code>cat detail-alice.txt</code>.     Le nom de la commande vient de <code>concat</code> : elle concat\u00e8ne le contenu des fichiers en argument, avant des les envoyer vers la sortie standard qui est par d\u00e9faut l\u2019affichage dans le shell. On l\u2019utilise souvent pour un fichier unique.</li> <li>D\u00e9place ce fichier (command mv) \u00e0 la base de ton espace personnel : <code>mv detail-alice.txt \u02dc</code>     Le <code>\u02dc</code> final peut \u00eatre remplac\u00e9 par <code>.</code> si tu es d\u00e9j\u00e0 situ\u00e9 au bon endroit (ici <code>/home/alice</code>).</li> <li>Cr\u00e9e un fichier (vide pour l\u2019instant) dans le dossier personnel d'alice, qui a le m\u00eame nom que toi (utilise ton vrai  nom !) : <code>touch prenom_nom</code></li> <li>D\u00e9truis <code>fichier2.txt</code> avec <code>rm fichier2.txt</code> (commande remove).</li> <li>Cr\u00e9e un nouveau dossier local nomm\u00e9 exo avec la commande <code>mkdir exo</code> (make directory). Copie le fichier <code>fichier1.txt</code> dans ce dossier avec la commande <code>cp</code> (copy) qui fonctionne comme <code>mv</code> mais conserve le fichier d\u2019origine.</li> <li>Depuis la racine de ton dossier personnel, tente d\u2019effacer le dossier exo avec <code>rm exo</code>. Et avec <code>rmdir exo</code> (remove directory). Explique les messages d\u2019erreurs.</li> <li>Cr\u00e9e un dossier exo2, puis supprimmez le.</li> </ol>"},{"location":"T4_Architecture_materielle/4.4_Decouverte_des_commandes_Linux/tp/#4-gerer-des-droits","title":"4. G\u00e9rer des droits","text":"<p>L\u2019un des int\u00e9r\u00eats des syst\u00e8mes conforme au standard POSIX est d\u2019avoir su d\u00e8s le d\u00e9part g\u00e9rer rigoureusement les droits sur les fichiers et r\u00e9pertoires, d\u2019o\u00f9 une bonne solidit\u00e9 de ces syst\u00e8mes (massivement utilis\u00e9s en particulier sur les serveurs).</p> <ol> <li> <p>Un utilisateur fait partie de groupe(s), dont un par d\u00e9faut. En fait, le syst\u00e8me d\u2019exploitation l\u2019identifie par un num\u00e9ro (UID, identifiant d\u2019utilisateur ou user ID) ainsi que ses groupes (par leur GID).  Utilise la commande <code>id</code> (pas incontournable, pour la suite), afin de d\u00e9terminer les groupes auxquels appartient <code>alice</code> en pr\u00e9cisant lequel est le principal (indiqu\u00e9 juste apr\u00e8s gid). V\u00e9rifie qu\u2019on retrouve \u00e9galement ces informations dans les fichiers (\u00e0 afficher avec <code>cat</code>) <code>/etc/passwd</code> et <code>/etc/group</code>.</p> </li> <li> <p>Quand il cr\u00e9e un fichier ou un r\u00e9pertoire, ce dernier \u00ab appartient \u00bb \u00e0 cet utilisateur, ainsi qu\u2019\u00e0 son groupe par d\u00e9faut (des droits sont alors choisis, configurables avec la commande <code>umask</code> que nous expliquerons plus bas).      Pour d\u00e9finir ces droits associ\u00e9s au fichier, on divise alors le monde en trois cat\u00e9gories :</p> <ul> <li>L\u2019utilisateur propri\u00e9taire, d\u00e9sign\u00e9 par <code>u</code></li> <li>Les membres du groupe propri\u00e9taire <code>g</code></li> <li>Tous les autres utilisateurs <code>o</code> pour other</li> </ul> <p>Et pour chacune de ces cat\u00e9gories, on attribue ou non chacun des droits suivants :</p> <ul> <li>Lecture (<code>r</code> pour read) qui autorise donc la copie, pour un fichier ordinaire. Pour un r\u00e9pertoire, il permet d\u2019obtenir la liste de ses fichiers.</li> <li>\u00c9criture (<code>w</code>pour write) qui permet notamment la modification (pour un r\u00e9pertoire, l\u2019ajout, la suppression, le renommage des fichiers qu\u2019il contient).</li> <li>Ex\u00e9cution (<code>x</code> pour execute), qui indique pour un fichier ordinaire qu\u2019il peut \u00eatre consid\u00e9r\u00e9 comme une commande ; pour un r\u00e9pertoire, cela autorise \u00e0 se positionner dedans, par exemple avec cd).</li> </ul> <p>Avec <code>ls -l</code> on a d\u00e9j\u00e0 visualis\u00e9 ces permissions : apr\u00e8s le premier caract\u00e8re de la ligne, trois blocs de trois caract\u00e8res rwx dont certains peuvent \u00eatre remplac\u00e9s par <code>-</code> indiquent (pour u, puis g, puis o) si l\u2019on a accord\u00e9 le droit (lettre pr\u00e9sente) ou non (- pr\u00e9sent). Il existe d\u2019autres possibilit\u00e9s que nous laisserons de c\u00f4t\u00e9 ici, concernant les droits.</p> <p>A Faire : D\u00e9taille les droits des dossiers de l\u2019espace personnel d\u2019alice, puis ceux des fichiers ordinaires.</p> </li> <li> <p>En fait, le propri\u00e9taire d\u2019un fichier peut en modifier les droits avec <code>chmod</code> (change mode). Seul lui peut le faire, ainsi que le \u00ab super-utilisateur \u00bb (ou administrateur syst\u00e8me) <code>root</code> qui a les pleins pouvoirs sur la machine (ce qui est donc dangereux : on ne l\u2019utilise que quand cela est strictement n\u00e9cessaire).</p> <p>La syntaxe est <code>chmod</code> modifications fichier, o\u00f9 modifications est compos\u00e9 dans l'ordre - du public (une ou plusieurs lettres parmi u, g et o d\u00e9finis ci-dessus, voire a pour \u00ab tous \u00bb, soit all) - d\u2019un op\u00e9rateur (= pour attribuer des droits et seulement ceux-l\u00e0, + pour ajouter des droits \u00e0 ceux d\u00e9j\u00e0 donn\u00e9s et - pour en \u00f4ter \u00e0 ceux qui existent)  - du ou des droits d\u00e9sign\u00e9s par l\u2019une ou plusieurs des lettres parmi r, w et x.</p> <p>Exemples : - <code>chmod o-wx</code> mon_fichier \u00f4te les droits en \u00e9criture et en ex\u00e9cution aux \u00ab autres utilisateurs \u00bb. - <code>chmod a+x</code> mon_fichier donne les droits en \u00e9criture et en ex\u00e9cution \u00e0 tous les utilisateurs, - On peut m\u00eame donner plusieurs s\u00e9ries d\u2019attributs, s\u00e9par\u00e9es par des virgules.</p> <p><code>chmod ug=rwx,o=r mon_fichier</code> donne tous les droits \u00e0 l\u2019utilisateur et au groupe, mais seulement le droit en lecture aux autres utilisateurs.</p> <p>A faire : Donne \u00e0 ton tour la commande qui permet d\u2019\u00f4ter les droits en \u00e9criture et en ex\u00e9cution au groupe et aux autres utilisateurs, pour <code>fichier1.txt</code> V\u00e9rifie le r\u00e9sultat apr\u00e8s ex\u00e9cution avec <code>ls -l</code> (<code>fichier1.txt</code> se trouve dans <code>home\\Alice\\Compagnon\\A22</code>).</p> </li> <li> <p>On peut utiliser comme pr\u00e9c\u00e9demment <code>*</code> et les autres motifs. Il est \u00e9galement possible de changer les droits \u00ab r\u00e9cursivement \u00bb c\u2019est-\u00e0-dire en remontant aussi loin que n\u00e9cessaire dans les sous-dossiers, en ajoutant l\u2019option <code>-R</code>.      &gt; A faire : Donne tous les droits \u00e0 l\u2019utilisateur et ne garde que ceux en lecture pour les autres cat\u00e9gories, pour tous les sous-dossiers du r\u00e9pertoire personnel d\u2019alice dont le nom commence par un S. Puis seulement le droit en lecture pour tout utilisateur, pour tous les fichiers et sous-dossiers \u00e0 un niveau quelconque du dossier imdb. V\u00e9rifie le r\u00e9sulat avec <code>ls -l</code>.</p> </li> <li> <p>Il existe une autre mani\u00e8re de d\u00e9crire les droits \u00e0 appliquer : on indique un nombre en \u00e9criture octale (base 8), dont chacun des trois chiffres (il y en a parfois 4, on n\u2019\u00e9tudie pas ce cas ici), associ\u00e9s respectivement \u00e0 <code>u</code>, <code>g</code> et <code>o</code>, est calcul\u00e9 ainsi : on additionne les droits \u00e0 attribuer, en comptant 4 pour r, 2 pour w et 1 pour x. Par exemple,<code>rwx</code> vaut 7, <code>rx</code> vaut 5. On peut choisir directement des droits, mais pas en ajouter ou en \u00f4ter, avec cette notation.</p> <p>A faire : Indique quels droits sont attribu\u00e9s par <code>chmod 754 fichier1.txt</code> puis v\u00e9rifie ta r\u00e9ponse avec <code>ls -l</code>.</p> </li> <li> <p>La commande <code>umask</code> (user mask) sans argument renvoie un \u00abmasque\u00bb qui indique les droits attribu\u00e9s par d\u00e9faut \u00e0 la cr\u00e9ation d\u2019un fichier. En donnant comme argument une valeur octale, on peut choisir une nouvelle valeur pour ce masque.</p> <p>Pour d\u00e9terminer la valeur, on soustrait chiffre par chiffre les droits calcul\u00e9s comme pr\u00e9c\u00e9demment \u00e0 <code>666</code> pour les fichiers ordinaires et \u00e0 <code>777</code> pour les r\u00e9pertoires. Par exemple, pour obtenir les droits par d\u00e9faut <code>644</code>, soit <code>rw-r--r--</code>, sur les fichiers ordinaires, le masque vaut \\(666-644 = 022\\) : on ex\u00e9cute <code>umask 022</code>. Du coup, sur les nouveaux r\u00e9pertoires, on aura les droits \\(777-022 = 755\\), soit <code>rwxr-xr-x</code> (droit en ex\u00e9cution en plus de ceux des fichiers, autrement dit celui de se positionner dedans avec cd).</p> </li> <li> <p>Les permissions d\u00e9pendent des propri\u00e9taires (utilisateur et groupe) et on peut modifier ces derniers (l\u00e0 encore, seul <code>root</code> peut tout faire et un utilisateur peut changer le groupe d\u2019un fichier qui lui appartient). Les commandes utilis\u00e9es sont <code>chown</code> (change owner) et <code>chogrp</code> (change group) : <code>chown bob fichier1.txt</code> donnerait la propri\u00e9t\u00e9 de ce fichier \u00e0 l\u2019utilisateur bob, si on a suffisamment de droits pour ex\u00e9cuter cette commande.     Il existe \u00e9galement des commandes pour ajouter un utilisateur \u00e0 un groupe, que nous n\u2019\u00e9tudierons pas ici.</p> <p>A faire : Donne la commande qui donne le groupe developer \u00e0 <code>fichier2.txt</code>, puis v\u00e9rifie le r\u00e9sultat.</p> </li> </ol> <p>Compl\u00e9ments</p> <p>Le plus important \u00e0 retenir, surtout quand on conna\u00eet une commande mais pas ses options, ou si l\u2019on d\u00e9couvre une commande inconnue dans un exemple, est de savoir acc\u00e9der \u00e0 l\u2019information int\u00e9gr\u00e9e au shell : - <code>man la_commande</code> renvoie une aide compl\u00e8te (souvent plus longue qu\u2019une page, on peut ajouter \u00e0 la suite |less pour se d\u00e9placer dedans avec les fl\u00e8ches, puis quitter avec q, voir \u00e0 la suite pourquoi). <code>info la_commande</code> offre un service comparable. - Plus simplement, la plupart des commandes ont une option <code>-help</code> (en g\u00e9n\u00e9ral, double tiret pour une option qui s\u2019\u00e9crit sur plus d\u2019un caract\u00e8re) ou <code>-h</code> qui d\u00e9crit leur utilisation. Avec <code>ls -help</code>, trouve comment lister le contenu d\u2019un r\u00e9pertoire en triant les \u00e9l\u00e9ments par ordre d\u00e9croissant de taille. - Si tu utilises un moteur de recherche, pense \u00e0 inscrire l\u2019un des mots <code>shell</code> ou <code>bash</code> en plus de celui de la commande ou de la fonctionnalit\u00e9 recherch\u00e9e... </p>"},{"location":"T5_Algorithmique/sommaire/","title":"Th\u00e8me 5 :  Algorithmique","text":"<ol> <li>Sp\u00e9cifications</li> <li>Extremums et moyennes</li> <li>Complexit\u00e9</li> <li>Tri par insertion</li> <li>Tri par s\u00e9lection</li> <li>Dichotomie</li> <li>Algorithmes gloutons</li> <li>Algorithme KNN</li> </ol>"},{"location":"T5_Algorithmique/5.0_specifications/cours/","title":"5.0 Mise au point de programme : sp\u00e9cification","text":""},{"location":"T5_Algorithmique/5.0_specifications/cours/#1-introduction","title":"1. Introduction","text":"<p>En tant que codeur d\u00e9butant, il est indispensable de prendre les bonnes habitudes d\u00e8s le d\u00e9part. De nombreuses conventions se sont impos\u00e9es au fil du temps devant la complexit\u00e9, la taille croissante du code mais aussi parce que le partage du travail devient de plus en plus indispensable. L'accroissement de la m\u00e9moire a aussi permis d'am\u00e9liorer la lisibilit\u00e9 du code. Et oui, il fut un temps o\u00f9 chaque octet \u00e9tait important et une variable \u00e0 une lettre moins couteuse qu'une de 20, o\u00f9 un commentaire prenait trop de place dans le fichier...Aujourd'hui, la longueur du nom d'une variable ou d'un commentaire ne doit plus vous effrayer.</p> <p>Votre code doit \u00eatre facile \u00e0 lire par une autre personne. Et cette autre personne peut tr\u00e8s bien \u00eatre-vous 2 ans plus tard....on est parfois surpris de ne pas comprendre ce que l'on a bien pu faire! </p>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#2-idees-generales","title":"2.  Id\u00e9es g\u00e9n\u00e9rales","text":"<p>Voici quelques conventions propres \u00e0 Python mais qui fonctionnent pour tous les langages. Elles sont disponibles sur le site de Python : PEP 8 \u2013 Style Guide for Python Code. Allez voir !</p> <p>Je les r\u00e9sume en fran\u00e7ais : beau est mieux que laid, explicite c'est mieux qu'implicite (C'est \u00e9vident, mais ca va mieux en le disant !), simple mieux que complexe, \u00e9viter si possible trop d'imbrications, a\u00e9rer le code, nommer correctement les variables (i,j,k pour un increment, elt pour d\u00e9signer un \u00e9l\u00e9ment ...) etc.\u2026</p> <p>Je vais isoler la derni\u00e8re id\u00e9e : maintenant c'est mieux que jamais mais jamais est parfois pr\u00e9f\u00e9rable \u00e0 imm\u00e9diatement.</p> <p> Oui, bien souvent, on veut tellement finir et tester notre code que l'on en oublie d'\u00eatre propre et judicieux, mieux vaut faire une pause. </p>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#3-idees-en-pratique-sur-python","title":"3. Id\u00e9es en pratique sur Python","text":"<p>Je les r\u00e9sume au maximum. Pour bien comprendre l'int\u00e9r\u00eat de tout cela, gardez \u00e0 l'esprit que vous passerez plus de temps \u00e0 relire votre code qu'\u00e0 l\u2019\u00e9crire !</p> <p>   En python ne m\u00e9langez jamais tabulations et espaces    Une ligne de code ne devrait pas d\u00e9passer 79 caract\u00e8res.    Encoder en Utf-8     Importer les biblioth\u00e8ques en d\u00e9but de programme sur des lignes s\u00e9par\u00e9es. (Pour en savoir plus sur les biblioth\u00e8ques.) </p> <p>Il y a de nombreuses conventions sur les espaces. Globalement on met un (et un seul) espace avant et apr\u00e8s les affectation, comparaisons, bool\u00e9ens et op\u00e9rations et pas d'espace pour le reste (, {,[...</p>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#4-commentaires","title":"4. Commentaires","text":"<p>Les commentaires doivent \u00eatre des phrases compl\u00e8tes de pr\u00e9f\u00e9rence en anglais. Je ne vais pas vous obliger \u00e0 suivre cette r\u00e8gle mais soyez coh\u00e9rents. Je vois tr\u00e8s r\u00e9guli\u00e8rement des codes en Franglais. Des variables en fran\u00e7ais, d'autre en anglais et de m\u00eame pour les noms de fonctions. Faites un choix une fois pour toute (sauf pour les commentaires pour l'instant).</p> <p>En Python les commentaires commencent par un <code>#</code>. Nous allons donc adopter pour cette ann\u00e9e: commentaires en fran\u00e7ais et au choix noms de fonctions ET variables dans une m\u00eame langue (fran\u00e7ais ou anglais).</p> <p>   Pensez \u00e0 mettre \u00e0 jour vos commentaires si vous modifiez le code !</p> <p>Commenter ce n'est pas commenter chaque ligne mais plut\u00f4t indiquer les grandes \u00e9tapes lorsque le code s'allonge et expliquer certaines lignes qui vous paraissent techniques.</p>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#5-dans-les-fonctions","title":"5. Dans les fonctions","text":"<p>Nous verrons en terminale la programmation orient\u00e9 objet. Pour diff\u00e9rencier les fonctions, variables et constantes on utilise des conventions de nommage diff\u00e9rentes.</p> <p>nomDeMaFonction : pour les fonctions, variables et m\u00e9thodes tout en minuscule avec _ pour s\u00e9parer les mots ou en CamelCase.</p> <p>maVariable : la variable est explicite pour son r\u00f4le dans la fonction. On utilise le CamelCase. Usuellement, les lettres i, j, k d\u00e9signe des incr\u00e9ments et donc des entiers. Eviter de les utiliser pour autre chose.</p> <p>Les constantes sont enti\u00e8rement en majuscule : NOM_DE_MA_CONSTANTE. Une constante est une variable \u00e0 laquelle on donne une valeur qui ne changera pas dans tout le programme. Par exemple, on code un jeu et au d\u00e9but, on pr\u00e9f\u00e8re s'en tenir \u00e0 deux joueurs. On peut cr\u00e9er <code>NB_MAX_JOUEURS=2</code> et on utilisera cette variable dans tout le programme sans jamais la changer. Imaginons que le code permette de jouer \u00e0 trois joueurs. Il suffit de changer la valeur de la constante <code>NB_MAX_JOUEURS=3</code>.</p> <p>Int\u00e9ressons-nous maintenant \u00e0 la documentation des fonctions. Lorsque vous cr\u00e9ez une fonction, vous devez la documenter. C'est le r\u00f4le du docstring. Le docstring se place juste apr\u00e8s la cr\u00e9ation de la fonction par def. Il commence et termine par trois guillemets ```.</p> <p>Votre docstring doit d\u00e9crire le r\u00f4le de la fonction, puis les param\u00e8tres pass\u00e9s en arguments (type et r\u00f4le), ainsi que le type de ce qui est retourn\u00e9</p> <p>Ce docstring, peut \u00eatre lu en tapant en console :  <code>nom_de_ma_fonction.__doc__</code> (deux underscores de chaque c\u00f4t\u00e9). </p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>def mettre_au_carre(x):\n    \"\"\"renvoie le carr\u00e9 de x\n\n    Param\u00e8tres d\u2019entr\u00e9e : x -&gt; (int, float ou decimal) : un nombre quelconque\n    Param\u00e8tre de sortie : Un nombre -&gt; (int, float ou decimal)\n    \"\"\"\n    return(x*x)\n</code></pre> <p>A faire</p> <ul> <li>Copier le code de la fonction mettre_au_carre dans votre editeur.</li> <li>Testez la docstring sur la console. Si on tape <code>print(mettre_au_carre.__doc__)</code> ou <code>help(nom_de_la_fonction)</code> en console, on lira \"renvoie le ....quelconque\".</li> </ul>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#6exercices","title":"6.Exercices","text":"<p>exercice 1 : mesure d'une angle</p> Enonc\u00e9Correction <p>La mesure d'un angle peut \u00eatre donn\u00e9e en degr\u00e9s ou en radian. L'unit\u00e9 de calcul naturelle pour les angles est le radian. La biblioth\u00e8que math ne sait donc calculer le cosinus que d'un angle donn\u00e9 en radian. <code>ma_fontion1</code>, convertit des degr\u00e9s en radians car pi radians correspondent \u00e0 180\u00b0.   Modifier les noms des fonctions, variables et cr\u00e9ez la docstring selon les normes \u00e9nonc\u00e9es plus haut.</p> <p>\ud83d\udc0d Script Python<pre><code>    # import math\n    from math import pi,cos\n    def ma_fonction1(x):\n        return(x*math.pi/180)\n\n    def ma_fonction2(x):\n        return(math.cos(ma_fonction1(x)))\n</code></pre> Petite remarque, on a import\u00e9 le module math de la biblioth\u00e8que standard (la biblioth\u00e8que de Python) avec <code>import math</code>. Dans ce cas, le programme charge en m\u00e9moire toutes les fonctions de la biblioth\u00e8que <code>math</code>. Ce qui est bien inutile dans notre cas, ou l on a besoin que de la fonction <code>pi</code> et <code>cos</code>. J importe uniquement ce que je vais utiliser. Les fonctions sont charg\u00e9es en m\u00e9moire et donc directement connues dans mon programme (je tape <code>cos</code> directement, plus <code>math.cos</code>). </p> \ud83d\udc0d Script Python<pre><code>from math import cos, pi\n\ndef conversion_degre_radian(angle):\n    \"\"\"renvoie la conversion des donn\u00e9es en radians\n\n    Param\u00e8tres d'entr\u00e9e : x -&gt; int ou decimal : valeur de l'angle de degr\u00e9 \u00e0 convertir\n    Param\u00e8tres de sortie : retourne --&gt; int ou float : valeur de l'angle en radian\n\n    \"\"\"\n    return(angle*pi/180)\n\ndef calcul_cosinus(angle):\n    \"\"\"renvoie le cosinus d'un angle\n\n    Param\u00e8tres d'entr\u00e9e : x -&gt; int ou decimal : valeur de l'angle en radian\n    Param\u00e8tres de sortie : retourne --&gt; int ou float : cosinus en radian\n\n    \"\"\"\n    return(cos(conversion_degre_radian(angle)))\n</code></pre> <p>exercice 2 : Myst\u00e8re</p> Enonc\u00e9Correction <p>Comprendre ce que fait le code suivant et corriger tous les probl\u00e8mes de sp\u00e9cification.</p> \ud83d\udc0d Script Python<pre><code>def fonction(a,b):\n    return(a*100/b)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def pourcentage(a,b):\n    \"\"\"\n    renvoie le pourcentage de a par rapport \u00e0 b\n    Param\u00e8tres d'entr\u00e9e : \n        a -&gt; int ou decimal : valeur du sous-ensemble\n        b -&gt; int ou decimal, b&gt;0 : valeur de l'ensemble\n    Param\u00e8tres de sortie : retourne --&gt; int ou float : pourcentage\n\n    \"\"\"\n    assert b != 0\n    return(a*100/b)\n</code></pre> <p>exercice 3 : Myst\u00e8re</p> Enonc\u00e9Correction <p>Comprendre ce que fait le code suivant et corriger tous les probl\u00e8mes de sp\u00e9cification</p> \ud83d\udc0d Script Python<pre><code>def fonction1(a,b,c,d):\n    return(a+b+c+d)\n\ndef fonction2(a,b,c,d):\n    return(fonction1(a,b,c,d)/4)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def addition(a,b,c,d):\n    \"\"\"renvoie l'addition des 4 param\u00e8tres\n    Param\u00e8tres d'entr\u00e9e : \n        a,b,c,d -&gt; int ou decimal : valeur \u00e0 additionner\n    Param\u00e8tres de sortie : retourne --&gt; int ou float : addition\n\n    \"\"\"\n    return(a+b+c+d)\n\ndef division(a,b,c,d):\n    \"\"\"renvoie la moyenne des 4 param\u00e8tres\n    Param\u00e8tres d'entr\u00e9e : \n        a,b,c,d -&gt; int ou decimal : valeur\n    Param\u00e8tres de sortie : retourne --&gt; int ou float : moyenne\n\n    \"\"\"\n    return(addition(a,b,c,d)/4)\n</code></pre> <p>exercice 4 : Myst\u00e8re</p> Enonc\u00e9Correction <p>Comprendre ce que fait le code suivant et corriger tous les probl\u00e8mes de sp\u00e9cification. Que dois-je taper pour avoir l'aire d'un rectangle de c\u00f4t\u00e9 3 et 4, agrandit 10 fois?  Que dois-je taper pour que le programme affiche le volume d'un pav\u00e9 droit de mesure 5 ; 7 ; 6 cm, agrandit 3 fois?</p> \ud83d\udc0d Script Python<pre><code>import math\n\ndef fonction1(a,b):\n    coefficient=10\n    c=coefficient*coefficient*a*b\n    print(\"L'aire d'un rectangle de mesure\",a,\"et\",b,\"qui subit un agrandissement de coefficient\",coefficient,\"est\",c)\n\n#volume d'un parall\u00e9l\u00e9pip\u00e8de de cot\u00e9 a,b,c qui subit un agrandissement de coefficient d\ndef fonction2(a,b,c,d):\n    return(a*b*c*d*d*d)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def aire(a,b):\n    \"\"\"renvoie l'aire d'un rectangle dont les 2 c\u00f4t\u00e9s adjacents sont pass\u00e9s en param\u00e8tres\n    Param\u00e8tres d'entr\u00e9e : \n        a -&gt; int ou decimal : c\u00f4t\u00e9\n        b -&gt; int ou decimal : c\u00f4t\u00e9 adjacent\n    Param\u00e8tres de sortie : retourne --&gt; none\n    \"\"\"\n    COEFFICIENT=10\n    aire_rectangle=a*b*COEFFICIENT**2\n    print(\"L'aire d'un rectangle de mesure\",a,\"et\",b,\"qui subit un agrandissement de coefficient\",COEFFICIENT,\"est\",aire_rectangle)\n\n#volume d'un parall\u00e9l\u00e9pip\u00e8de de cot\u00e9 a,b,c qui subit un agrandissement de coefficient d\ndef volume(a,b,c,d):\n    \"\"\"renvoie le volume d'un parall\u00e9pip\u00e8de dont les 2 c\u00f4t\u00e9s adjacents sont pass\u00e9s en param\u00e8tres\n    Param\u00e8tres d'entr\u00e9e : \n        a -&gt; int ou decimal : c\u00f4t\u00e9\n        b -&gt; int ou decimal : c\u00f4t\u00e9 adjacent\n        c -&gt; int ou decimal : hauteur\n        d -&gt; Coefficient multiplicateur\n    Param\u00e8tres de sortie : retourne --&gt; volume du parall\u00e9pip\u00e8de dot\u00e9 d'un cef multiplicateur\n    \"\"\"\n    COEFFICIENT=d\n    return(a*b*c*COEFFICIENT**3)\n</code></pre> <p>exercice 5 : Myst\u00e8re</p> Enonc\u00e9Correction <p>Comprendre ce que fait le code suivant et corriger tous les probl\u00e8mes de sp\u00e9cification</p> \ud83d\udc0d Script Python<pre><code>def fonction1(a):\n    print(\"1 - jouer \u00e0 la bataille navale\")\n    print(\"2 - jouer au puissance 4\")\n    print(\"3 - quitter\")\n    a=input(\"Taper votre choix 1 ou 2 ou 3:\")\n    while a!=\"1\" or a!=\"2\" or a!=\"3\":\n        a=input(\"Taper votre choix :\")\n    return(a)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def console_jeu_choix():\n    \"\"\"Fonction de menu de la console de jeu\n    Param\u00e8tres d'entr\u00e9e : none\n    Param\u00e8tres de sortie : retourne --&gt; choix\n    \"\"\"\n    print(\"1 - jouer \u00e0 la bataille navale\")\n    print(\"2 - jouer au puissance 4\")\n    print(\"3 - quitter\")\n    a=int(input(\"Taper votre choix 1 ou 2 ou 3:\"))\n    #Tant que l'utilisateur n'a pas choisi son menu correctement, on l'interroge\n    while a!=\"1\" or a!=\"2\" or a!=\"3\" :\n        a=int(input(\"Taper votre choix :\"))\n    return(a)\n</code></pre> <p>exercice 6 : Coder \u00e0 partir de la sp\u00e9cification</p> Enonc\u00e9Correction <p>Vous devez \u00eatre capable de programmer une fonction \u00e0 partir de sa sp\u00e9cification.</p> \ud83d\udc0d Script Python<pre><code>    def encoder(chaine):\n    '''\n    Encode une cha\u00eene de caract\u00e8re en son \u00e9quivalent ASCII \n\n    Param\u00e8tres d\u2019entr\u00e9e : chaine de caract\u00e8re -&gt; char\n    Param\u00e8tre de sortie : encodage ASCII -&gt; int\n    '''\n        # votre code ici\n</code></pre> \ud83d\udc0d Script Python<pre><code>def encoder(chaine): \n    \"\"\"\n    Encode une cha\u00eene de caract\u00e8re en son \u00e9quivalent ASCII \n    Param\u00e8tres d\u2019entr\u00e9e : chaine de caract\u00e8re -&gt; char \n    Param\u00e8tre de sortie : encodage ASCII -&gt; int\n    \"\"\"\n    #Initialisation de la chaine de caract\u00e8re que l'on utiliser pour concat\u00e9ner\n    machAscii = ''\n    #Parcours par \u00e9l\u00e9ment de la chaine de caract\u00e8re pass\u00e9e en param\u00e8tre\n    for lettre in chaine :\n        #ord renvoie un entier, il faut caster en string pour pour concat\u00e9ner\n        machAscii += str(ord(lettre))\n    #On doit renvoyer un entier conform\u00e9ment aux sp\u00e9cifications, on caste en int la chaine de caract\u00e8re\n    return int(machAscii)\n</code></pre>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#7-mise-au-point-de-programme-les-tests","title":"7. Mise au point de programme : Les tests","text":"<p>De toute \u00e9vidence, le code qu'on \u00e9crit n'a aucune assurance de fonctionner si on ne le teste pas ... Un programmme peut fonctionner, dans le sens o\u00f9 il ne plante pas mais o\u00f9 il ne fait pas du tout ce qu'on lui demande ...</p> <p>Ce qui doit \u00eatre Tester :   Cas correct   Cas faux   Cas limite </p> <p>Exemple avec la fonction qui teste si des nombres sont en ordres croissants.</p> \ud83d\udc0d Script Python<pre><code>def croissant(a,b,b):\n  \"\"\"Fonction de test de la croissance d\u2019une suite de nombre\n  Param\u00e8tres d'entr\u00e9e : a,b,c -&gt; int ou float\n  Param\u00e8tres de sortie : retourne -&gt; valeur bool\u00e9enne \n                (True si a,b,c sont tels que a&lt;b&lt;c ; False sinon)\n  \"\"\"\n    Return a&lt;b&lt;c\n\n  # Jeu d'essai\n  assert(croissant(1,5,9)==True) #je teste le cas o\u00f9 les nombres sont croissants --&gt; Cas normal\n  assert(croissant(1,5,2)==False) #je teste le cas o\u00f9 les nombres ne sont pas croissants --&gt; Cas faux\n  assert(croissant(7,3,4)==False) #je teste le cas o\u00f9 les nombres sont d\u00e9croissants --&gt; Cas faux\n  assert(croissant(5,5,5)==False) #je teste le cas o\u00f9 les nombres sont tous \u00e9gaux --&gt; Cas limite\n</code></pre> <p>Il existe plusieurs approches en Python pour s'assurer qu'un code fonctionne.</p>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#8-ecrire-les-tests-soi-meme","title":"8. \u00c9crire les tests soi m\u00eame","text":"<p>Le moyen le plus simple consiste \u00e0 \u00e9crire un jeu de test apr\u00e8s <code>if __name__=\"__main__</code> \u00e0 l'aide de print : \ud83d\udc0d Script Python<pre><code>def ma_fonction(n):\n  #code ici\n  pass\n\nif __name__ == '__main__':\n    print(ma_fonction(5))\n</code></pre></p> <p>C'est g\u00e9n\u00e9ralement ce qu'on fait quand on d\u00e9veloppe. Ces tests doivent couvrir tous les cas possibles et \u00eatre compr\u00e9hensibles.</p> <p>Selon les contextes (devoir, projet, d\u00e9veloppement en cours\u2026) on peut les laisser ou les effacer. Il est pr\u00e9f\u00e9rable de les remplacer par de vrais tests\u2026 </p>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#9-assert","title":"9. Assert","text":"<p>Python int\u00e8gre un mot clef <code>assert</code> qui va lever une exception <code>AssertionError</code> si la condition qui suit est fausse: \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; assert 1 == 1 # ne fait rien\n&gt;&gt;&gt; assert 1 == 2 # plante le programme\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre></p> <p>C'est le moyen le plus efficace et rapide de tester un programme ou une fonction. Il ne faut pas int\u00e9grer les assertions \u00e0 la fonction elle-m\u00eame. Il est pr\u00e9f\u00e9rable de les int\u00e9grer \u00e0 des fonctions de tests ind\u00e9pendantes du programme.</p> <p>Un exemple sur la suite de Fibonacci</p> <p>Prenons la fonction qui affiche la suite de Fibonacci. Elle utilise une structure que vous connaissez la liste.</p> \ud83d\udc0d Script Python<pre><code>    def fibonacci(n):\n    '''\n    Liste des termes de la suite de Fibonacci de l'indice 0 \u00e0 l'indice n inclus\n\n    Param\u00e8tres d\u2019entr\u00e9e :  n-&gt;int : l'indice maximal voulu\n    Param\u00e8tres de sortie : suite_fibonacci -&gt; list : la liste des termes\n    '''\n    if type(n) != int or n &lt; 0:\n        return None\n    x = 1\n    y = 1\n    suite_fibonacci = [x]\n    indice = 0\n    while indice &lt; n:\n        x, y = y, x + y\n        suite_fibonacci.append(x)\n        indice += 1\n    return suite_fibonacci\n</code></pre> <p>On peut tester plusieurs choses :    La taille de la liste : n + 1     Diff\u00e9rents r\u00e9sultats : 0, 1, 5 etc.    Les \u00e9l\u00e9ments de la liste sont des entiers    La propri\u00e9t\u00e9 de Fibonacci : un+un+1=un+2    La sortie dans les cas impossibles : param\u00e8tre n\u00e9gatif, param\u00e8tre non entier</p> \ud83d\udc0d Script Python<pre><code>def tester_fibonacci():\n    '''\n    Teste certaines propri\u00e9t\u00e9s de la fonction Fibonacci\n\n    Param\u00e8tres de sortie : None\n    Conditions d\u2019utilisation : l\u00e8ve une exception AssertionError \n            si la fonction est mal programm\u00e9e\n    '''\n    fib_10 = fibonacci(10)\n\n    # longueur de la liste\n    assert len(fib_10) == 11\n\n    # diff\u00e9rents r\u00e9sultats\n    assert fibonacci(0) == [1]\n    assert fibonacci(1) == [1, 1]\n    assert fibonacci(5) == [1, 1, 2, 3, 5, 8]\n\n    # ses \u00e9l\u00e9ments sont entiers\n    for terme in fib_10:\n        assert type(terme) == int\n\n    # La propri\u00e9t\u00e9 de r\u00e9currence\n    assert fib_10[-3] + fib_10[-2] == fib_10[-1]\n\n    # Valeur de retour dans les cas impossibles\n    assert fibonacci(-1) == None\n    assert fibonacci('a') == None\n    assert fibonacci(3.14) == None\n</code></pre>"},{"location":"T5_Algorithmique/5.0_specifications/cours/#9-doctest","title":"9. Doctest","text":"<p>Note : La r\u00e9daction de la Docstring est libre. Les deux notations suivantes sont correctes. Prenez celle qui vous para\u00eet naturelle.</p> <p>Doctest de fibonacci</p> \ud83d\udc0d Script Python<pre><code>    '''\n    Teste certaines propri\u00e9t\u00e9s de la fonction Fibonacci\n\n    Param\u00e8tres de sortie : None\n    Conditions d\u2019utilisation : l\u00e8ve une exception AssertionError \n            si la fonction est mal programm\u00e9e\n    '''\n    ou\n\n    \"\"\"\n    Calcule produit de a et b\n    @param a: (number, str, list) premier facteur\n    @param b: (number, str, list) second facteur\n    @return: (number, str, list) le produit\n\n    \"\"\"\n</code></pre> <p>Mais revenons \u00e0 l\u2019utilisation de <code>Doctest</code>, qui s\u2019int\u00e8gre naturellement \u00e0 la docstring. Python permet gr\u00e2ce au module <code>doctest</code> d'int\u00e9grer les tests \u00e0 la documentation. Il est parfois d\u00e9licat de tester certaines fonctions, en particulier les affichages. Pour les fonctions qui r\u00e9alisent des calculs cela reste pratique.</p> <p>Un exemple qui fonctionne bien : </p> <p>\ud83d\udc0d Script Python<pre><code>def multiple (a, b):\n    \"\"\"\n    Calcule produit de a et b\n    @param a: (number, str, list) premier facteur\n    @param b: (number, str, list) second facteur\n    @return: (number, str, list) le produit\n\n    &gt;&gt;&gt; multiply(4, 3)\n    12\n    &gt;&gt;&gt; multiply('a', 3)\n    'aaa'\n    \"\"\"\n    return a * b\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod() # s'il ne se passe rien, les test sont justes\n</code></pre> Quand on ex\u00e9cute le programme, il ne se passe rien.</p> <p>Un exemple qui \u00e9choue :</p> \ud83d\udc0d Script Python<pre><code>def Fonction_mal_testee():\n    '''\n    Simple fonction qui echoue\n    &gt;&gt;&gt; Fonction_mal_testee()\n    3\n    '''\n    return 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()  # s'il ne se passe rien, les tests sont justes.\n</code></pre> <p>Voici la sortie d'un exemple qui \u00e9choue</p> \ud83d\udccb Texte<pre><code>&gt;&gt;&gt; python3 2_tester_doctest.py\n**********************************************************************\nFile \"/home/quentin/realiser_des_tests/2_tester_doctest.py\", line 5,\nin __main__.Fonction_mal_testee\nFailed example:\n    Fonction_mal_testee()\nExpected:\n    3\nGot:\n    2\n\ufffc\n**********************************************************************\n1 items had failures:\n1 of   1 in __main__.Fonction_mal_testee\n***Test Failed*** 1 failures.\n</code></pre> <p>A faire</p> Enonc\u00e9Correction <p>Reprendre le code de la fonction <code>mettre_au_carre</code> et indiquer les asserts n\u00e9cessaires pour tester la fonction.</p> \ud83d\udc0d Script Python<pre><code>def mettre_au_carre(x):\n    \"\"\"renvoie le carr\u00e9 de x\n\n    Param\u00e8tres d\u2019entr\u00e9e : x -&gt; (int, float ou decimal) : un nombre quelconque\n    Param\u00e8tre de sortie : Un nombre -&gt; (int, float ou decimal)\n    \"\"\"\n    return(x*x)\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert mettre_au_carre(2)==4\nassert mettre_au_carre(0)==0\nassert mettre_au_carre(-3)==9\n</code></pre> <p>Pour aller plus loin : </p> <p>Des tests unitaires en python</p> <p>les docstrings</p>"},{"location":"T5_Algorithmique/5.0_specifications/exercices/","title":"5.0 Exercices Sp\u00e9cifications et tests","text":"<p>Exigence !</p> <p>Pour chacun des exercices ci-dessous, vous devez r\u00e9diger l'ent\u00eate de la donction (docstring) puis les tests n\u00e9cessaires (assert)</p> <p>Les exercices ci dessous sont des r\u00e9visions d'algorithmie et reprennent \u00e9galement ce que vous avez vu sur les listes.</p> <p>Vous pouvez t\u00e9l\u00e9charger le fichier notebook d'exercice.</p> <p>Exercice 1</p> Enonc\u00e9correction <p>On rappelle que la fonction <code>randint(a, b)</code> du module <code>random</code> permet de tirer un nombre au hasard entre <code>a</code> et <code>b</code> compris.  En particulier elle permet de tirer l'indice d'un \u00e9l\u00e9ment de tableau au hasard ...</p> \ud83d\udc0d Script Python<pre><code>import random\n\ndef tirer_une_carte():\n    couleurs = ('pique','tr\u00e8fle','coeur','carreau')\n    valeurs = ('7', '8', '9', '10', 'V', 'D', 'R', 'AS')\n    # \u00e0 compl\u00e9ter ...\n    #x = random.randint( ...\n    #\n    #\n    #\n    #\n    #return ...\n</code></pre> <p>ici, avec le module random, est il possible de r\u00e9diger un test d'\u00e9galit\u00e9  exemple <code>assert tirer_une_carte() == 1</code>  Si non, Comment peut-on  faire autrement ?</p> \ud83d\udc0d Script Python<pre><code>import random\n\ndef tirer_une_carte():\n    couleurs = ('pique','tr\u00e8fle','coeur','carreau')\n    valeurs = ('7', '8', '9', '10', 'V', 'D', 'R', 'AS')\n    indice_c = random.randint(0,len(couleurs)-1)\n    indice_v = random.randint(0,len(valeurs)-1)\n    coul = couleurs[indice_c]\n    val = valeurs[indice_v]\n    return (val, coul)\n    # ou return (couleurs[indice_c],valeurs[indice_v])\n\nassert len(tirer_une_carte())==2 #Test sur la longueur de la valeur de retour\nassert type(tirer_une_carte()) == tuple  #Test sur le type de la valeur de retour\nassert tirer_une_carte()[0] in ('7', '8', '9', '10', 'V', 'D', 'R', 'AS')\nassert tirer_une_carte()[1] in ('pique','tr\u00e8fle','coeur','carreau')\n#ou\ncarte=tirer_une_carte()\nassert carte[0] in ('7', '8', '9', '10', 'V', 'D', 'R', 'AS')\n</code></pre> <p>Exercice 2</p> Enonc\u00e9Correction <p>On vous donne une liste et on veut \u00e9crire une fonction qui retourne le nombre d'\u00e9l\u00e9ment de cette liste qui sont sup\u00e9rieurs ou \u00e9gaux \u00e0 100.  1. Ecrire la fonction document\u00e9e correspondant \u00e0 ce besoin 2. r\u00e9diger les tests n\u00e9cessaires pour tester tous les cas. 3. R\u00e9diger le test pour la liste <code>[50*i for i in range(7)]</code></p> \ud83d\udc0d Script Python<pre><code>def compter_occurences_sup100(uneliste):\n\"\"\"\nfonction qui compte dans une liste le nombre d'occurrences sup\u00e9rieur \u00e0 100\n\nParam\u00e8tre d'entr\u00e9e : uneliste : type liste : liste d'entiers.\nParam\u00e8tre de sortie : un entier : compteur d'occurrence\n\"\"\"\n    #initialistaion du compteur d'occurrence\n    compteur = 0\n    #Boucle qui analyse chaque \u00e9l\u00e9ment de la liste\n    for elt in uneliste:\n        #Test de sup\u00e9riorit\u00e9 \u00e0 100 de l'\u00e9l\u00e9ment \n        if elt &gt;= 100:\n            #Incr\u00e9mentation du compteur\n            compteur = compteur + 1\n    return compteur\n\nassert compter_occurences_sup100([100,20,50,150,240,99]) == 3\n#Cas limite toutes les occurrences &gt; 100\nassert compter_occurences_sup100([200,500,300]) == 3\n#Cas limite aucune occurrence &gt; 100\nassert compter_occurences_sup100([1,2,3,5,2]) == 0\n#Cas limite de la liste vide\nassert compter_occurences_sup100([]) == 0\n\nlist2 = [50*i for i in range(7)]\nassert compter_occurences_sup100(list2) == 5\n</code></pre> <p>Exercice 3</p> Fonction 1Fonction 2Fonction 3Correction 1Correction 2Correction 3 <p>Sur les fonctions suivantes, Documentez la fonction et d\u00e9terminer les assertions \u00e0 mettre en oeuvre pour tester ces fonctions. Corriger si n\u00e9cessaire le code de la fonction pour qu'elle fonctionne comme l'indique le bref commentaire.</p> \ud83d\udc0d Script Python<pre><code>def echange_v1(liste):\n    \"\"\"modifie la liste, la met dans l'ordre inverse\"\"\"\n    n=len(liste)\n    for i in range(n):\n        liste[i], liste[n-1-i] = liste[n-1-i], liste[i]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def echange_v2(liste):\n    \"\"\"modifie la liste, la met dans l'ordre inverse\"\"\"\n    n=len(liste)\n    for i in range(n//2):\n        liste[i]=liste[n-1-i]\n        liste[n-1-i]=liste[i]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ajoutUnListe(liste):\n    \"\"\"modifie la liste, ajoute 1 \u00e0 chacun des termes\"\"\"\n    n= len(liste)\n    for i in range(1, n+1):\n        liste[i] = liste[i]+1\n</code></pre> \ud83d\udc0d Script Python<pre><code>def echange_v1(liste):\n\"\"\"\nmodifie la liste, la met dans l'ordre inverse\n@param d'entr\u00e9e : liste : type List : liste \u00e0 renverser\n@param de sortie : Liste : typ List : Liste renvers\u00e9e\n\"\"\"\n    n=len(liste)\n    #Il faut s'arr\u00eater \u00e0 la moiti\u00e8 de la liste sinon on defait ce que l'on vient de faire\n    for i in range(n//2):\n        liste[i], liste[n-1-i] = liste[n-1-i], liste[i]\n    #il faut retourner la liste\n    return liste\n\n#cas 1 : liste avec un nombre pair d'items\nl1 = [1,2,3,4]\nassert echange_v1(l1) == [4,3,2,1]\n#cas 2 : liste avec un nombre impair d'items\nl2 = [1,2,3]\nassert echange_v1(l2) == [3,2,1]\n#Cas limite : liste vide\nassert echange_v1([]) == []\n</code></pre> \ud83d\udc0d Script Python<pre><code>def echange_v2(liste):\n    \"\"\"modifie la liste, la met dans l'ordre inverse\"\"\"\n    n=len(liste)\n    for i in range(n//2):\n        #on perd liste[i] en l'\u00e9crasant avec la valeur de liste[n-1-i]\n        #Il faut passer par une variable temporaire pour ne pas perdre la valeur\n        temp  = liste[i]\n        liste[i]=liste[n-1-i]\n        liste[n-1-i]=temp\n    #il faut retourner la liste\n\n#cas 1 : liste avec un nombre pair d'items\nl1 = [1,2,3,4]\nassert echange_v2(l1) == [4,3,2,1]\n#cas 2 : liste avec un nombre impair d'items\nl2 = [1,2,3]\nassert echange_v2(l2) == [3,2,1]\n#Cas limite : liste vide\nassert echange_v2([]) == []\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ajoutUnListe(liste):\n    \"\"\"modifie la liste, ajoute 1 \u00e0 chacun des termes\"\"\"\n    n= len(liste)\n    #Il faut commencer \u00e0 l'indice 0\n    #et Il faut s'arr\u00eater un cran avant la fin de la liste\n    for i in range(n):\n        liste[i] = liste[i]+1\n    #il faut retourner la liste\n    return liste\n\nl3 = [1,2,3]\nassert ajoutUnListe(l3) == [2,3,4]\n#Cas limite : liste vide\nassert ajoutUnListe([]) == []\n</code></pre> <p>Recherche d'extremum dans une liste </p> Activit\u00e9 d\u00e9branch\u00e9eCr\u00e9ation d'une fonction <code>maximum(liste)</code>Correction <p>Vous disposez d'un paquet de cartes m\u00e9lang\u00e9s.</p> <p>Vous disposez aussi d'un emplacement \"support\" nomm\u00e9e <code>m</code>.  </p> <p></p> <p> Exprimer oralement l'algorithme permettant de trouver quelle est la carte portant la valeur maximale.</p> <p>Attention : nous allons recr\u00e9er une fonction qui, bien s\u00fbr, existe d\u00e9j\u00e0 en Python, sous le nom <code>max()</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>def maxi(liste) :\n    return max(liste)\n#Un peu trop simple, n'est ce pas !!\n</code></pre>  Ecrire l'algorithme en Python.  </p> <p>Il vous est demand\u00e9 de construire une fonction nomm\u00e9e <code>maximum()</code>, qui prenne en argument une liste, et qui renvoie le plus grand nombre de cette liste.</p> <p>Vous prendrez soin de documenter et tester votre fonction.</p> <p>Exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maximum([3,1,6,2])\n&gt;&gt;&gt; 6\n</code></pre> \ud83d\udc0d Script Python<pre><code>def maximum(liste):\n    #Traitement du cas limite de la recherche sur une liste vide\n    if len(liste)==0 :\n        return None\n    #par defaut, le plus petit \u00e9lt est le premier de la liste\n    m = liste[0]\n    #Parcours de la liste, et on compare chaque elt avec le dernier maximum trouv\u00e9\n    for element in liste :\n        if element &gt; m :\n            m = element\n    #On retourne le dernier maximum trouv\u00e9\n    return m    \n\n#Cas classique avec la valeur positionn\u00e9e au milieu\nassert maximum([3,1,6,2])== 6\n#Cas classique avec la valeur positionn\u00e9e en premier\nassert maximum([9,1,6,2])== 9\n#Cas classique avec la valeur positionn\u00e9e en dernier\nassert maximum([3,1,6,9])== 9\n#Cas limite d'une liste vide\nassert maximum([]) == None\n</code></pre> <p>Calcul de la moyenne des termes d'une liste </p> Enonc\u00e9Correction <p>Cr\u00e9er une fonction <code>moyenne()</code> qui prenne en argument une liste et qui renvoie la moyenne des nombres de cette liste.</p> <p>Vous prendrez soin de documenter et tester votre fonction.</p> \ud83d\udc0d Script Python<pre><code>def moyenne(liste):\n    #Cas de la liste vide\n    if len(liste)==0 :\n        return 0\n    #Initialisation de la somme des termes de la liste\n    som = 0\n    #Parcours de la liste par \u00e9l\u00e9ment\n    for k in liste :\n        #On somme les \u00e9l\u00e9ment de la liste\n        som += k\n    return som/len(liste)\n\nassert moyenne([1,2,3,4,5]) == 3\nassert moyenne([]) == 0 \n</code></pre> \ud83d\udc0d Script Python<pre><code>#Autre solution plus simple en utilisant la fonction somme de Python ...\ndef moyenne(liste):\n    #Cas de la liste vide\n    if len(liste)==0 :\n        return 0\n    return sum(liste)/len(liste)\n\nassert moyenne([1,2,3,4,5]) == 3 #Cas normal\nassert moyenne([]) == 0  #Cas limite de la liste vide\n</code></pre> <p>Recherche d'un \u00e9l\u00e9ment dans une liste </p> Enonc\u00e9Correction avec forCorrection avec While <p>Cr\u00e9er une fonction <code>recherche()</code> qui prenne en argument une liste et qui renvoie la moyenne des nombres de cette liste.</p> <p>Vous prendrez soin de documenter et tester votre fonction. Vous ne devez pas utilisez la mot cl\u00e9 <code>in</code> ...</p> \ud83d\udc0d Script Python<pre><code>def recherche(liste, elt) :\n    return elt in liste\n#Un peu trop simple, n'est ce pas !!\n</code></pre> \ud83d\udc0d Script Python<pre><code>def recherche(liste, elt):\n    #Cas de la liste vide\n    if len(liste)==0 :\n        return False\n    #On parcourt la liste par \u00e9l\u00e9ment\n    for element in liste :\n        #Si on trouve l'\u00e9l\u00e9ment, on s'arr\u00eate et on renvoie Vrai\n        if element == elt :\n            return True\n    #Si on a parcouru la liste sans le trouver, c'est qu'il n'est pas pr\u00e9sent, on renvoie donc False\n    return return False\n\nassert recherche([1,2,3,4,5], 3) == True #Cas normal : l'\u00e9l\u00e9ment est pr\u00e9sent \nassert recherche([1,2,3,4,5], 8) == False #Cas Faux : l'\u00e9l\u00e9ment n'est pas pr\u00e9sent \nassert recherche([], 8) == False #Cas limite de la liste vide\n</code></pre> \ud83d\udc0d Script Python<pre><code>def recherche(liste, elt):\n    #Cas de la liste vide\n    if len(liste)==0 :\n        return False\n    #Initialisation du compteur pour la boucle While\n    i = 0\n    #On parcours la liste tant que l'on n'a pas trouv\u00e9 la liste ou que l'on n'est pas \u00e0 la fin de la liste\n    while liste[i] != elt and i&lt;len(liste) :\n        i +=1\n    #On est sorti de la boucle soit parce que l'on a trouv\u00e9 l'\u00e9l\u00e9ment\n    if liste[i] == elt :\n        return True\n    #Soit parce que l'on est \u00e0 la fin de la liste\n    else : return False\n\nassert recherche([1,2,3,4,5], 3) == True\nassert recherche([1,2,3,4,5], 8) == False\nassert recherche([], 8) == False \n</code></pre>"},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/","title":"Exercices Sp\u00e9cifications et tests","text":"<p>Pour chacun des exercices ci-dessous, vous devez r\u00e9diger l'ent\u00eate de la donction (docstring) puis les tests n\u00e9cessaires (assert)</p> <p>Les exercices ci dessous sont des r\u00e9visions d'algorithmie et reprennent \u00e9galement ce que vous avez vu sur les listes.</p> In\u00a0[\u00a0]: Copied! <pre>import math\n</pre> import math  In\u00a0[\u00a0]: Copied! <pre>def ma_fonction1(x): \n    return(x*math.pi/180)\n</pre> def ma_fonction1(x):      return(x*math.pi/180)  In\u00a0[\u00a0]: Copied! <pre>def ma_fonction2(x): \n    return(math.cos(ma_fonction1(x)))\n</pre> def ma_fonction2(x):      return(math.cos(ma_fonction1(x))) In\u00a0[\u00a0]: Copied! <pre>import random\n\ndef tirer_une_carte():\n    couleurs = ('pique','tr\u00e8fle','coeur','carreau')\n    valeurs = ('7', '8', '9', '10', 'V', 'D', 'R', 'AS')\n    # \u00e0 compl\u00e9ter ...\n    #x = random.randint( ...\n    #\n    #\n    #\n    #\n    #return ...\n</pre> import random  def tirer_une_carte():     couleurs = ('pique','tr\u00e8fle','coeur','carreau')     valeurs = ('7', '8', '9', '10', 'V', 'D', 'R', 'AS')     # \u00e0 compl\u00e9ter ...     #x = random.randint( ...     #     #     #     #     #return ... <p>ici, avec le module random, est il possible de r\u00e9diger un test d'\u00e9galit\u00e9 exemple <code>assert tirer_une_carte() == 1</code> Comment peut-on ?</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>On vous donne une liste et on veut \u00e9crire une fonction qui donne le nombre d'\u00e9l\u00e9ment de cette liste sup\u00e9rieurs ou \u00e9gaux \u00e0 100.</p> In\u00a0[3]: Copied! <pre>\n</pre> <p>R\u00e9diger le test pour la liste [100,20,50,150,240,99]</p> In\u00a0[5]: Copied! <pre>li1 = [100,20,50,150,240,99]\n</pre> li1 = [100,20,50,150,240,99]  <p>R\u00e9diger le test pour la liste [50*i for i in range(7)]</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Sur les fonctions suivantes, d\u00e9terminer les assertions \u00e0 mettre en oeuvre pour tester ces fonctions. Et corriger si n\u00e9cessaire le code de la fonction pour qu'elle fonctionne comme l'indique sa sp\u00e9cifications</p> In\u00a0[6]: Copied! <pre>def echange_v1(liste):\n    \"\"\"modifie la liste, la met dans l'ordre inverse\"\"\"\n    n=len(liste)\n    for i in range(n):\n        liste[i], liste[n-1-i] = liste[n-1-i], liste[i]\n</pre> def echange_v1(liste):     \"\"\"modifie la liste, la met dans l'ordre inverse\"\"\"     n=len(liste)     for i in range(n):         liste[i], liste[n-1-i] = liste[n-1-i], liste[i] In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[11]: Copied! <pre>def echange_v2(liste):\n    \"\"\"modifie la liste, la met dans l'ordre inverse\"\"\"\n    n=len(liste)\n    for i in range(n//2):\n        liste[i]=liste[n-1-i]\n        liste[n-1-i]=liste[i]\n</pre> def echange_v2(liste):     \"\"\"modifie la liste, la met dans l'ordre inverse\"\"\"     n=len(liste)     for i in range(n//2):         liste[i]=liste[n-1-i]         liste[n-1-i]=liste[i] In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>def ajoutUnListe(liste):\n    \"\"\"modifie la liste, ajoute 1 \u00e0 chacun des termes\"\"\"\n    n= len(liste)\n    for i in range(1, n+1):\n        liste[i] = liste[i]+1\n</pre> def ajoutUnListe(liste):     \"\"\"modifie la liste, ajoute 1 \u00e0 chacun des termes\"\"\"     n= len(liste)     for i in range(1, n+1):         liste[i] = liste[i]+1 In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>def maximum(l) :\n    \"\"\"\n    Ecrire ici la docstring\n    \"\"\"\n</pre> def maximum(l) :     \"\"\"     Ecrire ici la docstring     \"\"\"           In\u00a0[\u00a0]: Copied! <pre>#Cas classique avec la valeur positionn\u00e9e au milieu\nassert maximum([3,1,6,2])== 6\n#Cas classique avec la valeur positionn\u00e9e en premier\nassert maximum([9,1,6,2])== 9\n#Cas classique avec la valeur positionn\u00e9e en dernier\nassert maximum([3,1,6,9])== 9\n#Cas limite d'une liste vide\nassert maximum([]) == None\n</pre> #Cas classique avec la valeur positionn\u00e9e au milieu assert maximum([3,1,6,2])== 6 #Cas classique avec la valeur positionn\u00e9e en premier assert maximum([9,1,6,2])== 9 #Cas classique avec la valeur positionn\u00e9e en dernier assert maximum([3,1,6,9])== 9 #Cas limite d'une liste vide assert maximum([]) == None In\u00a0[\u00a0]: Copied! <pre>#Ecrire ici la fonction\n</pre> #Ecrire ici la fonction In\u00a0[\u00a0]: Copied! <pre>#Ecrire ici les assertions\n</pre> #Ecrire ici les assertions"},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#exercices-specifications-et-tests","title":"Exercices Sp\u00e9cifications et tests\u00b6","text":""},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#exercice-1","title":"Exercice 1\u00b6","text":"<p>On rappelle que la fonction <code>randint(a, b)</code> du module <code>random</code> permet de tirer un nombre au hasard entre <code>a</code> et <code>b</code> compris.  En particulier elle permet de tirer l'indice d'un \u00e9l\u00e9ment de tableau au hasard ...</p>"},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#exercice-2","title":"Exercice 2\u00b6","text":""},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#exercice-3","title":"Exercice 3\u00b6","text":""},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#exercice-4-recherche-dextremum-dans-une-liste","title":"Exercice 4 : Recherche d'extremum dans une liste\u00b6","text":""},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#activite-debranchee","title":"Activit\u00e9 d\u00e9branch\u00e9e\u00b6","text":"<p>Vous disposez de petits papiers num\u00e9rot\u00e9es 3, 2, 4, 6, 9, 1, 5 dispos\u00e9es dans n'importe quel ordre.</p> <p>Vous disposez aussi d'un emplacement \"support\" nomm\u00e9e <code>m</code>.</p> <p></p> <p>Exprimer oralement l'algorithme permettant de trouver quelle est la carte portant la valeur maximale.</p>"},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#creation-dune-fonction-maximumliste","title":"Cr\u00e9ation d'une fonction <code>maximum(liste)</code>\u00b6","text":"<p>Attention : nous allons recr\u00e9er une fonction qui, bien s\u00fbr, existe d\u00e9j\u00e0 en Python, sous le nom <code>max()</code>.</p> <p>Ecrire l'algorithme en Python. Il est express\u00e9ment demand\u00e9 de construire une fonction nomm\u00e9e <code>maximum()</code>, qui prenne en argument une liste, et qui renvoie le plus grand nombre de cette liste.</p> <p>Exemple d'utilisation :</p> <pre>&gt;&gt;&gt; maximum([3,1,6,2])\n&gt;&gt;&gt; 6\n</pre>"},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#exercice-5","title":"Exercice 5\u00b6","text":""},{"location":"T5_Algorithmique/5.0_specifications/data/Exercices_specifications/#calcul-de-la-moyenne-des-termes-dune-liste","title":"Calcul de la moyenne des termes d'une liste\u00b6","text":"<p>Cr\u00e9er une fonction <code>moyenne()</code> qui prenne en argument une liste et qui renvoie la moyenne des nombres de cette liste.</p>"},{"location":"T5_Algorithmique/5.1_Extremums_et_moyennes/cours/","title":"4.1 Extremums et moyennes","text":""},{"location":"T5_Algorithmique/5.1_Extremums_et_moyennes/cours/#1-algorithme-de-recherche-de-maximum","title":"1. Algorithme de recherche de maximum","text":"<p>Recherche de maximum </p> \ud83d\udc0d Script Python<pre><code>def recherche_max(tab):\n    '''renvoie le maximum de la liste tab'''\n    maxi = tab[0]           # (1)\n    for elt in tab:\n        if elt &gt; maxi:\n            maxi = elt\n    return maxi\n</code></pre> <ol> <li>On initialise le maximum avec la premi\u00e8re valeur du tableau (surtout pas avec 0 ou \u00abmoins l'infini\u00bb !)</li> </ol> <p>Utilisation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_max([4, 3, 8, 1])\n  8\n</code></pre></p>"},{"location":"T5_Algorithmique/5.1_Extremums_et_moyennes/cours/#2-algorithme-de-calcul-de-moyenne","title":"2. Algorithme de calcul de moyenne","text":"<p>Calcul de moyenne </p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    ''' renvoie la moyenne de tab'''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre> <p>Utilisation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([4, 3, 8, 1])\n  4.0\n</code></pre></p>"},{"location":"T5_Algorithmique/5.1_Extremums_et_moyennes/cours/#3-algorithme-de-recherche-doccurrence","title":"3. Algorithme de recherche d'occurrence","text":"<p>Recherche d'occurrence </p> \ud83d\udc0d Script Python<pre><code>def recherche_occurrence(elt, tab):\n    ''' renvoie la liste (\u00e9ventuellement vide)\n    des indices de elt dans tab'''\n    liste_indice = []\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            liste_indice.append(i)\n    return liste_indice\n</code></pre> <p>Recherche d'occurrence avec While </p> \ud83d\udc0d Script Python<pre><code>def recherche(liste, element) :\n    i=0\n    while  i&lt;len(liste) and liste[i]!=element:\n        i += 1\n    if (i&lt;len(liste) and liste[i]==element):\n        return True\n    else : return False\n#Autre solution en utilisant un booleen \ndef recherche2(liste, element):\n    i=0\n    trouve=False\n    while i&lt;len(liste) and not trouve:\n        if liste[i]==element:\n            trouve=True\n            break\n        i = i + 1\n    return trouve\n</code></pre> <p>Utilisation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_occurrence(3, [1, 6, 3, 8, 3, 2])\n[2, 4]\n&gt;&gt;&gt; recherche_occurrence(7, [1, 6, 3, 8, 3, 2])\n[]\n</code></pre></p>"},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/","title":"Complexit\u00e9 d'un algorithme","text":"<p>La complexit\u00e9 d'un algorithme est une notion qui nous \u00e9claire sur le nombre d'op\u00e9rations dont a besoin l'algorithme pour s'achever.  Mais attention : on donne un ordre d'id\u00e9e du nombres d'op\u00e9rations n\u00e9cessaires, en fonction de la taille $n$ des donn\u00e9es d'entr\u00e9e de l'algorithme.</p> <p>R\u00e9ponse :</p> <p>Cela prendra deux fois plus de temps, donc $2T$.</p> <p>On dit que l'algorithme est de complexit\u00e9 lin\u00e9aire. On dit aussi qu'il est d'ordre n. On pourra aussi rencontrer l'expression math\u00e9matique \u00ab la complexit\u00e9 est en $O(n)$ \u00bb, qui se lit \u00abla complexit\u00e9 est en grand o de n \u00bb. Toutes ces formulations renvoient \u00e0 la m\u00eame id\u00e9e : le nombre d'op\u00e9rations n\u00e9cessaires (et donc le temps n\u00e9cessaire \u00e0 la terminaison de l'algorithme) \u00e9volue proportionnellement avec le nombre de donn\u00e9es \u00e0 traiter.</p> In\u00a0[8]: Copied! <pre>def fabrique(n):\n    liste = []\n    for k in range(n):\n        liste.append(\"ok\")\n    return liste\n</pre> def fabrique(n):     liste = []     for k in range(n):         liste.append(\"ok\")     return liste <p>Jupyter permet l'utilisation de la fonction magique %timeit, qui mesure le temps moyen d'un code sur un tr\u00e8s grand nombre d'ex\u00e9cutions.</p> <p>Que pensez-vous des r\u00e9sultats suivants ?</p> In\u00a0[9]: Copied! <pre>%timeit fabrique(100)\n</pre> %timeit fabrique(100) <pre>5.76 \u00b5s \u00b1 27.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</pre> In\u00a0[10]: Copied! <pre>%timeit fabrique(1000)\n</pre> %timeit fabrique(1000) <pre>60.6 \u00b5s \u00b1 1.16 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n</pre> In\u00a0[11]: Copied! <pre>%timeit fabrique(5000)\n</pre> %timeit fabrique(5000) <pre>308 \u00b5s \u00b1 1.97 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</pre> In\u00a0[4]: Copied! <pre>def recherche(liste, element) :\n</pre> def recherche(liste, element) :        <p>Exemples d'utilisation</p> In\u00a0[5]: Copied! <pre>mylist = [3, 6, -2, 4]\n</pre> mylist = [3, 6, -2, 4] In\u00a0[6]: Copied! <pre>recherche(mylist, 6)\n</pre> recherche(mylist, 6) Out[6]: <pre>True</pre> In\u00a0[8]: Copied! <pre>recherche(mylist, 5)\n</pre> recherche(mylist, 5) Out[8]: <pre>False</pre> <p>Quelle est la complexit\u00e9 de cette fonction ? Si l'\u00e9l\u00e9ment recherch\u00e9 est au tout d\u00e9but de la liste, la taille de la liste n'a aucune influence et la complexit\u00e9 est constante. Par contre, si l'\u00e9l\u00e9ment recherch\u00e9 est le dernier, on a un algorithme de complexit\u00e9 lin\u00e9aire. On parle alors de complexit\u00e9 dans le pire des cas.</p> <p>r\u00e9ponse : Cela vous prendra 4 fois plus de temps.</p> <p>On dit que l'algorithme est de complexit\u00e9 quadratique. On dit aussi qu'il est d'ordre $n^2$. On pourra aussi rencontrer l'expression math\u00e9matique \u00ab la complexit\u00e9 est en $O(n^2)$ \u00bb, qui se lit \u00abla complexit\u00e9 est en grand o de n carr\u00e9 \u00bb. Toutes ces formulations renvoient \u00e0 la m\u00eame id\u00e9e : le nombre d'op\u00e9rations n\u00e9cessaires (et donc le temps n\u00e9cessaire \u00e0 la terminaison de l'algorithme) \u00e9volue proportionnellement avec le carr\u00e9 du nombre de donn\u00e9es \u00e0 traiter.</p> In\u00a0[17]: Copied! <pre>def tables(n):\n    for a in range(n):\n        for b in range(n):\n            c = a*b\n</pre> def tables(n):     for a in range(n):         for b in range(n):             c = a*b  <p>Que pensez-vous des r\u00e9sultats suivants ?</p> In\u00a0[18]: Copied! <pre>%timeit tables(100)\n</pre> %timeit tables(100) <pre>372 \u00b5s \u00b1 843 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</pre> In\u00a0[20]: Copied! <pre>%timeit tables(200)\n</pre> %timeit tables(200) <pre>1.48 ms \u00b1 6.99 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</pre>"},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#complexite-dun-algorithme","title":"Complexit\u00e9 d'un algorithme\u00b6","text":""},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#complexite-lineaire","title":"Complexit\u00e9 lin\u00e9aire\u00b6","text":"<p>Votre travail est de mettre des bulletins dans des enveloppes pour une campagne de communication. L'algorithme en jeu ici est \"je prends un bulletin, je le plie, je le mets dans l'enveloppe, je ferme l'enveloppe\". On suppose que vous travaillez \u00e0 un rythme constant. Le premier jour, on vous donne $n$ enveloppes \u00e0 remplir. Vous mettez un temps $T$ pour les traiter. Le deuxi\u00e8me jour, suite \u00e0 l'absence d'un employ\u00e9, on vous donne le double d'enveloppes, soit $2n$ enveloppes. Combien de temps allez vous mettre pour les traiter ?</p>"},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#vocabulaire","title":"Vocabulaire\u00b6","text":""},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#attention","title":"Attention\u00b6","text":"<p>Si un employ\u00e9 A met 3 secondes par enveloppe, on aura $T_A=3n$. Si un employ\u00e9 B met 20 secondes par enveloppe, on aura $T_B=20n$.</p> <p>On retrouve la formulation math\u00e9matique d'une fonction lin\u00e9aire $f$. $$f : x \\mapsto ax \\quad\\text{ , avec } a \\in \\mathbb{R}$$</p> <p>Ici, la fonction $f_A$ serait $f_A(x)=3x$, la fonction $f_B$ serait $f_B(x)=20x$</p> <p>Dans les deux cas l'algorithme a la m\u00eame complexit\u00e9 (lin\u00e9aire donc). Ce qui compte est le fait que pour chacun des employ\u00e9s, avoir deux fois plus d'enveloppes prendrait deux fois plus de temps.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#verification-experimentale","title":"V\u00e9rification exp\u00e9rimentale\u00b6","text":"<p>On consid\u00e8re la fonction ci-dessous. Que fait-elle ?</p>"},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#exercice-recherche-dun-element-dans-une-liste","title":"Exercice : recherche d'un \u00e9l\u00e9ment dans une liste\u00b6","text":"<p>\u00c9crire une fonction <code>recherche(liste, element)</code> qui renvoie <code>True</code> si <code>element</code> est dans liste, <code>False</code> s'il n'y est pas. (bien entendu, interdiction d'utiliser le mot-cl\u00e9 <code>in</code>...)</p>"},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#complexite-quadratique","title":"Complexit\u00e9 quadratique\u00b6","text":"<p>Vous avez l'habitude de tondre la pelouse de votre terrain carr\u00e9, de c\u00f4t\u00e9 $n$. Cela vous prend un certain temps $T$. Votre voisin vous propose de venir chez lui tondre son terrain carr\u00e9 de c\u00f4t\u00e9 $2n$. Combien de temps cela va-t-il vous prendre pour tondre le terrain de votre voisin ?</p> <p></p>"},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#vocabulaire","title":"Vocabulaire\u00b6","text":""},{"location":"T5_Algorithmique/5.2_Complexite/02_Complexite/#verification-experimentale","title":"V\u00e9rification exp\u00e9rimentale\u00b6","text":"<p>On consid\u00e8re la fonction ci-dessous. Que fait-elle ?</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/","title":"4.2 Complexit\u00e9 d'un algorithme","text":"Activit\u00e9 <p> Computer Paper - Do It Yourself </p> <p>Dans un article qui fera date, \u00ab On Computable Numbers with an Application to the Entscheidungsproblem \u00bb publi\u00e9 en 1936, Alan Turing, jeune math\u00e9maticien anglais, jette les bases de ce qui deviendra la th\u00e9orie de la calculabilit\u00e9 en r\u00e9pondant par la n\u00e9gative \u00e0 la question de savoir si toute proposition peut \u00eatre d\u00e9montr\u00e9e dans un syst\u00e8me formel. Pour ce faire, il imagine une machine \u00e0 calcul universelle ... en papier.</p> <p>Cette machine est compos\u00e9e d\u2019un \u00ab ruban \u00bb suppos\u00e9 infini, chaque case contenant un symbole parmi un alphabet fini, d\u2019une t\u00eate de lecture/\u00e9criture, d\u2019un registre d\u2019\u00e9tats, d\u2019une liste d\u2019instructions.</p> <p>L\u2019ordinateur - th\u00e9orique - est n\u00e9 !</p> <p>Turing d\u00e9finit le calcul sous la forme d\u2019une liste finie d\u2019instructions, it\u00e9rables un nombre ind\u00e9fini de fois. Il vient de poser les fondements de la science informatique. Il n\u2019a que 24 ans !</p> <p>Pour le centenaire de sa naissance, nous vous proposons de faire un voyage dans le temps, en construisant votre propre ordinateur en papier, \u00e0 la mani\u00e8re d\u2019Alan Turing il y a 76 ans.</p> <p>Pour r\u00e9sum\u00e9</p> <p>{: .center}  La machine de Turing, une r\u00e9volution des math\u00e9matiques et de l'informatique - Passe-science</p> <p>On retiendra ici, que le mod\u00e8le de la machine de Turing, sert d'\u00e9talon pour mesurer la complexit\u00e9 d'un algorithme : C'est l'ordre de grandeur du nombre d'op\u00e9rations \u00e9l\u00e9mentaires (lire, d\u00e9placer la t\u00eate de lecture) qu'effectuerait une machine de Turing pour effectuer l'algorithme.</p> <p>La complexit\u00e9 d'un algorithme est une notion qui nous \u00e9claire sur la mani\u00e8re dont cet algorithme va \u00eatre sensible \u00e0 la taille des donn\u00e9es pass\u00e9es en param\u00e8tre. Il y a plusieurs types de complexit\u00e9s \u00e9tudiables (nombre d'op\u00e9rations, temps n\u00e9cessaire, espace-m\u00e9moire n\u00e9cessaire...).</p> <p>En NSI, nous nous contenterons d'estimer (lorsque cela est possible) le nombre d'op\u00e9rations effectu\u00e9es par l'algorithme, et nous mesurerons les temps d'ex\u00e9cution de ces algortihmes. </p> <p>Exemple</p> <p>\ud83d\udc0d Script Python<pre><code>def fonction1(n) :\n    a=0\n    for i in range(n):\n        a=a+1\n    return a\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fonction2(n):\n    a=0\n    for i in range(n):\n        a=a+1\n    for i in range(n):\n        a=a+1\n    return a\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fonction3(n):\n    a=0\n    for i in range(n):\n        for j in range(n)\n            a=a+1\n    return a\n</code></pre></p> <p>Nous observerons surtout comment \u00e9volue ce temps d'ex\u00e9cution en fonction de la taille des donn\u00e9es pass\u00e9es en param\u00e8tre (la taille d'une liste, par exemple). Cela nous permettra dans ce cours de classer nos algorithmes en deux cat\u00e9gories : les algorithmes de complexit\u00e9 lin\u00e9aire et ceux de complexit\u00e9 quadratique.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#1-complexite-lineaire","title":"1. Complexit\u00e9 lin\u00e9aire","text":""},{"location":"T5_Algorithmique/5.2_Complexite/cours/#11-exemple","title":"1.1 Exemple","text":"<p>Exemple d'algorithme</p> <p> Votre travail est de mettre des bulletins dans des enveloppes pour une campagne de communication. L'algorithme en jeu ici est \"je prends un bulletin, je le plie, je le mets dans l'enveloppe, je ferme l'enveloppe\". </p> <p>On suppose que vous travaillez \u00e0 un rythme constant. Le premier jour, on vous donne \\(n\\) enveloppes \u00e0 remplir. Vous mettez un temps \\(T\\) pour les traiter. Le deuxi\u00e8me jour, suite \u00e0 l'absence d'un employ\u00e9, on vous donne le double d'enveloppes, soit \\(2n\\) enveloppes. Combien de temps allez vous mettre pour les traiter ?</p> R\u00e9ponse <p>Cela prendra deux fois plus de temps, donc \\(2T\\).</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#12-vocabulaire","title":"1.2 Vocabulaire","text":"<p>On dit que l'algorithme ci-dessus est de complexit\u00e9 lin\u00e9aire.  </p> <p>Complexit\u00e9 lin\u00e9aire </p> <p>Les expressions suivantes sont \u00e9quivalentes :</p> <ul> <li>L'algorithme est de complexit\u00e9 lin\u00e9aire.</li> <li>L'algorithme est d'ordre n.  </li> <li>L'algorithme est en \\(O(n)\\)  (\u00abgrand O de n\u00bb)</li> </ul> <p>Toutes ces formulations renvoient \u00e0 la m\u00eame id\u00e9e : le nombre d'op\u00e9rations n\u00e9cessaires (et donc le temps n\u00e9cessaire \u00e0 la terminaison de l'algorithme) \u00e9volue proportionnellement avec le nombre de donn\u00e9es \u00e0 traiter.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#13-formulation-mathematique","title":"1.3 Formulation math\u00e9matique","text":"<p>Si un employ\u00e9 A met 3 secondes par enveloppe, on aura \\(T_A=3n\\). Si un employ\u00e9 B met 20 secondes par enveloppe, on aura \\(T_B=20n\\).  </p> <p>On retrouve la formulation math\u00e9matique d'une fonction lin\u00e9aire \\(f\\).  </p> \\[f : x \\mapsto ax \\quad\\text{ , avec } a \\in \\mathbb{R}\\] <p>Ici, la fonction \\(f_A\\) serait \\(f_A(x)=3x\\), la fonction \\(f_B\\) serait \\(f_B(x)=20x\\)</p> <p>Dans les deux cas l'algorithme a la m\u00eame complexit\u00e9 (lin\u00e9aire donc). Ce qui compte est le fait que pour chacun des employ\u00e9s, avoir deux fois plus d'enveloppes prendrait deux fois plus de temps.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#14-verification-experimentale","title":"1.4 V\u00e9rification exp\u00e9rimentale","text":"<p>On consid\u00e8re la fonction ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def fabrique(n):\n    liste = []\n    for _ in range(n):\n        liste.append(\"ok\")\n    return liste\n</code></pre> <p>Le code ci-dessous va mesurer le temps d'ex\u00e9cution de cette fonction avec deux param\u00e8tres diff\u00e9rents : la valeur 400 puis la valeur 800.</p> \ud83d\udc0d Script Python<pre><code>import time\nt0 = time.time()\nlstA = fabrique(400)\nprint(\"temps pour une liste de taille 400 :\", time.time() - t0)\nt0 = time.time()\nlstB = fabrique(800)\nprint(\"temps pour une liste de taille 800 :\", time.time() - t0)\n</code></pre> <p>R\u00e9sultats de l'ex\u00e9cution :</p> \ud83d\udc0d Script Python<pre><code>temps pour une liste de taille 400 : 2.384185791015625e-05\ntemps pour une liste de taille 800 : 4.2438507080078125e-05\n</code></pre> <p>Interpr\u00e9tation : Doubler la taille du param\u00e8tre d'entr\u00e9e a eu pour effet de doubler (quasiment) le temps d'ex\u00e9cution. Cela semble indiquer que la complexit\u00e9 de cette fonction est lin\u00e9aire. En observant l'algorithme, nous pouvons confirmer cette supposition : le nombre d'op\u00e9rations de la boucle <code>for</code> est \u00e9gal au param\u00e8tre <code>n</code>, et est donc directement proportionnel \u00e0 la valeur de ce param\u00e8tre.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#2-complexite-quadratique","title":"2. Complexit\u00e9 quadratique","text":""},{"location":"T5_Algorithmique/5.2_Complexite/cours/#21-exemple","title":"2.1 Exemple","text":"<p>Exemple d'algorithme</p> <p> Vous avez l'habitude de tondre la pelouse de votre terrain carr\u00e9, de c\u00f4t\u00e9 \\(n\\). Cela vous prend un certain temps \\(T\\). Votre voisin vous propose de venir chez lui tondre son terrain carr\u00e9 de c\u00f4t\u00e9 \\(2n\\).  Combien de temps cela va-t-il vous prendre pour tondre le terrain de votre voisin ?</p> R\u00e9ponse <p>Cela vous prendra 4 fois plus de temps.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#22-vocabulaire","title":"2.2 Vocabulaire","text":"<p>On dit que l'algorithme ci-dessus est de complexit\u00e9 quadratique.  </p> <p>Complexit\u00e9 quadratique </p> <p>Les expressions suivantes sont \u00e9quivalentes :</p> <ul> <li>L'algorithme est de complexit\u00e9 quadratique.</li> <li>L'algorithme est d'ordre n au carr\u00e9.  </li> <li>L'algorithme est en \\(O(n^2)\\)  (\u00abgrand O de n carr\u00e9\u00bb)</li> </ul> <p>Toutes ces formulations renvoient \u00e0 la m\u00eame id\u00e9e : le nombre d'op\u00e9rations n\u00e9cessaires (et donc le temps n\u00e9cessaire \u00e0 la terminaison de l'algorithme) \u00e9volue proportionnellement avec le carr\u00e9 du nombre de donn\u00e9es \u00e0 traiter.</p> <p>Les algorithmes quadratiques sont moins \u00abint\u00e9ressants\u00bb que les algorithmes lin\u00e9aires, car ils vont consommer beaucoup plus de ressources. Lors de l'\u00e9laboration d'un algorithme, on va toujours essayer de trouver l'algorithme ayant la complexit\u00e9 la plus faible possible.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#23-verification-experimentale","title":"2.3 V\u00e9rification exp\u00e9rimentale","text":"<p>On consid\u00e8re la fonction ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def tables(n):\n    for a in range(n):\n        for b in range(n):\n            c = a * b\n</code></pre> <p>Le code ci-dessous va mesurer le temps d'ex\u00e9cution de cette fonction avec deux param\u00e8tres diff\u00e9rents : la valeur 100 puis la valeur 200.</p> \ud83d\udc0d Script Python<pre><code>import time\nt0 = time.time()\ntables(100)\nprint(\"temps pour n = 100 :\", time.time() - t0)\nt0 = time.time()\ntables(200)\nprint(\"temps pour n = 200 : \", time.time() - t0)\n</code></pre> <p>R\u00e9sultats de l'ex\u00e9cution :</p> \ud83d\udc0d Script Python<pre><code>temps pour n = 100 : 0.0003533363342285156\ntemps pour n = 200 : 0.0014693737030029297\n</code></pre> <p>Interpr\u00e9tation : Doubler la taille du param\u00e8tre d'entr\u00e9e a eu pour effet de quadrupler le temps d'ex\u00e9cution. Cela semble indiquer que la complexit\u00e9 de cette fonction est quadratique, car \\(2^2=4\\).  </p> <p>En observant l'algorithme, nous pouvons confirmer cette supposition : le nombre d'op\u00e9rations des deux boucles <code>for</code> est \u00e9gal \u00e0 <code>n^2</code>.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#3-complexite-constante","title":"3. Complexit\u00e9 constante","text":"<p>Il peut arriver (mais c'est rare) que la complexit\u00e9 d'un algorithme soit ind\u00e9pendante de la taille des donn\u00e9es \u00e0 traiter. Dans ce cas, c'est souvent une tr\u00e8s bonne nouvelle.</p> <p>Observons l'acc\u00e8s au 1er \u00e9l\u00e9ment d'une liste :</p> <p>Complexit\u00e9 constante </p> <p>Les expressions suivantes sont \u00e9quivalentes :</p> <ul> <li>L'algorithme est de complexit\u00e9 constante.</li> <li>L'algorithme est d'ordre 1.  </li> <li>L'algorithme est en \\(O(1)\\) (\u00abde l'ordre de 1\u00bb)*</li> </ul> <p>Toutes ces formulations renvoient \u00e0 la m\u00eame id\u00e9e : le nombre d'op\u00e9rations n\u00e9cessaires (et donc le temps n\u00e9cessaire \u00e0 la terminaison de l'algorithme) est constant quelle que soit la taille des donn\u00e9es d'entr\u00e9e de l'algorithme.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#3-les-differentes-complexites","title":"3. Les diff\u00e9rentes complexit\u00e9s","text":"<p>On peut classer les algorithmes selon leur complexit\u00e9.</p> <ul> <li>Complexit\u00e9 constante : \\(O(1)\\)</li> <li>Complexit\u00e9 logarithmique : \\(O(log_{2}(n))\\)</li> <li>Complexit\u00e9 lin\u00e9aire : \\(O(n)\\)</li> <li>Complexit\u00e9 quasi-lin\u00e9aire : \\(O(nlog_{2}(n))\\)</li> <li>Complexit\u00e9 polynomiale : \\(O(n^k)\\)</li> <li>Complexit\u00e9 exponentielle : \\(O(2^n)\\)</li> </ul>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#4-preuve-dun-algorithme","title":"4. Preuve d\u2019un algorithme","text":"<p>Il est important de pouvoir montrer qu\u2019un programme termine, afin de savoir si son ex\u00e9cution se fera sans probl\u00e8me. \uf0e0 Parmi les instructions ci-dessous, quelles sont celles qui ne peuvent pas engendrer d\u2019ex\u00e9cution infinie d\u2019un algorithme ? Quelle est/sont la/les seule(s) instruction(s) probl\u00e9matique(s) ?</p> <ul> <li>Affectation </li> <li>Instruction conditionnelle (if \u2026 Then \u2026else \u2026)</li> <li>Boucle Pour (for)</li> <li>Boucle Tant que (While)</li> </ul> <p>On suppose maintenant que l\u2019on est capable d\u2019\u00e9crire un algorithme, appel\u00e9 Terminator, dont la fonction est de r\u00e9pondre vrai si un programme termine et faux si un programme ne termine pas. Ainsi, l\u2019instruction  <code>Terminator(P)</code> renvoie <code>vrai</code> si le programme P termine toujours et <code>faux</code> si P est capable de boucler.</p> \ud83d\udccb Texte<pre><code>Algorithme : SarahConnor\n    Tant que _terminator_(sarahConnor) faire\n        rien\n    fin tant que\n</code></pre> <p>\u00c0 quelle condition le programme <code>SarahConnor</code> termine-t-il ?  On comprend donc que le probl\u00e8me de la terminaison des algorithmes n\u2019est pas si simple. On peut \u00e9noncer le th\u00e9or\u00e8me suivant :</p> <p>Probl\u00e8me de l'arr\u00eat</p> <p>Il n'existe pas de programme permettant de dire si un algorithme termine toujours ou non.</p> <p>On dit en th\u00e9orie de l\u2019informatique que le probl\u00e8me de l\u2019arr\u00eat est ind\u00e9cidable. En fait, le th\u00e9or\u00e8me de Rice dit m\u00eame que toute propri\u00e9t\u00e9 non triviale sur les programmes est ind\u00e9cidable. Bien que ce soit vrai dans le cas g\u00e9n\u00e9ral, on peut cependant s\u2019int\u00e9resser \u00e0 des cas particuliers et utiliser des propri\u00e9t\u00e9s math\u00e9matiques pour d\u00e9montrer que des algorithmes simples terminent.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#41-definition","title":"4.1 D\u00e9finition","text":"<p>D\u00e9finition de la preuve</p> <p>On appelle preuve d\u2019un algorithme, la propri\u00e9t\u00e9 qui assure \u00e0 ce dernier :</p> <ul> <li>de se terminer. On appelle cela la terminaison de l\u2019algorithme</li> <li>de r\u00e9aliser ce qu\u2019\u2019on attend de lui. On appelle cela la correction de l\u2019algorithme.</li> </ul>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#42-comment-prouver","title":"4.2 Comment \u226aprouver\u226b ?","text":""},{"location":"T5_Algorithmique/5.2_Complexite/cours/#421-terminaison","title":"4.2.1 Terminaison","text":"<p>Il est fr\u00e9quent dans l\u2019\u00e9tablissement d\u2019un algorithme, qu\u2019un programmeur ait recours a une structure de boucle. Lorsque cette derni\u00e8re est conditionnelle (while), et que l\u2019algorithme ex\u00e9cute une premi\u00e8re fois les instructions contenues dans la boucle, il est important de s\u2019assurer que l\u2019algorithme sortira de la boucle et se terminera. Cette propri\u00e9t\u00e9 de l\u2019algorithme s\u2019appelle la terminaison</p> <p>Ainsi : Le groupe d\u2019instructions de la boucle doit permettre une modification de la condition de boucle.</p> <p>D\u00e9finition</p> <p>On appelle convergent (ou variant de boucle) une quantit\u00e9 qui prend ses valeurs dans un ensemble bien fond\u00e9 et qui diminue strictement \u00e0 chaque passage dans une boucle. Remarque : Un ensemble bien-fond\u00e9 est un ensemble totalement ordonn\u00e9 dans lequel il n\u2019existe pas de suite infinie strictement d\u00e9croissante.</p> <p>Propri\u00e9t\u00e9</p> <p>L\u2019existence d\u2019un convergent pour une boucle garantit que l\u2019algorithme finit par en sortir.</p> <p>Propri\u00e9t\u00e9</p> <p>On assure la terminaison d\u2019un algorithme lorsque toutes les structures de boucles conditionnelles de celui-ci \u226aterminent\u226b.</p> <p>Pour la boucle For en Python, on utilise la fonction range qui est strictement d\u00e9croissante et positive. La boucle For se termine donc toujours. En effet, on peut toujours construire un variant simple.  Si la boucle est donn\u00e9e par la structure : Pour <code>i</code> allant de <code>a</code> \u00e0 <code>b</code>, un variant simple est <code>b \u2212 i</code></p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#422-correction","title":"4.2.2 Correction","text":"<p>En outre, la seconde pr\u00e9occupation du programmeur sera d\u2019assurer que son algorithme r\u00e9alise bien le travail demande. Cette propri\u00e9t\u00e9 de l\u2019algorithme s\u2019appelle la correction. Elle est g\u00e9n\u00e9ralement plus d\u00e9licate \u00e0 \u00e9tablir.</p> <p>Propri\u00e9t\u00e9</p> <p>On assure la correction d\u2019un algorithme avec boucle en d\u00e9gageant une propri\u00e9t\u00e9 v\u00e9rifi\u00e9e avant l\u2019entr\u00e9e dans la boucle et qui le restera durant chaque it\u00e9ration <code>i</code> de boucle ; soit \\(P_i\\) cette propri\u00e9t\u00e9 au rang <code>i</code>. Cette propri\u00e9t\u00e9 doit permettre de renvoyer le r\u00e9sultat attendu au dernier rang de boucle. On l\u2019appelle l\u2019invariant de boucle.</p> <p>D\u00e9finition</p> <p>L\u2019invariant de boucle est une formule logique qui : \u2014 est v\u00e9rifi\u00e9e \u00e0 l\u2019initialisation de la boucle \u2014 reste vraie \u00e0 chaque it\u00e9ration de la boucle</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#43-quelques-exemples","title":"4.3 Quelques exemples","text":""},{"location":"T5_Algorithmique/5.2_Complexite/cours/#431-factorielle","title":"4.3.1 Factorielle","text":"<p>On consid\u00e8re le script python suivant :</p> <p>Abstract</p> Enonc\u00e9Correction <p>On note <code>n!</code> le nombre entier d\u00e9fini par  <code>n! = n x (n - 1) x (n - 2) x \u2026 x 3 x 2 x 1</code>.  (on dira \u00ab n factorielle \u00bb)</p> <p>Calculer factorielle(4) et 4!, puis factorielle(7) et 7!</p> <p>\u2022 Terminaison: - Si n entre au clavier est n\u00e9gatif, le programme termine sur un message (\"impossible\"). - Si n est nul la boucle n\u2019est pas ex\u00e9cut\u00e9e, 1 est renvoy\u00e9 et le programme termine. - Si n &gt; 0 k \u00e9tant initialement a 1, la boucle est ex\u00e9cut\u00e9e. A chaque it\u00e9ration, k est incr\u00e9ment\u00e9 de 1 et finit par \u00eatre sup\u00e9rieur a n donc pour k=n+1, on sort de la boucle, le programme renvoie f, et termine. CONCLUSION : la terminaison est assur\u00e9e.</p> <p>\u2022 Correction: Un invariant de boucle Pi est par exemple : \u226aapr\u00e8s la iieme it\u00e9ration k contient i + 1 et f contient i!\u226b Cette propri\u00e9t\u00e9 est vraie au rang 0. Supposons la vraie au rang i, et montrons qu\u2019\u2019elle est h\u00e9r\u00e9ditaire : - Au rang i + 1, on a : k qui contient i + 1 en d\u00e9but d\u2019it\u00e9ration et f = i! \u00d7 (i + 1) = (i + 1)! - En fin d\u2019it\u00e9ration k contient i + 2 Ceci est bien la propri\u00e9t\u00e9 au rang i + 1 CONCLUSION : la correction est assur\u00e9e.</p>"},{"location":"T5_Algorithmique/5.2_Complexite/cours/#432-puissance-de-2","title":"4.3.2 Puissance de 2","text":"<p>Exercice : Puissance de 2</p> Enonc\u00e9Correction <p>On consid\u00e8re le code python calculant la puissance nieme de 2 :</p> \ud83d\udc0d Script Python<pre><code>def puissance2(n) :\n    if type(n)==int and n &gt;= 0 :\n        p = 1\n        while n&gt;0 :\n            p = p*2\n            n=n1-1\n    return p\n</code></pre> <p>A Faire : Donner la preuve de cet algorithme\u2003</p> <p>\u2022 Terminaison: - Si n entre au clavier n\u2019est pas un entier positif ou nul le programme termine sur un message (\"impossible\"). - Si n est nul la boucle n\u2019est pas ex\u00e9cut\u00e9e, 1 est renvoy\u00e9 et le programme termine. - Si n &gt; 0, la boucle est ex\u00e9cut\u00e9e. A chaque it\u00e9ration, n est d\u00e9cr\u00e9mente de 1 et finit par \u00eatre nul, on sort de la boucle, le programme renvoie p, et termine. Conclusion : la terminaison est assur\u00e9e.</p> <p>\u2022 Correction: Un invariant de boucle est par exemple :  \u226aapres la iieme iteration p contient 2n0\u2212(n0\u2212i) = 2i et n contient ni = n0 \u2212 i\u226b Les conditions initiales assurent qu\u2019\u2019au rang 0 la propri\u00e9t\u00e9 est vraie. Supposons la vraie au rang i, et montrons Qu\u2019elle est h\u00e9r\u00e9ditaire : - Au rang i + 1, on a : p qui contient 2 \u00d7 2n0\u2212(n0\u2212(i+1)) = 2i+1 - En fin d\u2019it\u00e9ration n contient ni+1 = n0 \u2212 (i + 1) Ceci est bien la propri\u00e9t\u00e9 au rang i + 1 Conclusion : la correction est assur\u00e9e.</p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/","title":"Algorithmes de tri (1) : tri par insertion","text":"In\u00a0[\u00a0]: Copied! <pre>tab = [4, 8, 1, 2, 6]\ntab.sort()\n</pre> tab = [4, 8, 1, 2, 6] tab.sort() In\u00a0[\u00a0]: Copied! <pre>tab\n</pre> tab <p>Le meilleur de nos futurs algorithmes de tri sera moins efficace que celui de cette fonction <code>sort()</code>... Malgr\u00e9 cela, il est essentiel de se confronter \u00e0 l'\u00e9laboration manuelle d'un algorithme de tri. Le tri par insertion est le premier des deux algorithmes de tri que nous allons \u00e9tudier (nous \u00e9tudierons aussi le tri par s\u00e9lection). Ces deux algorithmes ont pour particularit\u00e9 de :</p> <ul> <li>ne pas n\u00e9cessiter la cr\u00e9ation d'une nouvelle liste. Ils modifient la liste \u00e0 trier sur place.</li> <li>ne pas faire intervenir de fonctions complexes (comme la recherche d'un minimum par exemple)</li> </ul> <p>Explications :</p> <ul> <li>on traite successivement toutes les valeurs \u00e0 trier, en commen\u00e7ant par celle en deuxi\u00e8me position.</li> <li>Traitement : tant que la valeur \u00e0 traiter est inf\u00e9rieure \u00e0 celle situ\u00e9e \u00e0 sa gauche, on \u00e9change ces deux valeurs.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>def tri(lst):\n    '''trie la liste lst donn\u00e9e en param\u00e8tre'''\n    for i in range(1, len(lst)):\n        k = i\n        while  k &gt; 0 and lst[k-1] &gt; lst[k] :\n            lst[k], lst[k-1] = lst[k-1], lst[k] \n            k = k -1\n</pre> def tri(lst):     '''trie la liste lst donn\u00e9e en param\u00e8tre'''     for i in range(1, len(lst)):         k = i         while  k &gt; 0 and lst[k-1] &gt; lst[k] :             lst[k], lst[k-1] = lst[k-1], lst[k]              k = k -1 <p>V\u00e9rification :</p> In\u00a0[\u00a0]: Copied! <pre>a = [7, 5, 2, 8, 1, 4]\ntri(a)\nprint(a)\n</pre> a = [7, 5, 2, 8, 1, 4] tri(a) print(a) In\u00a0[\u00a0]: Copied! <pre>def tri(lst) :\n    for k in range(1,len(lst)):\n        cle = lst[k]\n        i = k-1\n        while  i&gt;=0 and lst[i] &gt; cle :\n            lst[i+1] = lst[i]\n            i = i -1\n        lst[i+1] = cle\n</pre> def tri(lst) :     for k in range(1,len(lst)):         cle = lst[k]         i = k-1         while  i&gt;=0 and lst[i] &gt; cle :             lst[i+1] = lst[i]             i = i -1         lst[i+1] = cle <p>V\u00e9rification :</p> In\u00a0[\u00a0]: Copied! <pre>a = [7, 5, 2, 8, 1, 4]\ntri(a)\nprint(a)\n</pre> a = [7, 5, 2, 8, 1, 4] tri(a) print(a) In\u00a0[\u00a0]: Copied! <pre>def tri(L) :\n    l = list(L) # pour ne pas modifier la liste pass\u00e9e en argument.\n    for k ...\n</pre> def tri(L) :     l = list(L) # pour ne pas modifier la liste pass\u00e9e en argument.     for k ... In\u00a0[\u00a0]: Copied! <pre>a = [k for k in range(100,0,-1)] #on se place dans le pire des cas : une liste tri\u00e9e dans l'ordre d\u00e9croissant\n</pre> a = [k for k in range(100,0,-1)] #on se place dans le pire des cas : une liste tri\u00e9e dans l'ordre d\u00e9croissant In\u00a0[\u00a0]: Copied! <pre>b = [k for k in range(200,0,-1)] #on se place dans le pire des cas : une liste tri\u00e9e dans l'ordre d\u00e9croissant\n</pre> b = [k for k in range(200,0,-1)] #on se place dans le pire des cas : une liste tri\u00e9e dans l'ordre d\u00e9croissant In\u00a0[\u00a0]: Copied! <pre>%timeit tri(a)\n</pre> %timeit tri(a) In\u00a0[\u00a0]: Copied! <pre>%timeit tri(b)\n</pre> %timeit tri(b) <p>En comparant les temps de tri des listes <code>a</code> et <code>b</code>, que pouvez-vous supposer sur la complexit\u00e9 du tri par insertion ?</p> <p>Une liste \u00e0 trier 2 fois plus longue prend 4 fois plus de temps : l'algorithme semble de complexit\u00e9 quadratique.</p> <p>Si la liste est d\u00e9j\u00e0 tri\u00e9e, on ne rentre jamais dans la boucle <code>while</code> : le nombre d'op\u00e9rations est dans ce cas \u00e9gal \u00e0 $n-1$, ce qui caract\u00e9rise une complexit\u00e9 lin\u00e9aire.</p> <p>Est-on s\u00fbr que notre algorithme va s'arr\u00eater ? Le programme est constitu\u00e9 d'une boucle <code>while</code> imbriqu\u00e9e dans une boucle <code>for</code>. Seule la boucle <code>while</code> peut provoquer une non-terminaison de l'algorithme. Observons donc ses conditions de sortie :</p> <p><code> while  i&gt;=0 and l[i] &gt; cle :</code></p> <p>La condition <code>l[i] &gt; cle</code> ne peut pas \u00eatre rendue fausse avec certitude. Par contre, la condition <code>i&gt;=0</code> sera fausse d\u00e8s que la variable <code>i</code> deviendra n\u00e9gative. Or la ligne <code>i = i - 1</code> nous assure que la variable <code>i</code> diminuera \u00e0 chaque tour de boucle. La condition  <code>i&gt;=0</code> deviendra alors forc\u00e9ment fausse au bout d'un certain temps.</p> <p>Nous avonc donc prouv\u00e9 la terminaison de l'algorithme.</p> <p>On appelle la valeur <code>i</code> un variant de boucle. C'est une notion th\u00e9orique (ici illustr\u00e9e de mani\u00e8re simple par <code>i</code> qui permet de prouver la bonne sortie d'une boucle et donc la terminaison d'un algorithme.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#algorithmes-de-tri-1-tri-par-insertion","title":"Algorithmes de tri (1) : tri par insertion\u00b6","text":""},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#preambule","title":"Pr\u00e9ambule\u00b6","text":"<p>Pourquoi \u00e9tudier des algorithmes de tri ? Autant ne pas le cacher, ces algorithmes sont d\u00e9j\u00e0 impl\u00e9ment\u00e9s (quelque soit le langage) dans des fonctions tr\u00e8s performantes.</p> <p>En Python, on utilise la fonction <code>sort()</code></p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#tri-par-insertion-version-la-plus-intuitive","title":"Tri par insertion (version la plus intuitive)\u00b6","text":"<p>Consid\u00e9rons la liste <code>[7, 5, 2, 8, 1, 4]</code> Voici le fonctionnement de l'algorithme : </p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#codage-de-lalgorithme","title":"Codage de l'algorithme\u00b6","text":"<p>algorithme :</p> <p>Pour toutes les valeurs, en commen\u00e7ant par la deuxi\u00e8me :</p> <ul> <li>tant qu'on trouve \u00e0 gauche une valeur sup\u00e9rieure et qu'on n'est pas revenu \u00e0 la premi\u00e8re valeur, on \u00e9change ces deux valeurs.</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#tri-par-insertion-version-optimisee","title":"Tri par insertion (version optimis\u00e9e)\u00b6","text":"<p>Observez l'animation ci-dessous et comparer avec la version initiale. </p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#codage-de-lalgorithme","title":"Codage de l'algorithme\u00b6","text":"<p>Voici l'algorithme optimis\u00e9 :</p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#complexite-de-lalgorithme","title":"Complexit\u00e9 de l'algorithme\u00b6","text":"<p>Pour pouvoir utiliser la fonction <code>%timeit</code>, nous allons modifier l\u00e9g\u00e8rement notre algorithme de tri : comme la fonction <code>%timeit</code> effectue un grand nombre d'appel \u00e0 la fonction <code>tri()</code>, la liste serait tri\u00e9e d\u00e8s le premier appel et les autres appels essaieraient donc de tri une liste d\u00e9j\u00e0 tri\u00e9e.</p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#demonstration","title":"D\u00e9monstration\u00b6","text":"<p>D\u00e9nombrons le nombre d'op\u00e9rations dans le pire des cas, pour une liste de taille $n$.</p> <ul> <li>boucle for : elle s'ex\u00e9cute $n-1$ fois.</li> <li>boucle while : dans le pire des cas, elle ex\u00e9cute d'abord 1 op\u00e9ration, puis 2, puis 3... jusqu'\u00e0 $n-1$. Or $$1+2+3+\\dots+n-1=\\dfrac{n \\times (n-1)}{2}$$</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#resume-de-la-complexite","title":"R\u00e9sum\u00e9 de la complexit\u00e9\u00b6","text":"<ul> <li>dans le meilleur des cas (liste d\u00e9j\u00e0 tri\u00e9e) : complexit\u00e9 lin\u00e9aire</li> <li>dans le pire des cas (liste tri\u00e9e dans l'ordre d\u00e9croissant) : complexit\u00e9 quadratique</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#preuve-de-la-terminaison-de-lalgorithme","title":"Preuve de la terminaison de l'algorithme\u00b6","text":""},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#preuve-de-la-correction-de-lalgorithme","title":"Preuve de la correction de l'algorithme\u00b6","text":"<p>Les preuves de correction sont des preuves th\u00e9oriques. La preuve ici s'appuie sur le concept math\u00e9matique de r\u00e9currence. Principe du raisonnement par r\u00e9currence : une propri\u00e9t\u00e9 $P(n)$ est vraie si :</p> <ul> <li>$P(0)$ (par exemple) est vraie</li> <li>Pour tout entier naturel $n$, si $P(n)$ est vraie alors $P(n+1)$ est vraie.</li> </ul> <p>Ici, la propri\u00e9t\u00e9 serait : \u00ab Quand $k$ varie entre 0 et <code>longueur(liste) -1</code>, la sous-liste de longueur $k$ est tri\u00e9e dans l'ordre croissant.\u00bb On appelle cette propri\u00e9t\u00e9 un invariant de boucle (sous-entendu : elle est vraie pour chaque boucle)</p> <ul> <li>quand $k$ vaut 0, on place le minimum de la liste en l[0], la sous-liste l[0] est donc tri\u00e9e.</li> <li>si la sous-liste de $k$ \u00e9l\u00e9ments est tri\u00e9e, l'algorithme rajoute en derni\u00e8re position de la liste le minimum de la sous-liste restante, dont tous les \u00e9l\u00e9ments sont sup\u00e9rieurs au maximum de la sous-liste de $k$ \u00e9l\u00e9ments. La sous-liste de $k+1$ \u00e9l\u00e9ments est donc aussi tri\u00e9e.</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/03_Tri_par_insertion/#bibliographie","title":"Bibliographie\u00b6","text":"<ul> <li>Wikipedia, https://en.wikipedia.org/wiki/Sorting_algorithm</li> </ul> <p> G.Lassus, Lyc\u00e9e Fran\u00e7ois Mauriac --  Bordeaux</p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/","title":"4.3 Tri par insertion","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#0-preambule","title":"0. Pr\u00e9ambule","text":"<p>Pourquoi \u00e9tudier des algorithmes de tri ? Autant ne pas le cacher, ces algorithmes sont d\u00e9j\u00e0 impl\u00e9ment\u00e9s (quelque soit le langage) dans des fonctions tr\u00e8s performantes.  </p> <p>En Python, on utilise la fonction <code>sort()</code> :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [4, 8, 1, 2, 6]\n&gt;&gt;&gt; tab.sort()\n&gt;&gt;&gt; tab\n[1, 2, 4, 6, 8]\n</code></pre> <p></p> <p>Le meilleur de nos futurs algorithmes de tri sera moins efficace que celui de cette fonction <code>sort()</code>... Malgr\u00e9 cela, il est essentiel de se confronter \u00e0 l'\u00e9laboration manuelle d'un algorithme de tri. Le tri par insertion est le premier des deux algorithmes de tri que nous allons \u00e9tudier (nous \u00e9tudierons aussi le tri par s\u00e9lection). Ces deux algorithmes ont pour particularit\u00e9 de :</p> <ul> <li>ne pas n\u00e9cessiter la cr\u00e9ation d'une nouvelle liste. Ils modifient la liste \u00e0 trier sur place.</li> <li>ne pas faire intervenir de fonctions complexes (comme la recherche d'un minimum par exemple)</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#1-tri-par-insertion-version-la-plus-intuitive","title":"1. Tri par insertion (version la plus intuitive)","text":""},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#11-principe-et-algorithme","title":"1.1  Principe et algorithme","text":"<p>Consid\u00e9rons la liste <code>[7, 5, 2, 8, 1, 4]</code> Voici le fonctionnement de l'algorithme :  </p> <p></p> <p>Explications :</p> <ul> <li>On traite successivement toutes les valeurs \u00e0 trier, en commen\u00e7ant par celle en deuxi\u00e8me position.</li> <li>Traitement : tant que la valeur \u00e0 traiter est inf\u00e9rieure \u00e0 celle situ\u00e9e \u00e0 sa gauche, on \u00e9change ces deux valeurs.</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#12-codage-de-lalgorithme","title":"1.2\u00a0Codage de l'algorithme","text":"<p>Algorithme : </p> <p>Pour toutes les valeurs, en commen\u00e7ant par la deuxi\u00e8me :</p> <ul> <li>Tant qu'on trouve \u00e0 gauche une valeur sup\u00e9rieure et qu'on n'est pas revenu \u00e0 la premi\u00e8re valeur, on \u00e9change ces deux valeurs.</li> </ul> <p>Tri par insertion (version simple) </p> \ud83d\udc0d Script Python<pre><code>def tri_insertion1(lst):\n    '''trie en place la liste lst donn\u00e9e en param\u00e8tre'''\n    for i in range(1, len(lst)):                 #(1)\n        k = i                                    #(2)\n        while k &gt; 0 and lst[k-1] &gt; lst[k] :      #(3)\n            lst[k], lst[k-1] = lst[k-1], lst[k]  #(4)    \n            k = k - 1                            #(5)   \n</code></pre> <ol> <li>On commence \u00e0 1 et non pas \u00e0 0.</li> <li>On \u00abduplique\u00bb la variable <code>i</code> en une variable <code>k</code>. On se positionne sur l'\u00e9l\u00e9ment d'indice <code>k</code>. On va faire \u00abreculer\u00bb cet \u00e9l\u00e9ment tant que c'est possible. On ne touche pas \u00e0 <code>i</code>. </li> <li>Tant qu'on n'est pas revenu au d\u00e9but de la liste et qu'il y a une valeur plus grande \u00e0 gauche.</li> <li>On \u00e9change de place avec l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent.</li> <li>Notre \u00e9l\u00e9ment est maintenant \u00e0 l'indice <code>k - 1</code>. La boucle peut continuer.</li> </ol> <p>Application :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maliste = [7, 5, 2, 8, 1, 4]\n&gt;&gt;&gt; tri_insertion1(maliste)\n&gt;&gt;&gt; maliste\n[1, 2, 4, 5, 7, 8]\n</code></pre>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#2-tri-par-insertion-version-optimisee","title":"2. Tri par insertion (version optimis\u00e9e)","text":""},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#21-principe-et-algorithme","title":"2.1 Principe et algorithme","text":"<p>Observez l'animation ci-dessous et comparer avec la version initiale. </p> <ul> <li>Au lieu d'effetuer un \u00e9change avec la valeur pr\u00e9c\u00e9dente \u00e0 chaque fois qu'elle est sup\u00e9rieure, on va d\u00e9caler vers la droite toutes les valeurs situ\u00e9es \u00e0 gauche et sup\u00e9rieures \u00e0 notre valeur de travail.</li> <li>On ins\u00e8re ensuite directement \u00e0 sa position \u00abla plus \u00e0 gauche possible\u00bb notre valeur de travail. </li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#22-codage-de-lalgorithme","title":"2.2 Codage de l'algorithme","text":"<p>Tri par insertion (version optimis\u00e9e) </p> \ud83d\udc0d Script Python<pre><code>def tri_insertion2(lst) :\n    '''trie en place la liste lst donn\u00e9e en param\u00e8tre'''\n    for i in range(1, len(lst)):         # (1)\n        cle = lst[i]                     # (2)\n        k = i - 1                        # (3)\n        while k &gt;= 0 and lst[k] &gt; cle :  # (4)\n            lst[k + 1] = lst[k]          # (5)\n            k = k -1                     # (6)\n        lst[k + 1] = cle                 # (7)\n</code></pre> <ol> <li>On d\u00e9marre \u00e0 la deuxi\u00e8me valeur.</li> <li>On stocke dans une variable <code>cle</code> notre valeur de travail</li> <li>On d\u00e9marre l'\u00e9tude des valeurs \u00e0 gauche de notre valeur de travail</li> <li>Tant qu'on trouve une valeur sup\u00e9rieure \u00e0 notre valeur de travail, et qu'on n'est pas revenus au d\u00e9but de la liste.</li> <li>On d\u00e9cale cette valeur de un rang vers la droite.</li> <li>On se repositionne sur la valeur \u00e0 gauche de notre valeur actuelle.</li> <li>On s'est arr\u00eat\u00e9 quand la valeur n'\u00e9tait pas sup\u00e9rieure : on ins\u00e8re notre valeur de travail juste \u00e0 droite de notre position d'arr\u00eat.</li> </ol> <p>Application :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maliste = [7, 5, 2, 8, 1, 4]\n&gt;&gt;&gt; tri_insertion2(maliste)\n&gt;&gt;&gt; maliste\n[1, 2, 4, 5, 7, 8]\n</code></pre>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#3-complexite-de-lalgorithme","title":"3. Complexit\u00e9 de l'algorithme","text":""},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#31-etude-experimentale","title":"3.1  \u00c9tude exp\u00e9rimentale","text":"<p>Lire le cours sur la complexit\u00e9 et proposer des mesures exp\u00e9rimentales pour d\u00e9terminer la complexit\u00e9 du tri par insertion.</p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#32-demonstration","title":"3.2 D\u00e9monstration","text":"<p>D\u00e9nombrons le nombre d'op\u00e9rations dans le pire des cas, pour une liste de taille \\(n\\).</p> <ul> <li>boucle <code>for</code> : elle s'ex\u00e9cute \\(n-1\\) fois.</li> <li>boucle <code>while</code> : dans le pire des cas, elle ex\u00e9cute d'abord 1 op\u00e9ration, puis 2, puis 3... jusqu'\u00e0 \\(n-1\\). Or </li> </ul> \\[1+2+3+\\dots+n-1=\\dfrac{n \\times (n-1)}{2}\\] <p>Le terme de plus haut degr\u00e9 de l'expression \\(\\dfrac{n \\times (n-1)}{2}\\) est de degr\u00e9 2 : le nombre d'op\u00e9rations effectu\u00e9es est donc proportionnel au carr\u00e9 de la taille des donn\u00e9es d'entr\u00e9e. Ceci d\u00e9montre que le tri par insertion est de complexit\u00e9 quadratique.</p> <p>Dans le cas (rare, mais il faut l'envisager) o\u00f9 la liste est d\u00e9j\u00e0 tri\u00e9e, on ne rentre jamais dans la boucle <code>while</code> : le nombre d'op\u00e9rations est dans ce cas \u00e9gal \u00e0 \\(n-1\\), ce qui caract\u00e9rise une complexit\u00e9 lin\u00e9aire.</p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#33-resume-de-la-complexite","title":"3.3 R\u00e9sum\u00e9 de la complexit\u00e9","text":"<ul> <li>dans le meilleur des cas (liste d\u00e9j\u00e0 tri\u00e9e) : complexit\u00e9 lin\u00e9aire</li> <li>dans le pire des cas (liste tri\u00e9e dans l'ordre d\u00e9croissant) : complexit\u00e9 quadratique</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#34-preuve-de-la-terminaison-de-lalgorithme","title":"3.4 Preuve de la terminaison de l'algorithme","text":"<p>Est-on s\u00fbr que notre algorithme va s'arr\u00eater ? Le programme est constitu\u00e9 d'une boucle <code>while</code> imbriqu\u00e9e dans une boucle <code>for</code>. Seule la boucle <code>while</code> peut provoquer une non-terminaison de l'algorithme. Observons donc ses conditions de sortie : </p> \ud83d\udc0d Script Python<pre><code> while  k &gt;= 0 and l[k] &gt; cle :\n</code></pre> <p>La condition <code>l[k] &gt; cle</code> ne peut pas \u00eatre rendue fausse avec certitude.  Par contre, la condition <code>k &gt;= 0</code> sera fausse d\u00e8s que la variable <code>k</code> deviendra n\u00e9gative. Or la ligne  <code>k = k - 1</code> nous assure que la variable <code>k</code> diminuera \u00e0 chaque tour de boucle. La condition  <code>k &gt;= 0</code> deviendra alors forc\u00e9ment fausse au bout d'un certain temps.</p> <p>Nous avonc donc prouv\u00e9 la terminaison de l'algorithme.</p> <p>Vocabulaire</p> <p>On dit que la valeur <code>k</code> est un variant de boucle. C'est une notion th\u00e9orique (ici illustr\u00e9e de mani\u00e8re simple par la valeur <code>k</code>) qui permet de prouver la bonne sortie d'une boucle et donc la terminaison d'un algorithme.</p>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#35-preuve-de-la-correction-de-lalgorithme","title":"3.5 Preuve de la correction de l'algorithme","text":"<p>Les preuves de correction sont des preuves th\u00e9oriques. La preuve ici s'appuie sur le concept math\u00e9matique de r\u00e9currence.  Principe du raisonnement par r\u00e9currence :  une propri\u00e9t\u00e9 \\(P(n)\\) est vraie si :</p> <ul> <li>\\(P(0)\\) (par exemple) est vraie</li> <li>Pour tout entier naturel \\(n\\), si \\(P(n)\\) est vraie alors \\(P(n+1)\\) est vraie.</li> </ul> <p>Ici, la propri\u00e9t\u00e9 serait : \u00ab Quand \\(k\\) varie entre 0 et <code>longueur(liste) -1</code>, la sous-liste de longueur \\(k\\) est tri\u00e9e dans l'ordre croissant.\u00bb</p> <p>Vocabulaire</p> <p>On appelle cette propri\u00e9t\u00e9 un invariant de boucle. Invariant siginifie qu'elle reste vraie pour chaque boucle.</p> <ul> <li>quand \\(k\\) vaut 0, on place le minimum de la liste en l[0], la sous-liste l[0] est donc tri\u00e9e.</li> <li>si la sous-liste de \\(k\\) \u00e9l\u00e9ments est tri\u00e9e, l'algorithme rajoute en derni\u00e8re position de la liste le minimum de la sous-liste restante, dont tous les \u00e9l\u00e9ments sont sup\u00e9rieurs au maximum de la sous-liste de \\(k\\) \u00e9l\u00e9ments. La sous-liste de \\(k+1\\) \u00e9l\u00e9ments est donc aussi tri\u00e9e.</li> </ul>"},{"location":"T5_Algorithmique/5.3_Tri_par_insertion/cours/#bibliographie","title":"Bibliographie","text":"<ul> <li>Wikipedia, https://en.wikipedia.org/wiki/Sorting_algorithm</li> </ul>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/","title":"4.4 Tri par s\u00e9lection","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#1-animation","title":"1. Animation","text":"<p>Consid\u00e9rons la liste <code>[5, 4, 2, 1]</code> Voici le fonctionnement de l'algorithme : </p>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#2-principe","title":"2. Principe","text":"<p>description de l'algorithme</p> <p>Le travail se fait essentiellement sur les indices.</p> <ul> <li>du premier \u00e9l\u00e9ment jusqu'\u00e0 l'avant-dernier :<ul> <li>on consid\u00e8re que cet \u00e9l\u00e9ment est l'\u00e9l\u00e9ment minimum, on stocke donc son indice dans une variable indice du minimum.</li> <li>on parcourt les \u00e9l\u00e9ments suivants, et si on rep\u00e8re un \u00e9l\u00e9m\u00e9nt plus petit que notre mininum on met \u00e0 jour notre indice du minimum.</li> <li>une fois le parcours fini, on \u00e9change l'\u00e9l\u00e9ment de travail avec l'\u00e9l\u00e9ment minimum qui a \u00e9t\u00e9 trouv\u00e9.</li> </ul> </li> </ul>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#3-implementation-de-lalgorithme","title":"3. Impl\u00e9mentation de l'algorithme","text":"<p>Tri par s\u00e9lection  </p> \ud83d\udc0d Script Python<pre><code>def tri_selection(lst) :\n    for k in range(len(lst)-1):\n        indice_min = k\n        for i in range(k+1, len(lst)) :\n            if lst[i] &lt; lst[indice_min]:\n                indice_min = i\n        lst[k], lst[indice_min] = lst[indice_min], lst[k]\n</code></pre> <p>V\u00e9rification :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ma_liste = [7, 5, 2, 8, 1, 4]\n&gt;&gt;&gt; tri_selection(ma_liste)\n&gt;&gt;&gt; ma_liste\n[1, 2, 4, 5, 7, 8]\n</code></pre>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#4-complexite-de-lalgorithme","title":"4. Complexit\u00e9 de l'algorithme","text":""},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#41-mesure-du-temps-dexecution","title":"4.1 Mesure du temps d'ex\u00e9cution","text":"<p>Nous allons fabriquer deux listes de taille 100 et 200 :</p> \ud83d\udc0d Script Python<pre><code>lst_a = [k for k in range(100,0,-1)] #on se place dans le pire des cas : une liste tri\u00e9e dans l'ordre d\u00e9croissant\n\nlst_b = [k for k in range(200,0,-1)] #on se place dans le pire des cas : une liste tri\u00e9e dans l'ordre d\u00e9croissant\n</code></pre> <p>La mesure du temps moyen de tri pour ces deux listes donne le r\u00e9sultat ci-dessous (avec le module <code>timeit</code> sous Jupyter Notebook)</p> \ud83d\udc0d Script Python<pre><code>%timeit tri_selection(lst_a)\n\n    632 \u00b5s \u00b1 14.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit tri_selection(lst_b)\n\n    2.35 ms \u00b1 35.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre> <p>En comparant les temps de tri des listes <code>lst_a</code> et <code>lst_b</code>, que pouvez-vous supposer sur la complexit\u00e9 du tri par s\u00e9lection ?</p>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#42-calcul-du-nombre-doperations","title":"4.2. Calcul du nombre d'op\u00e9rations","text":"<p>D\u00e9nombrons le nombre d'op\u00e9rations, pour une liste de taille \\(n\\).</p> <ul> <li>boucle <code>for</code> : elle s'ex\u00e9cute \\(n-1\\) fois.</li> <li>deuxi\u00e8me boucle <code>for</code> imbriqu\u00e9e : elle ex\u00e9cute d'abord 1 op\u00e9ration, puis 2, puis 3... jusqu'\u00e0 \\(n-1\\). </li> </ul> <p>Or  \\(1+2+3+\\dots+n-1=\\dfrac{n \\times (n-1)}{2}\\)</p> <p>Ceci est bien un polyn\u00f4me du second degr\u00e9, ce qui confirme que la complexit\u00e9 de ce tri est quadratique.</p> <p>V\u00e9rification exp\u00e9rimentale</p> <p>Ins\u00e9rez un compteur <code>c</code> dans votre algorithme pour v\u00e9rifier le calcul pr\u00e9c\u00e9dent. On pourra renvoyer cette valeur en fin d'algorithme par un <code>return c</code>.</p>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#5-preuve-de-la-terminaison-de-lalgorithme","title":"5.\u00a0Preuve de la terminaison de l'algorithme","text":"<p>Est-on s\u00fbr que notre algorithme va s'arr\u00eater ?</p> <p>\u00c0 l'observation du programme, constitu\u00e9 de deux boucles <code>for</code> imbriqu\u00e9es, il n'y a pas d'ambigu\u00eft\u00e9 : on ne peut pas rentrer dans une boucle infinie. Le programme s'arr\u00eate forc\u00e9ment au bout de d'un nombre fixe d'op\u00e9rations.  D'apr\u00e8s nos calculs sur la complexit\u00e9, ce nombre de tours de boucles est \u00e9gal \u00e0 \\(\\dfrac{n \\times (n-1)}{2}\\).</p> <p>Ceci prouve que l'algorithme se terminera.</p>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#6-preuve-de-la-correction-de-lalgorithme","title":"6. Preuve de la correction de l'algorithme","text":"<p>Est-on s\u00fbr que notre algorithme va bien trier notre liste ?</p> <p>Les preuves de correction sont des preuves th\u00e9oriques. La preuve ici s'appuie sur le concept math\u00e9matique de r\u00e9currence.  Principe du raisonnement par r\u00e9currence :  une propri\u00e9t\u00e9 \\(P(n)\\) est vraie si :</p> <ul> <li>\\(P(0)\\) (par exemple) est vraie</li> <li>Pour tout entier naturel \\(n\\), si \\(P(n)\\) est vraie alors \\(P(n+1)\\) est vraie.</li> </ul> <p>Ici, la propri\u00e9t\u00e9 serait : \u00ab Quand \\(k\\) varie entre 0 et <code>longueur(liste) -1</code>, la sous-liste de longueur \\(k\\) est tri\u00e9e dans l'ordre croissant.\u00bb On appelle cette propri\u00e9t\u00e9 un invariant de boucle (sous-entendu : elle est vraie pour chaque boucle)</p> <ul> <li>quand \\(k\\) vaut 0, on place le minimum de la liste en l[0], la sous-liste l[0] est donc tri\u00e9e.</li> <li>si la sous-liste de \\(k\\) \u00e9l\u00e9ments est tri\u00e9e, l'algorithme rajoute en derni\u00e8re position de la liste le minimum de la sous-liste restante, dont tous les \u00e9l\u00e9ments sont sup\u00e9rieurs au maximum de la sous-liste de \\(k\\) \u00e9l\u00e9ments. La sous-liste de \\(k+1\\) \u00e9l\u00e9ments est donc aussi tri\u00e9e.</li> </ul>"},{"location":"T5_Algorithmique/5.4_Tri_par_selection/cours/#7-bonus-comparaison-des-algorithmes-de-tri","title":"7. Bonus : comparaison des algorithmes de tri","text":"<p>Une jolie animation permettant de comparer les tris :</p> <p></p> <p>Issue de ce site.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/","title":"Dichotomie","text":"<p>ou comment rechercher efficacement dans une liste tri\u00e9e ?</p> <p>R\u00e9ponse attendue : la meilleure strat\u00e9gie est de couper en deux \u00e0 chaque fois l'intervalle d'\u00e9tude. On d\u00e9marre de 50, puis 75 ou 25, etc.</p> <p>Il convient toute fois de remettre en question cette m\u00e9thode qui para\u00eet naturellement optimale : si je propose 90 comme nombre de d\u00e9part, j'ai certes moins de chance que le nombre soit entre 90 et 100, mais s'il l'est, j'ai gagn\u00e9 un gros avantage car mon nouvel intervalle est tr\u00e8s r\u00e9duit.</p> <p>On peut alors rappeler la notion d'esp\u00e9rance probabiliste.</p> <p>Exemple : \"On lance un d\u00e9, s'il tombe sur le 6 vous recevez 2 euros, sinon vous me donnez 1 euro. Voulez-vous jouer ?\"</p> <p>Retour sur le jeu du choix du nombre</p> <p>Le graphique ci-dessous repr\u00e9sente le nombre de coups moyens (sur 10 000 parties simul\u00e9es)</p> <p></p> <p>Interpr\u00e9tations et remarques</p> <ul> <li>si le choix se porte toujours sur le nombre situ\u00e9 \u00e0 la moiti\u00e9 de l'intervalle (0.5), le nombre de coups moyen avant la victoire (sur 10 000 parties) est environ 6.</li> <li>si le choix se porte toujours sur le nombre situ\u00e9 \u00e0 90 % de l'intervalle (0.9), le nombre de coups moyen avant la victoire (sur 10 000 parties) est environ 11.</li> <li>l'asym\u00e9trie de la courbe (qui devrait \u00eatre sym\u00e9trique) est due aux arrondis par d\u00e9faut dans le cas de nombres non entiers.</li> </ul> In\u00a0[1]: Copied! <pre>coul = [\"bleu\", \"jaune\", \"rouge\", \"vert\", \"violet\", \"marron\"]\n</pre> coul = [\"bleu\", \"jaune\", \"rouge\", \"vert\", \"violet\", \"marron\"] <p>hormis le test de toutes les valeurs, aucune m\u00e9thode efficace n'est possible.</p> <p>Dans toute la suite, nous rechercherons un \u00e9l\u00e9ment dans une liste d'entiers tri\u00e9e dans l'ordre croissant. Consid\u00e9rons donc la liste L suivante : </p> In\u00a0[12]: Copied! <pre>L = [2, 3, 6, 7, 11, 14, 18, 19, 24]\n</pre> L = [2, 3, 6, 7, 11, 14, 18, 19, 24] <p>L'objectif est de d\u00e9finir un algorithme de recherche efficace d'une valeur arbitraire pr\u00e9sente dans cette liste.</p> In\u00a0[1]: Copied! <pre>L = [2, 3, 6, 7, 11, 14, 18, 19, 24]\n</pre> L = [2, 3, 6, 7, 11, 14, 18, 19, 24]  <p>Correction :</p> In\u00a0[\u00a0]: Copied! <pre>for k in range(len(L)):\n    if L[k] ==  14 :\n        return k\n</pre> for k in range(len(L)):     if L[k] ==  14 :         return k In\u00a0[7]: Copied! <pre>def trouve(L, p) :\n    for k in range(len(L)) :\n        if L[k] :\n            return k\n    return \"non trouv\u00e9\"\n</pre> def trouve(L, p) :     for k in range(len(L)) :         if L[k] :             return k     return \"non trouv\u00e9\" In\u00a0[2]: Copied! <pre>L = [\"lundi\", \"mardi\", \"mercredi\", \"jeudi\"]\n</pre> L = [\"lundi\", \"mardi\", \"mercredi\", \"jeudi\"] In\u00a0[5]: Copied! <pre>trouve(L,\"mardi\")\n</pre> trouve(L,\"mardi\") Out[5]: <pre>1</pre> In\u00a0[8]: Copied! <pre>trouve(L,\"samedi\")\n</pre> trouve(L,\"samedi\") Out[8]: <pre>'non trouv\u00e9'</pre> <p>Questions :</p> <ul> <li>La m\u00e9thode utilis\u00e9e n\u00e9cessitait-elle que la liste soit tri\u00e9e ?</li> <li>Est-on s\u00fbr que cet algorithme s'arr\u00eate ?</li> </ul> <p>Exemple d'algorithme:</p> <ul> <li>on se place au milieu de la liste.</li> <li>on regarde si on est inf\u00e9rieur ou sup\u00e9rieur \u00e0 la valeur cherch\u00e9e.</li> <li>on ne garde que la bonne moiti\u00e9 de la liste qui nous int\u00e9resse, et on recommence jusqu'\u00e0 trouver la bonne valeur.</li> </ul> <ul> <li>\u00e9tape 1 : toute la liste est \u00e0 traiter. On se place sur l'\u00e9l\u00e9ment central. Son indice est la partie enti\u00e8re de la moiti\u00e9 de la longueur de la liste. Ici il y a 9 \u00e9l\u00e9ments, donc on se place sur le 4\u00e8me, qui est 11.</li> <li>\u00e9tape 2 : on compare 11 \u00e0 la valeur cherch\u00e9e (14). Il faut donc garder tout ce qui est sup\u00e9rieur \u00e0 11.</li> <li>\u00e9tape 3 : on se place au milieu de la liste des valeurs qu'il reste \u00e0 traiter. Ici il y a 4 valeurs, donc il n'y a pas de valeur centrale. On va donc se positionner sur la 2\u00e8me valeur, qui est 18.</li> <li>\u00e9tape 4 : on compare la valeur 18 \u00e0 la valeur cherch\u00e9e : 14. Elle est sup\u00e9rieure, donc on garde ce qui est \u00e0 gauche. Il n'y a plus qu'une valeur.</li> <li>\u00e9tape 5 : on se place sur la valeur 14 et on compare avec 14. La valeur est trouv\u00e9e.</li> </ul> <p>Nous allons travailler avec deux variables <code>indice_debut</code> et <code>indice_fin</code> qui vont d\u00e9limiter la liste \u00e0 \u00e9tudier. Ces indices sont repr\u00e9sent\u00e9s en bleu sur la figure ci-dessous. La valeur de l'<code>indice_central</code> (repr\u00e9sent\u00e9 en rouge) sera \u00e9gale \u00e0 <code>(indice_debut + indice_fin) // 2</code>  Le programme s'arr\u00eate lorsque la valeur cherch\u00e9e a \u00e9t\u00e9 trouv\u00e9e, ou lorsque <code>indice_fin</code> devint inf\u00e9rieur \u00e0 <code>indice_debut</code>.</p> In\u00a0[10]: Copied! <pre>def trouve_dicho(L, n) :\n    indice_debut = ...\n    indice_fin = ...\n    while indice_debut &lt;= indice_fin :\n        indice_centre = (... + ...) // 2     # on prend l'indice central\n        valeur_centrale = L[...]             # on prend la valeur centrale \n        if valeur_centrale == ... :          # si la valeur centrale est la valeur cherch\u00e9e...\n            return indice_centre\n        if valeur_centrale &lt; ... :             # si la valeur centrale est trop petite...\n            indice_debut = indice_centre + 1\n        else :\n            indice_fin = indice_centre - 1\n    return None\n</pre> def trouve_dicho(L, n) :     indice_debut = ...     indice_fin = ...     while indice_debut &lt;= indice_fin :         indice_centre = (... + ...) // 2     # on prend l'indice central         valeur_centrale = L[...]             # on prend la valeur centrale          if valeur_centrale == ... :          # si la valeur centrale est la valeur cherch\u00e9e...             return indice_centre         if valeur_centrale &lt; ... :             # si la valeur centrale est trop petite...             indice_debut = indice_centre + 1         else :             indice_fin = indice_centre - 1     return None          In\u00a0[24]: Copied! <pre>L = [2, 3, 6, 7, 11, 14, 18, 19, 24]\nprint(trouve_dicho(L,14))\nprint(trouve_dicho(L,2))\nprint(trouve_dicho(L,24))\nprint(trouve_dicho(L,1976))\n</pre> L = [2, 3, 6, 7, 11, 14, 18, 19, 24] print(trouve_dicho(L,14)) print(trouve_dicho(L,2)) print(trouve_dicho(L,24)) print(trouve_dicho(L,1976)) <pre>5\n0\n8\nNone\n</pre> <p>Une visualisation de l'\u00e9volution des variables <code>indice_debut</code> et <code>indice_fin</code> est disponible sur le site pythontutor via ce lien.</p> <p></p> <p>La condition de la boucle <code>while</code> est <code>indice_debut &lt;= indice_fin </code>, qui pourrait aussi s'\u00e9crire <code>indice_fin &gt;= indice_debut </code>. Au d\u00e9marrage de la boucle, on a :</p> In\u00a0[25]: Copied! <pre>indice_debut = 0\n    indice_fin = len(L) - 1\n</pre>     indice_debut = 0     indice_fin = len(L) - 1 <p>Ceci qui nous assure donc de bien rentrer dans la boucle.</p> <p>Ensuite, \u00e0 chaque \u00e9tape, les deux variables <code>indice_debut</code> et <code>indice_fin</code> vont se rapprocher jusqu'\u00e0 ce que le programme rencontre un <code>return</code> ou bien jusqu'\u00e0 ce que <code>indice_fin</code> devienne inf\u00e9rieur \u00e0 <code>indice_debut</code>.</p> <p>Ceci nous assure donc que le programme va bien se terminer.</p> <p>Variant de boucle On dit que la valeur <code>indice_fin - indice_debut </code> repr\u00e9sente le variant de boucle de cet algorithme. Ce variant est un nombre entier, d'abord strictement positif, puis qui va d\u00e9cro\u00eetre jusqu'\u00e0 la valeur 0.</p> <p>Combien d'\u00e9tapes (au maximum) sont-elles n\u00e9cessaires pour arriver \u00e0 la fin de l'algorithme ? Imaginons que la liste initiale poss\u00e8de 8 valeurs. Apr\u00e8s une \u00e9tape, il ne reste que 4 valeurs \u00e0 traiter. Puis 2 valeurs. Puis une seule valeur. Il y a donc 3 \u00e9tapes avant de trouver la valeur cherch\u00e9e.</p> <p>Exercice :</p> <ol> <li>Remplissez le tableau ci-dessous :</li> </ol> <p>| taille de la liste | 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | | :----------------- |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| | nombre d'\u00e9tapes    | _ | _ |  _  |   3 |  _ | _   | _   | _   | _   |  _  |</p> <ol> <li>Pouvez-vous deviner le nombre d'\u00e9tapes n\u00e9cessaires pour une liste de 4096 termes ?</li> <li>Pour une liste de $2^n$ termes, quel est le nombre d'\u00e9tapes ?</li> </ol> <p>Conclusion : C'est le nombre de puissances de 2 que contient le nombre $N$ de termes de la liste qui est d\u00e9terminant dans la complexit\u00e9 de l'algorithme. Ce nombre s'appelle le logarithme de base 2 et se note $\\log_2(N)$. On dit que l'algorithme de dichotomie a une vitesse logarithmique. On rencontrera parfois la notation $O(\\log_2(n))$.</p> In\u00a0[4]: Copied! <pre># cette ligne de code permet de transformer le contenu du fichier input_centmille.txt\n# en une liste L de 100 000 valeurs.\n\nL = open(\"data/input_centmille.txt\",'r').read().split('\\n')\n</pre> # cette ligne de code permet de transformer le contenu du fichier input_centmille.txt # en une liste L de 100 000 valeurs.  L = open(\"data/input_centmille.txt\",'r').read().split('\\n')  <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 299474) avec la m\u00e9thode de balayage (m\u00e9thode 1) :</p> In\u00a0[11]: Copied! <pre>%timeit trouve(L, 299474)\n</pre> %timeit trouve(L, 299474) <pre>4.43 ms \u00b1 86.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</pre> <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 299474) avec la m\u00e9thode par dichotomie (m\u00e9thode 2) :</p> In\u00a0[12]: Copied! <pre>%timeit trouve_dicho(L, 299474)\n</pre> %timeit trouve_dicho(L, 299474) <pre>3.21 \u00b5s \u00b1 19.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</pre> <p>Comparaison des deux m\u00e9thodes : l'algorithme dichotomique est bien plus rapide que l'algorithme de balayage (la diff\u00e9rence d'ordre de grandeur est de $10^3$, qui correspond bien \u00e0 l'ordre de grandeur de $\\frac{n}{\\log(n)}$ lorsque $n$ vaut $10^5$).</p> In\u00a0[13]: Copied! <pre># ce code permet de transformer le contenu du fichier million.txt en une liste L de 1 000 000 valeurs.\nf = open(\"data/input_million.txt\",'r')\nl = f.readlines()\nL = []\nfor k in l :\n    L.append(int(k[:-1]))\n</pre> # ce code permet de transformer le contenu du fichier million.txt en une liste L de 1 000 000 valeurs. f = open(\"data/input_million.txt\",'r') l = f.readlines() L = [] for k in l :     L.append(int(k[:-1])) <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 2999306) avec la m\u00e9thode de balayage (m\u00e9thode 1) :</p> In\u00a0[14]: Copied! <pre>%timeit trouve(L, 2999306)\n</pre> %timeit trouve(L, 2999306) <pre>46.9 ms \u00b1 615 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n</pre> <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 2999306) avec la m\u00e9thode par dichotomie (m\u00e9thode 2) :</p> In\u00a0[15]: Copied! <pre>%timeit trouve_dicho(L, 2999306)\n</pre> %timeit trouve_dicho(L, 2999306) <pre>3.04 \u00b5s \u00b1 39.4 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</pre> <p>Comparaison des deux m\u00e9thodes : l'algorithme dichotomique est toujours bien plus rapide que l'algorithme de balayage (la diff\u00e9rence d'ordre de grandeur est de $10^4$, qui correspond bien \u00e0 l'ordre de grandeur de $\\frac{n}{\\log(n)}$ lorsque $n$ vaut $10^6$).</p> <p>Remarque : Il ne faut toutefois pas oublier que la m\u00e9thode dichotomique, bien plus rapide, n\u00e9cessite que la liste ait \u00e9t\u00e9 auparavant tri\u00e9e. Ce qui rajoute du temps de calcul ! (cf tri par insertion ou tri par s\u00e9lection )</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#dichotomie","title":"Dichotomie\u00b6","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#activite-dintroduction","title":"Activit\u00e9 d'introduction\u00b6","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#jeu-du-devine-un-nombre-entre-1-et-100","title":"Jeu du \"devine un nombre entre 1 et 100\"\u00b6","text":"<p>Si je choisis un nombre entre 1 et 100, quelle est la strat\u00e9gie optimale pour deviner ce nombre le plus vite possible ? (\u00e0 chaque \u00e9tape, une indication (trop grand, trop petit) permet d'affiner la proposition suivante)</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#conclusion-generale-de-lactivite-dintroduction","title":"Conclusion g\u00e9n\u00e9rale de l'activit\u00e9 d'introduction\u00b6","text":"<p>La strat\u00e9gie optimale est de diviser en deux \u00e0 chaque \u00e9tape l'intervalle d'\u00e9tude. On appelle cela une m\u00e9thode par dichotomie, du grec ancien \u03b4\u03b9\u03c7\u03bf\u03c4\u03bf\u03bc\u03af\u03b1, dikhotomia (\u00ab division en deux parties \u00bb).</p> <p>La m\u00e9thode de dichotomie fait partie des m\u00e9thodes dites \u00abdiviser pour mieux r\u00e9gner\u00bb.</p> <p>Extrait de Wikipedia) :</p> <p></p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#algorithmes-de-recherche-dune-valeur-dans-une-liste-triee","title":"Algorithmes de recherche d'une valeur dans une liste tri\u00e9e\u00b6","text":"<p>Pr\u00e9ambule : la m\u00e9thode que nous allons utiliser implique que les valeurs ont \u00e9t\u00e9 tri\u00e9es  auparavant.</p> <p>Si les valeurs ne sont pas tri\u00e9es (ou pas triables), cela peut vite \u00eatre probl\u00e9matique.</p> <p>Exemple : pouvez-vous deviner la couleur \u00e0 laquelle je pense ?</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#methode-1-recherche-par-balayage","title":"M\u00e9thode 1 : recherche par balayage\u00b6","text":"<p>C'est la m\u00e9thode la plus intuitive : on essaie toutes les valeurs (par exemple, dans l'ordre croissant) jusqu'\u00e0 trouver la bonne.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#exercice-1","title":"Exercice 1\u00b6","text":"<p>\u00c9crire un code permettant d'afficher l'indice de la valeur <code>14</code> dans la liste <code>L = [2, 3, 6, 7, 11, 14, 18, 19, 24]</code>.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#exercice-2","title":"Exercice 2\u00b6","text":"<p>\u00c9crire une fonction <code>trouve(L, p)</code> qui renvoie l'indice d'une valeur <code>p</code> dans une liste <code>L\u00a0</code>. Si la valeur <code>p</code> n'est pas trouv\u00e9e, on renverra <code>\"non trouv\u00e9\"</code>.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#complexite-de-la-methode","title":"Complexit\u00e9 de la m\u00e9thode\u00b6","text":"<p>Le nombre (maximal) d'op\u00e9rations n\u00e9cessaires est proportionnel \u00e0 la taille de la liste \u00e0 \u00e9tudier. Si on appelle $n$ la longueur de la liste, on dit que cet algorithme est d'ordre $n$, ou lin\u00e9aire, ou en $O(n)$.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#methode-2-recherche-dichotomique","title":"M\u00e9thode 2 : recherche dichotomique\u00b6","text":"<p>Comment appliquer la m\u00e9thode vue dans l'activit\u00e9 d'introduction ?</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#illustration","title":"Illustration\u00b6","text":"<p>Recherchons la valeur 14 dans notre liste <code>L</code>.</p> <p></p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#programmation-de-la-methode-de-dichotomie","title":"Programmation de la m\u00e9thode de dichotomie\u00b6","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#terminaison-de-lalgorithme","title":"Terminaison de l'algorithme\u00b6","text":"<p>Est-on s\u00fbr que l'algorithme va se terminer ? La boucle <code>while</code> qui est utilis\u00e9e doit nous inciter \u00e0 la prudence (voir cours sur la boucle While). Il y a en effet le risque de rentrer dans une boucle infinie. Pourquoi n'est-ce pas le cas ?</p> <p>Aide : observer la position des deux fl\u00e8ches bleues lors de l'ex\u00e9cution de l'algorithme </p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#complexite-de-lalgorithme","title":"Complexit\u00e9 de l'algorithme\u00b6","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#experiences-et-comparaison-des-vitesses-dexecution","title":"Exp\u00e9riences et comparaison des vitesses d'ex\u00e9cution\u00b6","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#avec-une-liste-contenant-100-000-valeurs","title":"Avec une liste contenant 100 000 valeurs\u00b6","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#avec-une-liste-contenant-1-000-000-valeurs-soit-10-fois-plus-que-la-liste-precedente","title":"Avec une liste contenant 1 000 000 valeurs (soit 10 fois plus que la liste pr\u00e9c\u00e9dente)\u00b6","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/05_Dichotomie/#influence-de-la-taille-de-la-liste-sur-la-vitesse-de-chaque-methode","title":"Influence de la taille de la liste sur la vitesse de chaque m\u00e9thode :\u00b6","text":"<ul> <li>m\u00e9thode 1: la recherche dans une liste 10 fois plus grand prend environ 10 fois plus de temps : la vitesse de l'algorithme est bien proportionnelle \u00e0 la taille $n$ de la liste. $ \\frac{10^6}{10^5} = 10$</li> <li>m\u00e9thode 2: la recherche dans une liste 10 fois plus grand prend environ 1,2 fois plus de temps : la vitesse de l'algorithme est bien proportionnelle au logarithme de la taille $n$ de la liste.  $\\frac{\\log(1000000)}{\\log(100000)} \\approx 1,2$</li> </ul>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/","title":"4.5 Dichotomie","text":"<p>ou comment rechercher efficacement dans une liste tri\u00e9e ?</p> <p></p> <p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul> <p></p> <p>\u00abdichotomie\u00bb se dit en anglais binary search.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#1-introduction-recherche-dune-valeur-dans-une-liste","title":"1. Introduction : recherche d'une valeur dans une liste","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#11-preambule-liste-non-triee","title":"1.1 Pr\u00e9ambule : liste non tri\u00e9e","text":"<p>Exemple : pouvez-vous deviner la couleur \u00e0 laquelle je pense ?</p> \ud83d\udc0d Script Python<pre><code>coul = [\"bleu\", \"jaune\", \"rouge\", \"vert\", \"violet\", \"marron\"]\n</code></pre> <p>Toutes les m\u00e9thodes (proposition des valeurs dans l'ordre, au hasard, dans l'ordre inverse...) sont \u00e9quivalentes car la liste n'est pas tri\u00e9e.</p> <p>  Dans toute la suite, nous rechercherons un \u00e9l\u00e9ment dans une liste d'entiers tri\u00e9e dans l'ordre croissant.  </p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#12-contexte-de-recherche","title":"1.2 Contexte de recherche","text":"<p>Consid\u00e9rons donc la liste <code>lst</code>  suivante : </p> <p></p> \ud83d\udc0d Script Python<pre><code>lst = [2, 3, 6, 7, 11, 14, 18, 19, 24]\n</code></pre> <p>L'objectif est de d\u00e9finir un algorithme de recherche efficace d'une valeur arbitraire pr\u00e9sente dans cette liste.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#13-methode-naive-recherche-par-balayage","title":"1.3 M\u00e9thode na\u00efve : recherche par balayage","text":"<p>C'est la m\u00e9thode la plus intuitive : on essaie toutes les valeurs (par exemple, dans l'ordre croissant) jusqu'\u00e0 trouver la bonne.</p> <p>Exercice 1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire un code permettant d'afficher l'indice de la valeur <code>14</code> dans la liste <code>lst = [2, 3, 6, 7, 11, 14, 18, 19, 24]</code>.</p> \ud83d\udc0d Script Python<pre><code>lst = [2, 3, 6, 7, 11, 14, 18, 19, 24]\nfor k in range(len(lst)):\n    if lst[k] ==  14 :\n        return k\nreturn \"non trouv\u00e9\"\n</code></pre> <p>Exercice 2</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>trouve(lst, val)</code> qui renvoie l'indice d'une valeur <code>val</code> dans une liste <code>lst</code>. Si la valeur <code>val</code> n'est pas trouv\u00e9e, on renverra <code>\"non trouv\u00e9\"</code>.</p> \ud83d\udc0d Script Python<pre><code>def trouve(val, lst) :\n    for k in range(len(lst)) :\n        if lst[k] == val:\n            return k\n    return \"non trouv\u00e9\"\n</code></pre>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#13-complexite-de-la-methode-naive","title":"1.3 Complexit\u00e9 de la m\u00e9thode na\u00efve","text":"<p>Complexit\u00e9 de la m\u00e9thode na\u00efve </p> <p>Dans le cas d'une recherche na\u00efve, le nombre (maximal) d'op\u00e9rations n\u00e9cessaires est proportionnel \u00e0 la taille de la liste \u00e0 \u00e9tudier. Si on appelle \\(n\\) la longueur de la liste, on dit que cet algorithme est d'ordre \\(n\\), ou lin\u00e9aire, ou en \\(O(n)\\).</p> <p>Remarque :  La m\u00e9thode na\u00efve n'utilise pas le fait que la liste est tri\u00e9e, on aurait pu aussi bien l'utiliser sur une liste non tri\u00e9e.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#2-recherche-dichotomique","title":"2. Recherche dichotomique","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#21-introduction-le-jeu-du-devine-un-nombre-entre-1-et-100","title":"2.1 Introduction : le jeu du \u00abdevine un nombre entre 1 et 100\u00bb","text":"<p>R\u00e8gles du jeu</p> <p>Si je choisis un nombre entre 1 et 100, quelle est la strat\u00e9gie optimale pour deviner ce nombre le plus vite possible ? (\u00e0 chaque \u00e9tape, une indication (trop grand, trop petit) permet d'affiner la proposition suivante)</p> <p>R\u00e9ponse attendue : la meilleure strat\u00e9gie est de couper en deux \u00e0 chaque fois l'intervalle d'\u00e9tude. On d\u00e9marre de 50, puis 75 ou 25, etc.</p> <p>  Il convient toute fois de remettre en question cette m\u00e9thode qui para\u00eet naturellement optimale : si je propose 90 comme nombre de d\u00e9part, j'ai certes moins de chance que le nombre soit entre 90 et 100, mais s'il l'est, j'ai gagn\u00e9 un gros avantage car mon nouvel intervalle est tr\u00e8s r\u00e9duit.</p> Notion d'esp\u00e9rance probabiliste <p>D\u00e9terminer si un risque vaut la peine d'\u00eatre pris passe par la compr\u00e9hension de la notion d'esp\u00e9rance probabiliste. Exemple : \"On lance un d\u00e9, s'il tombe sur le 6 vous recevez 8 euros, sinon vous me donnez 1 euro. Voulez-vous jouer ?\"</p> <p>\\(E(X) = 8 \\times \\frac{1}{6} + (-1) \\times \\frac{5}{6} = \\frac{8}{6}-\\frac{5}{6}=\\frac12\\)</p> <p>En moyenne, on gagnera 50 centimes par partie, il faut donc jouer.</p> <p>Le graphique ci-dessous repr\u00e9sente le nombre de coups moyens (sur 10 000 parties simul\u00e9es)</p> <p></p> <p>Interpr\u00e9tations et remarques </p> <ul> <li>si le choix se porte toujours sur le nombre situ\u00e9 \u00e0 la moiti\u00e9 de l'intervalle (0.5), le nombre de coups moyen avant la victoire (sur 10 000 parties) est environ 6.</li> <li>si le choix se porte toujours sur le nombre situ\u00e9 \u00e0 90 % de l'intervalle (0.9), le nombre de coups moyen avant la victoire (sur 10 000 parties) est environ 11.</li> <li>l'asym\u00e9trie de la courbe (qui devrait \u00eatre sym\u00e9trique) est due aux arrondis par d\u00e9faut dans le cas de nombres non entiers.</li> </ul>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#conclusion-generale-de-lactivite-dintroduction","title":"Conclusion g\u00e9n\u00e9rale de l'activit\u00e9 d'introduction","text":"<p>La strat\u00e9gie optimale est de diviser en deux \u00e0 chaque \u00e9tape l'intervalle d'\u00e9tude. On appelle cela une m\u00e9thode par dichotomie, du grec ancien \u03b4\u03b9\u03c7\u03bf\u03c4\u03bf\u03bc\u03af\u03b1, dikhotomia (\u00ab division en deux parties \u00bb).</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#22-algorithme-de-recherche-dichotomique","title":"2.2 Algorithme de recherche dichotomique","text":"<p>Dichotomie, d\u00e9roulement intuitif</p> <ul> <li>on se place au milieu de la liste.</li> <li>on regarde si la valeur sur laquelle on est plac\u00e9e est inf\u00e9rieure ou sup\u00e9rieure \u00e0 la valeur cherch\u00e9e.</li> <li>on ne consid\u00e8re maintenant que la bonne moiti\u00e9 de la liste qui nous int\u00e9resse.</li> <li>on continue jusqu'\u00e0 trouver la valeur cherch\u00e9e (ou pas)</li> </ul>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#23-programmation-de-la-methode-de-dichotomie","title":"2.3 Programmation de la m\u00e9thode de dichotomie","text":"<p>Comprendre la m\u00e9thode de dichotomie est relativement simple, mais savoir la programmer est plus difficile.</p> <p>Pour des raisons d'efficacit\u00e9, nous allons garder intacte notre liste de travail et simplement faire \u00e9voluer les indices qui d\u00e9terminent le d\u00e9but et la fin de notre liste.</p> <p>Une autre m\u00e9thode pourrait \u00eatre d'extraire \u00e0 chaque \u00e9tape une nouvelle liste (dont on esp\u00e8re qu'elle contient la valeur cherch\u00e9e), mais la technique utilis\u00e9e (le slicing de liste) consomme beaucoup trop de ressources.</p> <p>Nous allons donc travailler avec trois variables :</p> <ul> <li><code>indice_debut</code> (en bleu sur le sch\u00e9ma)</li> <li><code>indice_fin</code> (en bleu sur le sch\u00e9ma)</li> <li><code>indice_central</code>, qui est \u00e9gale \u00e0 <code>(indice_debut + indice_fin) // 2</code> (en rouge sur le sch\u00e9ma) </li> </ul> <p>Nous allons faire se rapprocher les indices <code>indice_debut</code> et <code>indice_fin</code> tant que <code>indice_debut &lt;= indice_fin</code></p> <p>Recherche dichotomique dans une liste tri\u00e9e  </p> \ud83d\udc0d Script Python<pre><code>def recherche_dichotomique(lst, val) :\n    indice_debut = 0\n    indice_fin = len(lst) - 1\n    while indice_debut &lt;= indice_fin :\n        indice_centre = (indice_debut + indice_fin) // 2     \n        valeur_centrale = lst[indice_centre]            \n        if valeur_centrale == val :          \n            return indice_centre\n        if valeur_centrale &lt; val :             \n            indice_debut = indice_centre + 1\n        else :\n            indice_fin = indice_centre - 1\n    return None\n</code></pre> <p>Utilisation</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mylist = [2, 3, 6, 7, 11, 14, 18, 19, 24]\n&gt;&gt;&gt; recherche_dichotomique(mylist, 14)\n5\n&gt;&gt;&gt; recherche_dichotomique(mylist, 2)\n0\n&gt;&gt;&gt; recherche_dichotomique(mylist, 24)\n8\n&gt;&gt;&gt; recherche_dichotomique(mylist, 2022)\n&gt;&gt;&gt; \n</code></pre>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#24-visualisations-avec-pythontutor","title":"2.4 Visualisations avec PythonTutor","text":"<p>Cas o\u00f9 la valeur est trouv\u00e9e</p> <p> </p> <p>Cas o\u00f9 la valeur N'est PAS trouv\u00e9e</p> <p> </p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#25-terminaison-de-lalgorithme","title":"2.5 Terminaison de l'algorithme","text":"<p>Est-on s\u00fbr que l'algorithme va se terminer ? La boucle <code>while</code> qui est utilis\u00e9e doit nous inciter \u00e0 la prudence (voir cours sur la boucle While). Il y a en effet le risque de rentrer dans une boucle infinie. Pourquoi n'est-ce pas le cas ?</p> <p>Aide : observer la position des deux fl\u00e8ches bleues lors de l'ex\u00e9cution de l'algorithme  </p> <p>La condition de la boucle <code>while</code> est <code>indice_debut &lt;= indice_fin</code>, qui pourrait aussi s'\u00e9crire <code>indice_fin &gt;= indice_debut</code>. Au d\u00e9marrage de la boucle, on a :</p> \ud83d\udc0d Script Python<pre><code>    indice_debut = 0\n    indice_fin = len(L) - 1\n</code></pre> <p>Ceci qui nous assure donc de bien rentrer dans la boucle. </p> <p>Ensuite, \u00e0 chaque \u00e9tape, les deux variables <code>indice_debut</code> et <code>indice_fin</code> vont se rapprocher jusqu'\u00e0 ce que le programme rencontre un <code>return</code> ou bien jusqu'\u00e0 ce que <code>indice_fin</code> devienne inf\u00e9rieur \u00e0 <code>indice_debut</code>.  </p> <p>Ceci nous assure donc que le programme va bien se terminer.</p> <p>Variant de boucle On dit que la valeur <code>indice_fin - indice_debut</code> repr\u00e9sente le variant de boucle de cet algorithme.  Ce variant est un nombre entier, d'abord strictement positif, puis qui va d\u00e9cro\u00eetre jusqu'\u00e0 la valeur 0.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#26-complexite-de-lalgorithme","title":"2.6 Complexit\u00e9 de l'algorithme","text":"<p>Combien d'\u00e9tapes (au maximum) sont-elles n\u00e9cessaires pour arriver \u00e0 la fin de l'algorithme ? Imaginons que la liste initiale poss\u00e8de 8 valeurs.  Apr\u00e8s une \u00e9tape, il ne reste que 4 valeurs \u00e0 traiter.  Puis 2 valeurs. Puis une seule valeur. Il y a donc 3 \u00e9tapes avant de trouver la valeur cherch\u00e9e.</p> <p>Exercice</p> \u00c9nonc\u00e9Correction <ol> <li>Remplissez le tableau ci-dessous :</li> </ol> taille de la liste 1 2 4 8 16 32 64 128 256 nombre d'\u00e9tapes _ _ _ 3 _ _ _ _ _ <ol> <li>Pouvez-vous deviner le nombre d'\u00e9tapes n\u00e9cessaires pour une liste de 4096 termes ?</li> <li>Pour une liste de \\(2^n\\) termes, quel est le nombre d'\u00e9tapes ?</li> </ol> <p>Conclusion : </p> <p>C'est le nombre de puissances de 2 que contient le nombre \\(N\\) de termes de la liste qui est d\u00e9terminant dans la complexit\u00e9 de l'algorithme. </p> <p>Ce nombre s'appelle le logarithme de base 2 et se note \\(\\log_2(N)\\).</p> <p>On dit que l'algorithme de dichotomie a une vitesse logarithmique. On rencontrera parfois la notation \\(O(\\log_2(n))\\).</p> <p>Complexit\u00e9 de la dichotomie  </p> <p>La recherche dichotomique se fait avec une complexit\u00e9 logarithmique.</p> <p>Cette complexit\u00e9 est bien meilleure qu'une complexit\u00e9 lin\u00e9aire. Le nombre d'op\u00e9rations \u00e0 effectuer est tr\u00e8s peu sensible \u00e0 la taille des donn\u00e9es d'entr\u00e9e, ce qui en fait un algorithme tr\u00e8s efficace.</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#3-experiences-et-comparaison-des-vitesses-dexecution","title":"3. Exp\u00e9riences et comparaison des vitesses d'ex\u00e9cution","text":""},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#avec-une-liste-contenant-100-000-valeurs","title":"Avec une liste contenant 100 000 valeurs","text":"\ud83d\udc0d Script Python<pre><code># cette ligne de code permet de transformer le contenu du fichier input_centmille.txt\n# en une liste L de 100 000 valeurs.\n\nL = open(\"data/input_centmille.txt\",'r').read().split('\\n')\n</code></pre> <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 299474) avec la m\u00e9thode de balayage (m\u00e9thode 1) :</p> \ud83d\udc0d Script Python<pre><code>%timeit trouve(L, 299474)\n</code></pre> \ud83d\udccb Texte<pre><code>4.43 ms \u00b1 86.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre> <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 299474) avec la m\u00e9thode par dichotomie (m\u00e9thode 2) :</p> \ud83d\udc0d Script Python<pre><code>%timeit trouve_dicho(L, 299474)\n</code></pre> \ud83d\udccb Texte<pre><code>3.21 \u00b5s \u00b1 19.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</code></pre> <p>Comparaison des deux m\u00e9thodes : l'algorithme dichotomique est bien plus rapide que l'algorithme de balayage (la diff\u00e9rence d'ordre de grandeur est de \\(10^3\\), qui correspond bien \u00e0 l'ordre de grandeur de \\(\\frac{n}{\\log(n)}\\) lorsque \\(n\\) vaut \\(10^5\\)).</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#avec-une-liste-contenant-1-000-000-valeurs-soit-10-fois-plus-que-la-liste-precedente","title":"Avec une liste contenant 1 000 000 valeurs (soit 10 fois plus que la liste pr\u00e9c\u00e9dente)","text":"\ud83d\udc0d Script Python<pre><code># ce code permet de transformer le contenu du fichier million.txt en une liste L de 1 000 000 valeurs.\nf = open(\"data/input_million.txt\",'r')\nl = f.readlines()\nL = []\nfor k in l :\n    L.append(int(k[:-1]))\n</code></pre> <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 2999306) avec la m\u00e9thode de balayage (m\u00e9thode 1) :</p> \ud83d\udc0d Script Python<pre><code>%timeit trouve(L, 2999306)\n</code></pre> \ud83d\udccb Texte<pre><code>46.9 ms \u00b1 615 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n</code></pre> <p>Mesurons le temps n\u00e9cessaire pour trouver l'indice de la derni\u00e8re valeur de la liste (qui est 2999306) avec la m\u00e9thode par dichotomie (m\u00e9thode 2) :</p> \ud83d\udc0d Script Python<pre><code>%timeit trouve_dicho(L, 2999306)\n</code></pre> \ud83d\udccb Texte<pre><code>3.04 \u00b5s \u00b1 39.4 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</code></pre> <p>Comparaison des deux m\u00e9thodes : l'algorithme dichotomique est toujours bien plus rapide que l'algorithme de balayage (la diff\u00e9rence d'ordre de grandeur est de \\(10^4\\), qui correspond bien \u00e0 l'ordre de grandeur de \\(\\frac{n}{\\log(n)}\\) lorsque \\(n\\) vaut \\(10^6\\)).</p>"},{"location":"T5_Algorithmique/5.5_Dichotomie/cours/#influence-de-la-taille-de-la-liste-sur-la-vitesse-de-chaque-methode","title":"Influence de la taille de la liste sur la vitesse de chaque m\u00e9thode :","text":"<ul> <li>m\u00e9thode 1: la recherche dans une liste 10 fois plus grand prend environ 10 fois plus de temps : la vitesse de l'algorithme est bien proportionnelle \u00e0 la taille \\(n\\) de la liste. $ \\frac{10<sup>6}{10</sup>5} = 10$</li> <li>m\u00e9thode 2: la recherche dans une liste 10 fois plus grand prend environ 1,2 fois plus de temps : la vitesse de l'algorithme est bien proportionnelle au logarithme de la taille \\(n\\) de la liste.  \\(\\frac{\\log(1000000)}{\\log(100000)} \\approx 1,2\\)</li> </ul> <p>Remarque : Il ne faut toutefois pas oublier que la m\u00e9thode dichotomique, bien plus rapide, n\u00e9cessite que la liste ait \u00e9t\u00e9 auparavant tri\u00e9e. Ce qui rajoute du temps de calcul ! (cf tri par insertion ou tri par s\u00e9lection )</p> \ud83d\udc0d Script Python"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/","title":"Algorithmes gloutons","text":"<p>Un algorithme est qualifi\u00e9 de \u00abglouton\u00bb si le probl\u00e8me qu'il essaie de r\u00e9soudre est d\u00e9compos\u00e9 en une succession de probl\u00e8mes identiques pour lesquels l'algorithme va chercher une solution optimale.</p> <p>La question (presque philosophique) est : lorsqu'on fait \u00e0 chaque \u00e9tape le meilleur choix possible, est-ce que la solution finale \u00e0 laquelle on arrive est la meilleure possible ? Est-ce que faire le meilleur choix \u00e0 chaque \u00e9tape nous assure le meilleur choix global ?</p> <ul> <li>Vous partez du point O.</li> <li>Vous devez avoir atteint le plus rapidement possible tous les points A, B, C, D, E, F.</li> <li>L'ordre de parcours des points n'est pas important.</li> </ul> <p></p> <p>La philosophie de l'algorithme glouton implique qu'\u00e0 chaque \u00e9tape, vous allez vous diriger vers le point le plus proche.</p> <p>Quel est alors le parcours final ?</p> <p>voil\u00e0 ce que donnerait l'algorithme glouton :</p> <p></p> <p>Ce chemin est-il optimal ? NON</p> <p>Celui ci-dessous est meilleur :</p> <p></p> <p>Un algorithme glouton est une m\u00e9thode rapide et souvent efficace, mais qui ne garantit pas l'optimalit\u00e9 de la solution trouv\u00e9e.</p> <p>La succession de meilleurs choix LOCAUX va nous amener \u00e0 une bonne solution GLOBALE, mais ne nous garantit pas d'arriver \u00e0 la solution optimale.</p> <p>Nous allons travailler avec des pi\u00e8ces (ou billets) de 1, 2, 5, 10, 20, 50, 100, 200 euros.</p> <p>L'objectif est de cr\u00e9er un programme renvoyant, pour une somme <code>somme_a_rendre</code> entr\u00e9e en param\u00e8tre, la combinaison utilisant un minimum de pi\u00e8ces ou de billets pour fabriquer la somme <code>somme_a_rendre</code>.</p> <p>Par exemple, lorsque vous payez avec 20 \u20ac un objet co\u00fbtant 11 \u20ac, vous pr\u00e9f\u00e9rez qu'on vous rende vos 9 \u20ac de monnaie par $$ 9 = 5 + 2+2$$ plut\u00f4t que par $$ 9=2+2+2+1+1+1$$</p> <p>La r\u00e9solution de ce probl\u00e8me peut se faire de mani\u00e8re gloutonne : \u00e0 chaque \u00e9tape, vous allez essayer de rendre la plus grosse pi\u00e8ce (ou billet) possible.</p> In\u00a0[4]: Copied! <pre>pieces  = [1,2,5,10,20,50,100,200]\n\ndef rendu(somme_a_rendre):\n    i =  len(pieces) - 1   # on part de l'indice de la derni\u00e8re pi\u00e8ce, la plus grande\n    solution = []\n    while somme_a_rendre &gt; 0:\n        if pieces[i] &lt;= somme_a_rendre : # est-ce que la pi\u00e8ce peut-\u00eatre rendue ?\n            solution.append(pieces[i])   # on garde la pi\u00e8ce dans la liste solution\n            somme_a_rendre = somme_a_rendre - pieces[i] # on met \u00e0 jour la somme \u00e0 rendre\n        else :\n            i -= 1   # la pi\u00e8ce \u00e9tait trop grosse, on recule dans la liste\n    return solution\n</pre> pieces  = [1,2,5,10,20,50,100,200]  def rendu(somme_a_rendre):     i =  len(pieces) - 1   # on part de l'indice de la derni\u00e8re pi\u00e8ce, la plus grande     solution = []     while somme_a_rendre &gt; 0:         if pieces[i] &lt;= somme_a_rendre : # est-ce que la pi\u00e8ce peut-\u00eatre rendue ?             solution.append(pieces[i])   # on garde la pi\u00e8ce dans la liste solution             somme_a_rendre = somme_a_rendre - pieces[i] # on met \u00e0 jour la somme \u00e0 rendre         else :             i -= 1   # la pi\u00e8ce \u00e9tait trop grosse, on recule dans la liste     return solution  <p>utilisation : rendu(13) doit renvoyer [10,2,1]</p> In\u00a0[5]: Copied! <pre>rendu(13)\n</pre> rendu(13) Out[5]: <pre>[10, 2, 1]</pre> In\u00a0[6]: Copied! <pre>rendu(58)\n</pre> rendu(58) Out[6]: <pre>[50, 5, 2, 1]</pre> <p>Imaginons qu'il n'y ait plus de pi\u00e8ces de 10 et 5 euros. Faites fonctionner votre algorithme pour la somme de 63 euros.</p> In\u00a0[12]: Copied! <pre>pieces  = [1,2,20,50,100,200]\n\ndef rendu(somme_a_rendre):\n    i =  len(pieces) - 1\n    solution = []\n    while somme_a_rendre &gt; 0:\n        if pieces[i] &lt;= somme_a_rendre :\n            solution.append(pieces[i])\n            somme_a_rendre = somme_a_rendre - pieces[i]\n        else :\n            i -= 1\n    return solution\n</pre> pieces  = [1,2,20,50,100,200]  def rendu(somme_a_rendre):     i =  len(pieces) - 1     solution = []     while somme_a_rendre &gt; 0:         if pieces[i] &lt;= somme_a_rendre :             solution.append(pieces[i])             somme_a_rendre = somme_a_rendre - pieces[i]         else :             i -= 1     return solution In\u00a0[13]: Copied! <pre>rendu(63)\n</pre> rendu(63) Out[13]: <pre>[50, 2, 2, 2, 2, 2, 2, 1]</pre> <p>Damned ! Mais ce n'est pas une solution optimale ! <code>[20, 20, 20, 2, 1]</code> serait bien mieux.</p> <p>Moralit\u00e9 : Lors d'un rendu de monnaie, l'algorithme glouton n'est optimal que sous certaines conditions, ce qui est un peu d\u00e9cevant. Un syst\u00e8me de monnaie qui rend l'algorithme glouton est dit canonique. Il est difficile de caract\u00e9riser math\u00e9matiquement si un syst\u00e8me de monnaie est canonique ou pas.</p> <p></p> <p>Le probl\u00e8me est celui-ci : vous diposez d'un sac d'une contenance limit\u00e9e (sur le dessin ci-dessus, 15kg) et vous souhaitez maximiser la valeur totale des objets que vous mettez dans votre sac. Evidemment, la somme de leur masse ne doit pas d\u00e9passer 15 kg.</p> <p>Ce probl\u00e8me (de la cat\u00e9gorie des probl\u00e8me dits d'analyse combinatoire), malgr\u00e9 sa simplicit\u00e9 est un probl\u00e8me majeur d'optimisation.</p> <p>Actuellement :</p> <ul> <li>On sait trouver LA meilleure solution, mais en explorant toutes les combinaisons une par une. Cette m\u00e9thode par force brute est inapplicable si beaucoup d'objets sont en jeu.</li> <li>On sait facilement trouver une bonne solution, mais pas forc\u00e9ment la meilleure, par exemple en adoptant une strat\u00e9gie gloutonne.</li> <li>On ne sait pas trouver facilement (en temps polynomial) la meilleure solution. Si vous y arrivez, 1 Million de $ sont pour vous.</li> </ul> <p>Supposons qu'on dispose d'une liste \u00a0<code>mylist = [[\"A\",3], [\"B\",2], [\"C\",8]]</code>.</p> <p>Comment classer les \u00e9l\u00e9ments de cette liste par leur deuxi\u00e8me \u00e9l\u00e9ment ???</p> <p>Nous allons proc\u00e9der en 2 temps :</p> <ul> <li>cr\u00e9ation d'une fonction qui renvoie le deuxi\u00e8me \u00e9l\u00e9ment d'un objet liste</li> <li>tri de la liste gr\u00e2ce \u00e0 cette fonction</li> </ul> In\u00a0[0]: Copied! <pre>mylist = [[\"A\",3], [\"B\",2], [\"C\",8]]\n</pre> mylist = [[\"A\",3], [\"B\",2], [\"C\",8]] In\u00a0[0]: Copied! <pre>def ledeuxieme(k) :\n    return k[1]\n\nsimpsons = ['Bart', 'Lisa', 'Maggie']\nledeuxieme(simpsons)\n</pre> def ledeuxieme(k) :     return k[1]  simpsons = ['Bart', 'Lisa', 'Maggie'] ledeuxieme(simpsons) Out[0]: <pre>'Lisa'</pre> In\u00a0[0]: Copied! <pre>mynewlist = sorted(mylist, key = ledeuxieme, reverse = True)\nprint(mynewlist)\n</pre> mynewlist = sorted(mylist, key = ledeuxieme, reverse = True) print(mynewlist)  <pre>[['C', 8], ['A', 3], ['B', 2]]\n</pre> In\u00a0[1]: Copied! <pre>obj =[[\"A\",13,700], [\"B\",12,500], [\"C\",8,200], [\"D\",10,300],[\"E\", 14,600],[\"F\",18,800]]\npoids_max = 40\n</pre> obj =[[\"A\",13,700], [\"B\",12,500], [\"C\",8,200], [\"D\",10,300],[\"E\", 14,600],[\"F\",18,800]] poids_max = 40 In\u00a0[2]: Copied! <pre>def ratio(objet):\n    # renvoie le rapport prix/poids d'un objet\n    return objet[2] / objet[1]\n\nobj_tries = sorted(obj, key = ratio, reverse = True)\n</pre> def ratio(objet):     # renvoie le rapport prix/poids d'un objet     return objet[2] / objet[1]  obj_tries = sorted(obj, key = ratio, reverse = True)  In\u00a0[16]: Copied! <pre>obj_tries\n</pre> obj_tries Out[16]: <pre>[['A', 13, 700],\n ['F', 18, 800],\n ['E', 14, 600],\n ['B', 12, 500],\n ['D', 10, 300],\n ['C', 8, 200]]</pre> <p>Calcul de la solution, par m\u00e9thode gloutonne</p> In\u00a0[4]: Copied! <pre>obj =[[\"A\",13,700], [\"B\",12,500], [\"C\",8,200], [\"D\",10,300],[\"E\", 14,600],[\"F\",18,800]]\n\ndef ratio(objet):\n    # renvoie le rapport prix/poids d'un objet\n    return objet[2] / objet[1]\n\nobj_tries = sorted(obj, key = ratio, reverse = True)\n\npoids_max = 40\npoids_sac = 0\n\nbutin = []\n\nfor i in range(len(obj_tries)):\n    poids_objet = obj_tries[i][1]\n    if poids_objet + poids_sac &lt; poids_max :\n        butin.append(obj_tries[i][0])\n        poids_sac += poids_objet\n\nprint(butin)\n</pre> obj =[[\"A\",13,700], [\"B\",12,500], [\"C\",8,200], [\"D\",10,300],[\"E\", 14,600],[\"F\",18,800]]  def ratio(objet):     # renvoie le rapport prix/poids d'un objet     return objet[2] / objet[1]  obj_tries = sorted(obj, key = ratio, reverse = True)  poids_max = 40 poids_sac = 0  butin = []  for i in range(len(obj_tries)):     poids_objet = obj_tries[i][1]     if poids_objet + poids_sac &lt; poids_max :         butin.append(obj_tries[i][0])         poids_sac += poids_objet  print(butin) <pre>['A', 'F', 'C']\n</pre> <p>Il faut donc choisi la combinaison A,F,C.</p> In\u00a0[18]: Copied! <pre>obj =[[\"A\",13,700], [\"B\",12,500], [\"C\",8,200], [\"D\",10,300],[\"E\", 14,600],[\"F\",18,800]]\npoids_max = 40\n</pre> obj =[[\"A\",13,700], [\"B\",12,500], [\"C\",8,200], [\"D\",10,300],[\"E\", 14,600],[\"F\",18,800]] poids_max = 40 In\u00a0[19]: Copied! <pre>comb = []\nfor i in range(2**len(obj)):\n    k = bin(i)[2:]\n    s = '0'*(len(obj)-len(k)) + k\n    comb.append(s)\n</pre> comb = [] for i in range(2**len(obj)):     k = bin(i)[2:]     s = '0'*(len(obj)-len(k)) + k     comb.append(s) <p>La liste <code>comb</code> contient bien toutes les mots possibles sur 6 bits.</p> In\u00a0[26]: Copied! <pre>comb\n</pre> comb Out[26]: <pre>['000000',\n '000001',\n '000010',\n '000011',\n '000100',\n '000101',\n '000110',\n '000111',\n '001000',\n '001001',\n '001010',\n '001011',\n '001100',\n '001101',\n '001110',\n '001111',\n '010000',\n '010001',\n '010010',\n '010011',\n '010100',\n '010101',\n '010110',\n '010111',\n '011000',\n '011001',\n '011010',\n '011011',\n '011100',\n '011101',\n '011110',\n '011111',\n '100000',\n '100001',\n '100010',\n '100011',\n '100100',\n '100101',\n '100110',\n '100111',\n '101000',\n '101001',\n '101010',\n '101011',\n '101100',\n '101101',\n '101110',\n '101111',\n '110000',\n '110001',\n '110010',\n '110011',\n '110100',\n '110101',\n '110110',\n '110111',\n '111000',\n '111001',\n '111010',\n '111011',\n '111100',\n '111101',\n '111110',\n '111111']</pre> In\u00a0[0]: Copied! <pre>v = [] \np = []\nfor k in comb :\n    poids_comb = 0\n    valeur = 0\n    for i in range(len(obj)): \n        if k[i] == '1':\n            poids_comb += obj[i][1]\n            valeur += obj[i][2]\n    if poids_comb &gt; poids_max :\n        valeur = 0\n    v.append(valeur)\n    p.append(poids_comb)\n</pre> v = []  p = [] for k in comb :     poids_comb = 0     valeur = 0     for i in range(len(obj)):          if k[i] == '1':             poids_comb += obj[i][1]             valeur += obj[i][2]     if poids_comb &gt; poids_max :         valeur = 0     v.append(valeur)     p.append(poids_comb) In\u00a0[0]: Copied! <pre>m = max(v)\nsol_comb = comb[v.index(m)]\npoids_comb = p[v.index(m)]\n</pre> m = max(v) sol_comb = comb[v.index(m)] poids_comb = p[v.index(m)] In\u00a0[38]: Copied! <pre>sol_comb\n</pre> sol_comb Out[38]: <pre>'101001'</pre> In\u00a0[39]: Copied! <pre>poids_comb\n</pre> poids_comb Out[39]: <pre>39</pre> In\u00a0[40]: Copied! <pre>mot_sol = \"\"\nfor k in range(len(sol_comb)) :\n    if sol_comb[k] == '1' :\n        mot_sol += obj[k][0]\nprint(mot_sol)\n</pre> mot_sol = \"\" for k in range(len(sol_comb)) :     if sol_comb[k] == '1' :         mot_sol += obj[k][0] print(mot_sol)      <pre>ACF\n</pre> <p>re-Damned ! La force brute a mis en \u00e9vidence une combinaison meilleure que celle donn\u00e9e par l'algorithme glouton. Par contre, la force brute est inenvisageable pour si le nombre d'objets est grand, alors que la strat\u00e9gie gloutonne reste tr\u00e8s rapide.</p> <p>La strat\u00e9gie gloutonne donne tr\u00e8s rapidement des solutions satisfaisantes mais pas forc\u00e9ment optimales. Pour beaucoup de probl\u00e8mes (dont le probl\u00e8me du sac \u00e0 dos), la recherche d'une solution optimale sans passer par la force brute semble impossible (mais n'est pas d\u00e9montr\u00e9e). Dans ce cas-l\u00e0, la strat\u00e9gie gloutonne peut \u00eatre employ\u00e9e pour avoir vite et bien une solution convenable, m\u00eame si peut-\u00eatre non optimale.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#algorithmes-gloutons","title":"Algorithmes gloutons\u00b6","text":"<p>en anglais : greedy algorithms</p> <p></p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#1-exemples-dalgorithmes-gloutons","title":"1. Exemples d'algorithmes gloutons\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#11-un-plus-court-chemin","title":"1.1 Un plus court chemin ?\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#solution","title":"solution\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#remarque","title":"Remarque\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#12-remplir-un-rectangle-avec-des-carres","title":"1.2 Remplir un rectangle avec des carr\u00e9s\u00b6","text":"<p>(d'apr\u00e8s S.Tummarello et E.Buonocore)</p> <p>On consid\u00e8re un rectangle de dimension 11 sur 13 (figure 0). On veut remplir ce rectangle avec le minimum de carr\u00e9s.</p> <p></p> <p>Un algorithme glouton va chercher \u00e0 positionner d'abord le plus grand carr\u00e9 possible (figure 1).</p> <p>C'est une strat\u00e9gie efficace (8 carr\u00e9s n\u00e9cessaires), mais qui n'est pas optimale : la figure 2 pr\u00e9sente un pavage avec seulement 6 carr\u00e9s.</p> <p>Est-ce qu'un algorithme glouton va toujours passer \u00e0 c\u00f4t\u00e9 de la solution optimale ? Non ! Il arrive aussi qu'il donne la solution optimale. Changeons le rectangle initial en un rectangle de 10 sur 15 :</p> <p></p> <p>Dans cette situation, l'algorithme glouton nous am\u00e8ne \u00e0 la solution optimale.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#conclusion","title":"Conclusion :\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#2-le-probleme-du-rendu-de-monnaie","title":"2. Le probl\u00e8me du rendu de monnaie\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#21-solution-du-probleme","title":"2.1 Solution du probl\u00e8me\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#22-une-solution-optimale","title":"2.2 Une solution optimale ?\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#3-le-probleme-du-sac-a-dos-knapsack-problem","title":"3. Le probl\u00e8me du sac \u00e0 dos (Knapsack Problem)\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#petite-aide-technique-avant-de-commencer","title":"Petite aide technique avant de commencer\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#retour-sur-le-probleme-du-sac-a-dos","title":"Retour sur le probl\u00e8me du sac \u00e0 dos\u00b6","text":"<p>On consid\u00e8re un sac de 40 kg et les objets suivants :</p> objet A B C D E F masse 13 12 8 10 14 18 valeur 700 500 200 300 600 800 <p>Quels objets faut-il prendre ?</p> <p>strat\u00e9gie gloutonne :</p> <ul> <li>on va classer les objets dans l'ordre d\u00e9croissant de leur taux de valeur (taux de valeur = valeur / masse). Ainsi le premier \u00e9l\u00e9ment de la liste sera celui ayant le meilleur rapport valeur/masse.</li> <li>on prend le premier \u00e9l\u00e9ment de la liste, puis le deuxi\u00e8me, etc., tant que le sac peut encore les contenir.</li> </ul>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#question-toujours-la-meme","title":"Question  (toujours la m\u00eame) :\u00b6","text":"<p>L'algorithme glouton nous a-t-il donn\u00e9 la solution optimale ? Nous allons pour cela avoir recours \u00e0 la force brute pour tester toutes les combinaisons possibles.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#force-brute","title":"Force brute\u00b6","text":"<ul> <li>Il faut cr\u00e9er une liste de mots binaires qui vont correspondre \u00e0 chaque combinaison. Par exemple, '101001' signifiera qu'on prend les objets A, C et F. Cette liste est de taille $2^n$, o\u00f9 $n$ est le nombre d'objets. C'est cela qui pose probl\u00e8me : avec 80 objets, on obtient une liste \u00e0 traiter qui contient plus de $10^{24}$ objets, soit de l'ordre de grandeur du nombre d'\u00e9toiles dans l'Univers observable, ou de gouttes d'eau dans la mer, ou du nombre de grains de sables au Sahara... https://fr.wikipedia.org/wiki/Ordres_de_grandeur_de_nombres</li> <li>Une fois cette liste \u00e9tablie, il suffit de parcourir chaque \u00e9l\u00e9ment et de calculer le poids total et la valeur totale correspondante. Si le poids total d\u00e9passe le poids autoris\u00e9, on met la valeur \u00e0 0 car cette combinaison ne nous int\u00e9resse pas.</li> <li>Il ne reste qu'\u00e0 chercher la valeur maximale et regarder la combinaison \u00e0 laquelle elle correspond.</li> </ul>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/06_Algorithmes_gloutons/#conclusion","title":"Conclusion\u00b6","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/","title":"4.6 Algorithmes gloutons","text":"<p>en anglais : greedy algorithms</p> <p></p> <p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul> <p></p> <p>D\u00e9finition </p> <p>Un algorithme est qualifi\u00e9 de glouton si le probl\u00e8me qu'il essaie de r\u00e9soudre est d\u00e9compos\u00e9 en une succession de probl\u00e8mes identiques pour lesquels l'algorithme va chercher une solution optimale.  </p> <p>La question (presque philosophique) est : </p> <p>Lorsqu'on fait \u00e0 chaque \u00e9tape le meilleur choix possible, est-ce que la solution finale \u00e0 laquelle on arrive est la meilleure possible ?</p> <p>Formul\u00e9 autrement :</p> <p>Est-ce que faire le meilleur choix \u00e0 chaque \u00e9tape nous assure le meilleur choix global ?</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#1-exemples-dalgorithmes-gloutons","title":"1. Exemples d'algorithmes gloutons","text":""},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#11-un-plus-court-chemin","title":"1.1 Un plus court chemin ?","text":"<ul> <li>Vous partez du point O. </li> <li>Vous devez avoir atteint le plus rapidement possible tous les points A, B, C, D, E, F. </li> <li>L'ordre de parcours des points n'est pas important.</li> </ul> <p>La philosophie de l'algorithme glouton implique qu'\u00e0 chaque \u00e9tape, vous allez vous diriger vers le point le plus proche. </p> <p>Quel est alors le parcours final ?</p> R\u00e9ponse <p>Voil\u00e0 ce que donnerait l'algorithme glouton : </p> <p>Ce chemin est-il optimal ?</p> R\u00e9ponse <p>Non ! Celui ci-dessous est meilleur : </p> <p>Le fait d'avoir privil\u00e9gi\u00e9 \u00e0 chaque \u00e9tape le meilleur choix local nous a emp\u00each\u00e9 de voir le meilleur choix global.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#12-remplir-un-rectangle-avec-des-carres","title":"1.2 Remplir un rectangle avec des carr\u00e9s","text":"<p>(d'apr\u00e8s S.Tummarello et E.Buonocore)</p> <p>On consid\u00e8re un rectangle de dimension 11 sur 13 (figure 0). On veut remplir ce rectangle avec le minimum de carr\u00e9s.</p> <p></p> <p>Un algorithme glouton va chercher \u00e0 positionner d'abord le plus grand carr\u00e9 possible (figure 1). </p> <p>C'est une strat\u00e9gie efficace (8 carr\u00e9s n\u00e9cessaires), mais qui n'est pas optimale : la figure 2 pr\u00e9sente un pavage avec seulement 6 carr\u00e9s.</p> <p>Encore une fois, la solution gloutonne n'est pas la solution optimale.</p> <p>Est-ce qu'un algorithme glouton va toujours passer \u00e0 c\u00f4t\u00e9 de la solution optimale ?  Non ! Il arrive aussi qu'il donne la solution optimale. Changeons le rectangle initial en un rectangle de 10 sur 15 :</p> <p></p> <p>Dans cette situation, l'algorithme glouton nous am\u00e8ne \u00e0 la solution optimale.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#conclusion","title":"Conclusion :","text":"<p>Un algorithme glouton est une m\u00e9thode rapide et souvent efficace, mais qui ne garantit pas l'optimalit\u00e9 de la solution trouv\u00e9e.</p> <p>La succession de meilleurs choix LOCAUX va nous amener \u00e0 une bonne solution GLOBALE, mais ne nous garantit pas d'arriver \u00e0 la solution optimale.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#2-le-probleme-du-rendu-de-monnaie","title":"2. Le probl\u00e8me du rendu de monnaie","text":"<p>Nous allons travailler avec des pi\u00e8ces (ou billets) de 1, 2, 5, 10, 20, 50, 100, 200 euros.</p> <p>L'objectif est de cr\u00e9er un programme renvoyant, pour une somme <code>somme_a_rendre</code> entr\u00e9e en param\u00e8tre, la combinaison utilisant un minimum de pi\u00e8ces ou de billets pour fabriquer la somme <code>somme_a_rendre</code>. </p> <p>Par exemple, lorsque vous payez avec 20 \u20ac un objet co\u00fbtant 11 \u20ac, vous pr\u00e9f\u00e9rez qu'on vous rende vos 9 \u20ac de monnaie par $$ 9 = 5 + 2+2$$ plut\u00f4t que par $$ 9=2+2+2+1+1+1$$</p> <p>La r\u00e9solution de ce probl\u00e8me peut se faire de mani\u00e8re gloutonne : \u00e0 chaque \u00e9tape, vous allez essayer de rendre la plus grosse pi\u00e8ce (ou billet) possible.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#21-solution-du-probleme","title":"2.1 Solution du probl\u00e8me","text":"<p>Rendu de monnaie  </p> \ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    pieces = [200, 100, 50, 20, 10, 5, 2, 1]\n    i =  0   # (1) \n    solution = []\n    while somme_a_rendre &gt; 0:\n        if pieces[i] &lt;= somme_a_rendre : # (2) \n            solution.append(pieces[i])   # (3) \n            somme_a_rendre = somme_a_rendre - pieces[i] # (4)\n        else :\n            i += 1   # (5) \n    return solution\n</code></pre> <ol> <li>On part du 1er indice -&gt; la plus grande pi\u00e8ce</li> <li>Est-ce que la pi\u00e8ce peut \u00eatre rendue ?</li> <li>On garde la pi\u00e8ce dans la liste <code>solution</code></li> <li>On met \u00e0 jour la somme \u00e0 rendre.</li> <li>La pi\u00e8ce \u00e9tait trop grosse, on avance dans la liste.</li> </ol> <p>Utilisation : <code>rendu(13)</code> doit renvoyer <code>[10, 2, 1]</code></p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(13)\n    [10, 2, 1]\n&gt;&gt;&gt; rendu(58)\n    [50, 5, 2, 1]\n</code></pre>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#22-une-solution-optimale","title":"2.2 Une solution optimale ?","text":"<p>Imaginons qu'il n'y ait plus de pi\u00e8ces de 10 et 5 euros.  Faites fonctionner votre algorithme pour la somme de 63 euros.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(63)\n   [50, 2, 2, 2, 2, 2, 2, 1]\n</code></pre> <p>Damned ! Mais ce n'est pas une solution optimale ! <code>[20, 20, 20, 2, 1]</code> serait bien mieux.</p> <p>Moralit\u00e9 : Lors d'un rendu de monnaie, l'algorithme glouton n'est optimal que sous certaines conditions, ce qui est un peu d\u00e9cevant. Un syst\u00e8me de monnaie qui rend l'algorithme glouton est dit canonique. Il est difficile de caract\u00e9riser math\u00e9matiquement si un syst\u00e8me de monnaie est canonique ou pas.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#3-le-probleme-du-sac-a-dos-knapsack-problem","title":"3. Le probl\u00e8me du sac \u00e0 dos (Knapsack Problem)","text":"<p>Le probl\u00e8me est celui-ci : vous disposez d'un sac d'une contenance limit\u00e9e (sur le dessin ci-dessus, 15kg) et vous souhaitez maximiser la valeur totale des objets que vous mettez dans votre sac. Evidemment, la somme de leur masse ne doit pas d\u00e9passer 15 kg.</p> <p>Ce probl\u00e8me (de la cat\u00e9gorie des probl\u00e8me dits d'analyse combinatoire) malgr\u00e9 sa simplicit\u00e9 est un probl\u00e8me majeur d'optimisation. </p> <p>Actuellement :</p> <ul> <li>On sait trouver LA meilleure solution, mais en explorant toutes les combinaisons une par une. Cette m\u00e9thode par force brute est inapplicable si beaucoup d'objets sont en jeu.</li> <li>On sait facilement trouver une bonne solution, mais pas forc\u00e9ment la meilleure, par exemple en adoptant une strat\u00e9gie gloutonne.</li> <li>On ne sait pas trouver facilement (en temps polynomial) la meilleure solution. Si vous y arrivez, 1 Million de $ sont pour vous.</li> </ul>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#31-petite-aide-technique-avant-de-commencer","title":"3.1\u00a0Petite aide technique avant de commencer","text":"<p>Supposons qu'on dispose d'une liste \u00a0<code>mylist = [[\"A\",3], [\"B\",2], [\"C\",8]]</code>. </p> <p>Comment classer les \u00e9l\u00e9ments de cette liste par leur deuxi\u00e8me \u00e9l\u00e9ment ???</p> <p>Nous allons proc\u00e9der en 2 temps :</p> <ul> <li>cr\u00e9ation d'une fonction qui renvoie le deuxi\u00e8me \u00e9l\u00e9ment d'un objet <code>liste</code></li> <li>tri de la liste gr\u00e2ce \u00e0 cette fonction</li> </ul> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mylist = [[\"A\",3], [\"B\",2], [\"C\",8]]\n&gt;&gt;&gt; def le_deuxieme(k) :\n    return k[1]\n\n&gt;&gt;&gt; simpsons = ['Bart', 'Lisa', 'Maggie']\n&gt;&gt;&gt; le_deuxieme(simpsons)\n  'Lisa'\n&gt;&gt;&gt; mynewlist = sorted(mylist, key = le_deuxieme, reverse = True)\n&gt;&gt;&gt; mynewlist\n[['C', 8], ['A', 3], ['B', 2]]\n</code></pre>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#32-retour-sur-le-probleme-du-sac-a-dos","title":"3.2 Retour sur le probl\u00e8me du sac \u00e0 dos","text":"<p>On consid\u00e8re un sac de 40 kg et les objets suivants :</p> objet A B C D E F masse 13 12 8 10 14 18 valeur 700 500 200 300 600 800 <p>Quels objets faut-il prendre ?</p> <p>Strat\u00e9gie gloutonne :</p> <ul> <li>on va classer les objets dans l'ordre d\u00e9croissant de leur taux de valeur (taux de valeur = valeur / masse). Ainsi le premier \u00e9l\u00e9ment de la liste sera celui ayant le meilleur rapport valeur/masse.</li> <li>on prend le premier \u00e9l\u00e9ment de la liste, puis le deuxi\u00e8me, etc., tant que le sac peut encore les contenir.</li> </ul> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; objets = [[\"A\", 13, 700], [\"B\", 12, 500], [\"C\", 8, 200], [\"D\", 10, 300], [\"E\", 14, 600], [\"F\", 18, 800]]\n&gt;&gt;&gt; poids_max = 40\n&gt;&gt;&gt; def ratio(objet):\n        # renvoie le rapport prix/poids d'un objet\n        return objet[2] / objet[1]\n\n&gt;&gt;&gt; objets_tries = sorted(objets, key = ratio, reverse = True)\n&gt;&gt;&gt; objets_tries\n     [['A', 13, 700],\n     ['F', 18, 800],\n     ['E', 14, 600],\n     ['B', 12, 500],\n     ['D', 10, 300],\n     ['C', 8, 200]]\n</code></pre> <p>Calcul de la solution, par m\u00e9thode gloutonne</p> \ud83d\udc0d Script Python<pre><code>objets  = [[\"A\", 13, 700], [\"B\", 12, 500], [\"C\", 8, 200], [\"D\", 10, 300], [\"E\", 14, 600], [\"F\", 18, 800]]\n\ndef ratio(objet):\n    # renvoie le rapport prix/poids d'un objet\n    return objet[2] / objet[1]\n\nobjets_tries = sorted(objets, key = ratio, reverse = True)\n\npoids_max = 40\npoids_sac = 0\n\nbutin = []\n\nfor objet in objets_tries:\n    poids_objet = objet[1]\n    if poids_objet + poids_sac &lt; poids_max :\n        butin.append(objet[0])\n        poids_sac += poids_objet\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; butin\n    ['A', 'F', 'C']\n</code></pre> <p>Il faut donc choisir la combinaison A, F, C. Elle est bien valide (poids 39) et rapporte 1700.</p> <p>Question (toujours la m\u00eame) :  </p> <p>L'algorithme glouton nous a-t-il donn\u00e9 la solution optimale ? Nous allons pour cela avoir recours \u00e0 la force brute pour tester toutes les combinaisons possibles.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#33-force-brute","title":"3.3 Force brute","text":"<ul> <li>Il faut cr\u00e9er une liste de mots binaires qui vont correspondre \u00e0 chaque combinaison. Par exemple, '101001' signifiera qu'on prend les objets A, C et F. Cette liste est de taille \\(2^n\\), o\u00f9 \\(n\\) est le nombre d'objets. C'est cela qui pose probl\u00e8me : avec 80 objets, on obtient une liste \u00e0 traiter qui contient plus de \\(10^{24}\\) objets, soit de l'ordre de grandeur du nombre d'\u00e9toiles dans l'Univers observable, ou de gouttes d'eau dans la mer, ou du nombre de grains de sables au Sahara... (voir https://fr.wikipedia.org/wiki/Ordres_de_grandeur_de_nombres )</li> <li>Une fois cette liste \u00e9tablie, il suffit de parcourir chaque \u00e9l\u00e9ment et de calculer le poids total et la valeur totale correspondante. Si le poids total d\u00e9passe le poids autoris\u00e9, on met la valeur \u00e0 0 car cette combinaison ne nous int\u00e9resse pas.</li> <li>Il ne reste qu'\u00e0 chercher la valeur maximale et regarder la combinaison \u00e0 laquelle elle correspond.</li> </ul> \ud83d\udc0d Script Python<pre><code>objets  = [[\"A\", 13, 700], [\"B\", 12, 500], [\"C\", 8, 200], [\"D\", 10, 300], [\"E\", 14, 600], [\"F\", 18, 800]]\npoids_max = 40\n</code></pre>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#331-la-liste-de-tous-les-mots-possibles","title":"3.3.1 La liste de tous les mots possibles","text":"\ud83d\udc0d Script Python<pre><code>combinaisons = []\nfor i in range(2**len(objets)):\n    k = bin(i)[2:]\n    s = '0'*(len(objets)-len(k)) + k\n    combinaisons.append(s)\n</code></pre> <p>La liste <code>combinaisons</code> contient bien les 64 mots possibles (\\(2^6=64\\)) :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; combinaisons\n    ['000000',\n     '000001',\n     '000010',\n     '000011',\n     '000100',\n     '000101',\n     '000110',\n     '000111',\n     '001000',\n     '001001',\n     '001010',\n     '001011',\n     '001100',\n     '001101',\n     '001110',\n     '001111',\n     '010000',\n     '010001',\n     '010010',\n     '010011',\n     '010100',\n     '010101',\n     '010110',\n     '010111',\n     '011000',\n     '011001',\n     '011010',\n     '011011',\n     '011100',\n     '011101',\n     '011110',\n     '011111',\n     '100000',\n     '100001',\n     '100010',\n     '100011',\n     '100100',\n     '100101',\n     '100110',\n     '100111',\n     '101000',\n     '101001',\n     '101010',\n     '101011',\n     '101100',\n     '101101',\n     '101110',\n     '101111',\n     '110000',\n     '110001',\n     '110010',\n     '110011',\n     '110100',\n     '110101',\n     '110110',\n     '110111',\n     '111000',\n     '111001',\n     '111010',\n     '111011',\n     '111100',\n     '111101',\n     '111110',\n     '111111']\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>valeurs = [] \npoids = []\nfor comb in combinaisons :\n    poids_comb = 0\n    valeur = 0\n    for i in range(len(objets)): \n        if comb[i] == '1':\n            poids_comb += objets[i][1]\n            valeur += objets[i][2]\n    if poids_comb &gt; poids_max :\n        valeur = 0\n    valeurs.append(valeur)\n    poids.append(poids_comb)\n\nvaleur_max = max(valeurs)\nmeilleure_comb = combinaisons[valeurs.index(valeur_max)]\npoids_comb = poids[valeurs.index(valeur_max)]\n\nmot_sol = \"\"\nfor k in range(len(meilleure_comb)) :\n    if meilleure_comb[k] == '1' :\n        mot_sol += objets[k][0]\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mot_sol\n  'ABE'\n</code></pre></p> <p>re-Damned ! La force brute a mis en \u00e9vidence une combinaison meilleure que celle donn\u00e9e par l'algorithme glouton. </p> <p>En effet la combinaison A-B-E est bien valide (poids total 39) et rapporte 1800, donc 100 de mieux que la solution gloutonne.</p> <p>Par contre, la force brute est inenvisageable pour si le nombre d'objets est grand, alors que la strat\u00e9gie gloutonne reste tr\u00e8s rapide.</p>"},{"location":"T5_Algorithmique/5.6_Algorithmes_gloutons/cours/#conclusion_1","title":"Conclusion","text":"<p>La strat\u00e9gie gloutonne donne tr\u00e8s rapidement des solutions satisfaisantes mais pas forc\u00e9ment optimales. Pour beaucoup de probl\u00e8mes (dont le probl\u00e8me du sac \u00e0 dos), la recherche d'une solution optimale sans passer par la force brute semble impossible (mais n'est pas d\u00e9montr\u00e9e). Dans ce cas-l\u00e0, la strat\u00e9gie gloutonne peut \u00eatre employ\u00e9e pour avoir vite et bien une solution convenable, m\u00eame si peut-\u00eatre non optimale. On dit que la strat\u00e9gie gloutonne est une heuristique de r\u00e9solution. On sait que ce n'est pas forc\u00e9ment optimal, mais faute de mieux, on s'en contente...</p>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/07_Algorithme_KNN/","title":"M\u00e9thode du K-Nearest-Neighbours (KNN), aka les k-plus-proches-voisins","text":"<p>Notre objectif : Nous allons reprendre le jeu de donn\u00e9es sur les joueurs du top14 utilis\u00e9 ici https://github.com/glassus/nsi/blob/master/Premiere/Theme06_Traitement_de_donnees/03_Pandas_eleves.ipynb</p> <p>Question : si on croise une personne nous disant qu'elle veut jouer en top14, et qu'elle nous donne son poids et sa taille, peut-on lui pr\u00e9dire \u00e0 quel poste elle devrait jouer ?</p> <p>Dans toute id\u00e9e de classification il y a l'id\u00e9e de distance. Il faut comprendre la distance comme une mesure de la diff\u00e9rence.</p> <p>Comment mesurer la diff\u00e9rence physique entre deux joueurs de rugby ?</p> <p></p> In\u00a0[3]: Copied! <pre>import pandas as pd #import du module pandas, abr\u00e9g\u00e9 classiquement par \"pd\"\n</pre> import pandas as pd #import du module pandas, abr\u00e9g\u00e9 classiquement par \"pd\" In\u00a0[6]: Copied! <pre>df = pd.read_csv('data/top14.csv', encoding = 'utf-8')\n</pre> df = pd.read_csv('data/top14.csv', encoding = 'utf-8') In\u00a0[11]: Copied! <pre>def knn(poids, taille):\n  df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2\n  newdf = df.sort_values(by='distance', ascending=True)\n  newdftri = newdf.head(6) #on prend les 6 joueurs les plus proches physiquement\n  sol = newdftri['Poste'].describe().top\n  return sol\n</pre> def knn(poids, taille):   df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2   newdf = df.sort_values(by='distance', ascending=True)   newdftri = newdf.head(6) #on prend les 6 joueurs les plus proches physiquement   sol = newdftri['Poste'].describe().top   return sol In\u00a0[12]: Copied! <pre>knn(93,188)\n</pre> knn(93,188) Out[12]: <pre>'Ailier'</pre> <p>Dans le code pr\u00e9c\u00e9dent, on a travaill\u00e9 avec $k=6$ et c'est le poste majoritaire parmi les 6 joueurs les plus proches qui a \u00e9t\u00e9 donn\u00e9 par l'algorithme. Modifions l\u00e9g\u00e8rement la fonction <code>knn()</code> afin d'observer l'influence du param\u00e8tre $k$ sur la pr\u00e9diction :</p> In\u00a0[19]: Copied! <pre>def knn(poids, taille, k):\n  df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2\n  newdf = df.sort_values(by='distance', ascending=True)\n  newdftri = newdf.head(k) #on prend les k joueurs les plus proches physiquement\n  sol = newdftri['Poste'].describe().top\n  return sol\n\nfor k in range(1,20):\n    print(knn(93,188,k))\n</pre> def knn(poids, taille, k):   df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2   newdf = df.sort_values(by='distance', ascending=True)   newdftri = newdf.head(k) #on prend les k joueurs les plus proches physiquement   sol = newdftri['Poste'].describe().top   return sol  for k in range(1,20):     print(knn(93,188,k)) <pre>Centre\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\n</pre> <p>On s'aper\u00e7oit que la pr\u00e9diction est tr\u00e8s stable... sauf si $k=1$ ! Il se trouve qu'un joueur poss\u00e8de exactement ces caract\u00e9ristiques physiques (Pierre-Louis BARASSI) et qu'il joue Centre :</p> In\u00a0[26]: Copied! <pre>df['distance']=(df['Taille']-188)**2+(df['Poids']-93)**2\nnewdf = df.sort_values(by='distance', ascending=True)\nnewdf.head(10)\n</pre> df['distance']=(df['Taille']-188)**2+(df['Poids']-93)**2 newdf = df.sort_values(by='distance', ascending=True) newdf.head(10) Out[26]: Equipe Nom Poste Date de naissance Taille Poids distance 314 Lyon Pierre-Louis BARASSI Centre 22/04/1998 188 93 0 461 Pau Vincent PINTO Ailier 10/04/1999 187 93 1 527 Toulon St\u00e9phane ONAMB\u00c9L\u00c9 3\u00e8me ligne 12/02/1993 188 94 1 202 Castres Geoffrey PALIS Arri\u00e8re 08/07/1991 189 93 1 196 Castres Armand BATLLE Ailier 12/04/1987 188 92 1 585 Toulouse Th\u00e9o BELAN Centre 15/11/1992 187 94 2 242 Clermont Samuel EZEALA Ailier 11/12/1999 187 94 2 502 Racing92 Simon ZEBO Ailier 16/03/1990 187 94 2 133 Brive Esteban ABADIE 3\u00e8me ligne 01/12/1997 188 95 4 369 Montpellier Benjamin FALL Arri\u00e8re 03/03/1989 186 93 4 <p>On peut s'apercevoir aussi que jusqu'\u00e0 $k=5$, aucun poste n'est majoritaire : la pr\u00e9diction pourrait aussi bien renvoyer Centre, 3\u00e8me ligne, ou Arri\u00e8re. Ce n'est que gr\u00e2ce \u00e0 l'ordre alphab\u00e9tique que la r\u00e9ponse renvoy\u00e9e est \u00abAilier\u00bb. Par contre, d\u00e8s que $k \\geqslant 5$, le poste d'Ailier est bien majoritaire parmi les $k$ plus proches voisins.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/07_Algorithme_KNN/#methode-du-k-nearest-neighbours-knn-aka-les-k-plus-proches-voisins","title":"M\u00e9thode du K-Nearest-Neighbours (KNN), aka les k-plus-proches-voisins\u00b6","text":"<p>La m\u00e9thode KNN est une m\u00e9thode simple et efficace de classification. La classification est un enjeu majeur de l'Intelligence Artificielle :</p> <ul> <li>la cam\u00e9ra d'une voiture autonome per\u00e7oit un panneau, mais quel est ce panneau ?</li> <li>un grain de beaut\u00e9 est pris en photo par un dermatologue, ce grain de beaut\u00e9 est-il canc\u00e9reux ?</li> <li>...</li> </ul> <p>La m\u00e9thode du KNN va trouver quels sont, dans une base de donn\u00e9es d\u00e9j\u00e0 bien remplie et labell\u00e9e, les k-objets (les 6 objets si $k=6$ par exemple) qui se rapprochent le plus de l'objet \u00e0 classifier. En prenant ensuite la caract\u00e9ristique la plus fr\u00e9quente parmi ces 6 objets, on devine alors dans quelle cat\u00e9gorie notre objet doit se classer.</p> <p></p>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/07_Algorithme_KNN/#resultat-attendu","title":"R\u00e9sultat attendu :\u00b6","text":"<p>Il faut cr\u00e9er une fonction <code>knn()</code> qui prend en argument <code>poids</code> et <code>taille</code> , sont les caract\u00e9ristiques du nouveau joueur. La fonction doit renvoyer une cha\u00eene de caract\u00e8re correspondant au poste auquel elle est susceptible de jouer.</p> <p>Exemple :</p> <p></p>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/07_Algorithme_KNN/#influence-du-parametre-k","title":"Influence du param\u00e8tre $k$\u00b6","text":""},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/07_Algorithme_KNN/","title":"M\u00e9thode du K-Nearest-Neighbours (KNN), aka les k-plus-proches-voisins","text":"<p>La m\u00e9thode KNN est une m\u00e9thode simple et efficace de classification. La classification est un enjeu majeur de l'Intelligence Artificielle : - la cam\u00e9ra d'une voiture autonome per\u00e7oit un panneau, mais quel est ce panneau ? - un grain de beaut\u00e9 est pris en photo par un dermatologue, ce grain de beaut\u00e9 est-il canc\u00e9reux ? - ...</p> <p>La m\u00e9thode du KNN va trouver quels sont, dans une base de donn\u00e9es d\u00e9j\u00e0 bien remplie et labell\u00e9e, les k-objets (les 6 objets si \\(k=6\\) par exemple) qui se rapprochent le plus de l'objet \u00e0 classifier. En prenant ensuite la caract\u00e9ristique la plus fr\u00e9quente parmi ces 6 objets, on devine alors dans quelle cat\u00e9gorie notre objet doit se classer.</p> <p></p> <p>Notre objectif :  Nous allons reprendre le jeu de donn\u00e9es sur les joueurs du top14 utilis\u00e9 ici https://github.com/glassus/nsi/blob/master/Premiere/Theme06_Traitement_de_donnees/03_Pandas_eleves.ipynb</p> <p>Question : si on croise une personne nous disant qu'elle veut jouer en top14, et qu'elle nous donne son poids et sa taille, peut-on lui pr\u00e9dire \u00e0 quel poste elle devrait jouer ?</p> <p>Dans toute id\u00e9e de classification il y a l'id\u00e9e de distance. Il faut comprendre la distance comme une mesure de la diff\u00e9rence. </p> <p>Comment mesurer la diff\u00e9rence physique entre deux joueurs de rugby ? </p> <p></p> \ud83d\udc0d Script Python<pre><code>import pandas as pd #import du module pandas, abr\u00e9g\u00e9 classiquement par \"pd\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>df = pd.read_csv('data/top14.csv', encoding = 'utf-8')\n</code></pre>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/07_Algorithme_KNN/#resultat-attendu","title":"R\u00e9sultat attendu :","text":"<p>Il faut cr\u00e9er une fonction <code>knn()</code> qui prend en argument <code>poids</code> et <code>taille</code> , sont les caract\u00e9ristiques du nouveau joueur. La fonction doit renvoyer une cha\u00eene de caract\u00e8re correspondant au poste auquel elle est susceptible de jouer.</p> <p>Exemple : </p> <p></p> \ud83d\udc0d Script Python<pre><code>def knn(poids, taille):\n  df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2\n  newdf = df.sort_values(by='distance', ascending=True)\n  newdftri = newdf.head(6) #on prend les 6 joueurs les plus proches physiquement\n  sol = newdftri['Poste'].describe().top\n  return sol\n</code></pre> \ud83d\udc0d Script Python<pre><code>knn(93,188)\n</code></pre> \ud83d\udccb Texte<pre><code>'Ailier'\n</code></pre>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/07_Algorithme_KNN/#influence-du-parametre-k","title":"Influence du param\u00e8tre \\(k\\)","text":"<p>Dans le code pr\u00e9c\u00e9dent, on a travaill\u00e9 avec \\(k=6\\) et c'est le poste majoritaire parmi les 6 joueurs les plus proches qui a \u00e9t\u00e9 donn\u00e9 par l'algorithme. Modifions l\u00e9g\u00e8rement la fonction <code>knn()</code> afin d'observer l'influence du param\u00e8tre \\(k\\) sur la pr\u00e9diction :</p> \ud83d\udc0d Script Python<pre><code>def knn(poids, taille, k):\n  df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2\n  newdf = df.sort_values(by='distance', ascending=True)\n  newdftri = newdf.head(k) #on prend les k joueurs les plus proches physiquement\n  sol = newdftri['Poste'].describe().top\n  return sol\n\nfor k in range(1,20):\n    print(knn(93,188,k))\n</code></pre> \ud83d\udccb Texte<pre><code>Centre\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\n</code></pre> <p>On s'aper\u00e7oit que la pr\u00e9diction est tr\u00e8s stable... sauf si \\(k=1\\) ! Il se trouve qu'un joueur poss\u00e8de exactement ces caract\u00e9ristiques physiques (Pierre-Louis BARASSI) et qu'il joue Centre :</p> \ud83d\udc0d Script Python<pre><code>df['distance']=(df['Taille']-188)**2+(df['Poids']-93)**2\nnewdf = df.sort_values(by='distance', ascending=True)\nnewdf.head(10)\n</code></pre> Equipe Nom Poste Date de naissance Taille Poids distance 314 Lyon Pierre-Louis BARASSI Centre 22/04/1998 188 93 0 461 Pau Vincent PINTO Ailier 10/04/1999 187 93 1 527 Toulon St\u00e9phane ONAMB\u00c9L\u00c9 3\u00e8me ligne 12/02/1993 188 94 1 202 Castres Geoffrey PALIS Arri\u00e8re 08/07/1991 189 93 1 196 Castres Armand BATLLE Ailier 12/04/1987 188 92 1 585 Toulouse Th\u00e9o BELAN Centre 15/11/1992 187 94 2 242 Clermont Samuel EZEALA Ailier 11/12/1999 187 94 2 502 Racing92 Simon ZEBO Ailier 16/03/1990 187 94 2 133 Brive Esteban ABADIE 3\u00e8me ligne 01/12/1997 188 95 4 369 Montpellier Benjamin FALL Arri\u00e8re 03/03/1989 186 93 4 <p>On peut s'apercevoir aussi que jusqu'\u00e0 \\(k=5\\), aucun poste n'est majoritaire : la pr\u00e9diction pourrait aussi bien renvoyer Centre, 3\u00e8me ligne, ou Arri\u00e8re. Ce n'est que gr\u00e2ce \u00e0 l'ordre alphab\u00e9tique que la r\u00e9ponse renvoy\u00e9e est \u00abAilier\u00bb. Par contre, d\u00e8s que \\(k \\geqslant 5\\), le poste d'Ailier est bien majoritaire parmi les \\(k\\) plus proches voisins.</p> \ud83d\udc0d Script Python<pre><code>\n</code></pre>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/cours/","title":"4.7 Algorithme des KNN","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/cours/#methode-du-k-nearest-neighbours-knn-aka-les-k-plus-proches-voisins","title":"M\u00e9thode du K-Nearest-Neighbours (KNN), aka les k-plus-proches-voisins","text":"<p>La m\u00e9thode KNN est une m\u00e9thode simple et efficace de classification. La classification est un enjeu majeur de l'Intelligence Artificielle :</p> <ul> <li>la cam\u00e9ra d'une voiture autonome per\u00e7oit un panneau, mais quel est ce panneau ?</li> <li>un grain de beaut\u00e9 est pris en photo par un dermatologue, ce grain de beaut\u00e9 est-il canc\u00e9reux ?</li> <li>...</li> </ul> <p>La m\u00e9thode du KNN va trouver quels sont, dans une base de donn\u00e9es d\u00e9j\u00e0 bien remplie et labell\u00e9e, les k-objets (les 6 objets si \\(k=6\\) par exemple) qui se rapprochent le plus de l'objet \u00e0 classifier. En prenant ensuite la caract\u00e9ristique la plus fr\u00e9quente parmi ces 6 objets, on devine alors dans quelle cat\u00e9gorie notre objet doit se classer.</p> <p></p> <p>Notre objectif :  Nous allons reprendre le jeu de donn\u00e9es sur les joueurs du top14 utilis\u00e9 ici https://github.com/glassus/nsi/blob/master/Premiere/Theme06_Traitement_de_donnees/03_Pandas_eleves.ipynb</p> <p>Question : si on croise une personne nous disant qu'elle veut jouer en top14, et qu'elle nous donne son poids et sa taille, peut-on lui pr\u00e9dire \u00e0 quel poste elle devrait jouer ?</p> <p>Dans toute id\u00e9e de classification il y a l'id\u00e9e de distance. Il faut comprendre la distance comme une mesure de la diff\u00e9rence. </p> <p>Comment mesurer la diff\u00e9rence physique entre deux joueurs de rugby ? </p> <p></p> \ud83d\udc0d Script Python<pre><code>import pandas as pd #import du module pandas, abr\u00e9g\u00e9 classiquement par \"pd\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>df = pd.read_csv('data/top14.csv', encoding = 'utf-8')\n</code></pre>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/cours/#resultat-attendu","title":"R\u00e9sultat attendu :","text":"<p>Il faut cr\u00e9er une fonction <code>knn()</code> qui prend en argument <code>poids</code> et <code>taille</code> , sont les caract\u00e9ristiques du nouveau joueur. La fonction doit renvoyer une cha\u00eene de caract\u00e8re correspondant au poste auquel elle est susceptible de jouer.</p> <p>Exemple : </p> <p></p> \ud83d\udc0d Script Python<pre><code>def knn(poids, taille):\n  df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2\n  newdf = df.sort_values(by='distance', ascending=True)\n  newdftri = newdf.head(6) #on prend les 6 joueurs les plus proches physiquement\n  sol = newdftri['Poste'].describe().top\n  return sol\n</code></pre> \ud83d\udc0d Script Python<pre><code>knn(93,188)\n</code></pre> \ud83d\udccb Texte<pre><code>'Ailier'\n</code></pre>"},{"location":"T5_Algorithmique/5.7_Algorithme_KNN/cours/#influence-du-parametre-k","title":"Influence du param\u00e8tre \\(k\\)","text":"<p>Dans le code pr\u00e9c\u00e9dent, on a travaill\u00e9 avec \\(k=6\\) et c'est le poste majoritaire parmi les 6 joueurs les plus proches qui a \u00e9t\u00e9 donn\u00e9 par l'algorithme. Modifions l\u00e9g\u00e8rement la fonction <code>knn()</code> afin d'observer l'influence du param\u00e8tre \\(k\\) sur la pr\u00e9diction :</p> \ud83d\udc0d Script Python<pre><code>def knn(poids, taille, k):\n  df['distance']=(df['Taille']-taille)**2+(df['Poids']-poids)**2\n  newdf = df.sort_values(by='distance', ascending=True)\n  newdftri = newdf.head(k) #on prend les k joueurs les plus proches physiquement\n  sol = newdftri['Poste'].describe().top\n  return sol\n\nfor k in range(1,20):\n    print(knn(93,188,k))\n</code></pre> \ud83d\udccb Texte<pre><code>Centre\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\nAilier\n</code></pre> <p>On s'aper\u00e7oit que la pr\u00e9diction est tr\u00e8s stable... sauf si \\(k=1\\) ! Il se trouve qu'un joueur poss\u00e8de exactement ces caract\u00e9ristiques physiques (Pierre-Louis BARASSI) et qu'il joue Centre :</p> \ud83d\udc0d Script Python<pre><code>df['distance']=(df['Taille']-188)**2+(df['Poids']-93)**2\nnewdf = df.sort_values(by='distance', ascending=True)\nnewdf.head(10)\n</code></pre> Equipe Nom Poste Date de naissance Taille Poids distance 314 Lyon Pierre-Louis BARASSI Centre 22/04/1998 188 93 0 461 Pau Vincent PINTO Ailier 10/04/1999 187 93 1 527 Toulon St\u00e9phane ONAMB\u00c9L\u00c9 3\u00e8me ligne 12/02/1993 188 94 1 202 Castres Geoffrey PALIS Arri\u00e8re 08/07/1991 189 93 1 196 Castres Armand BATLLE Ailier 12/04/1987 188 92 1 585 Toulouse Th\u00e9o BELAN Centre 15/11/1992 187 94 2 242 Clermont Samuel EZEALA Ailier 11/12/1999 187 94 2 502 Racing92 Simon ZEBO Ailier 16/03/1990 187 94 2 133 Brive Esteban ABADIE 3\u00e8me ligne 01/12/1997 188 95 4 369 Montpellier Benjamin FALL Arri\u00e8re 03/03/1989 186 93 4 <p>On peut s'apercevoir aussi que jusqu'\u00e0 \\(k=5\\), aucun poste n'est majoritaire : la pr\u00e9diction pourrait aussi bien renvoyer Centre, 3\u00e8me ligne, ou Arri\u00e8re. Ce n'est que gr\u00e2ce \u00e0 l'ordre alphab\u00e9tique que la r\u00e9ponse renvoy\u00e9e est \u00abAilier\u00bb. Par contre, d\u00e8s que \\(k \\geqslant 5\\), le poste d'Ailier est bien majoritaire parmi les \\(k\\) plus proches voisins.</p> \ud83d\udc0d Script Python<pre><code>\n</code></pre>"},{"location":"T6_Traitement_de_donnees/sommaire/","title":"Th\u00e8me 6 :  Traitement de donn\u00e9es","text":"<p>Cr\u00e9dits</p> <p>Cr\u00e9dit du cours : @Gilles Lassus</p> <ol> <li>Manipulation de fichiers csv</li> <li>Trier des donn\u00e9es</li> <li>Utilisation du module Pandas</li> </ol>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/","title":"Manipulation de fichiers csv","text":"<p>d\u00e9finition</p> <p>Les fichiers CSV (pour <code>Comma Separated Values</code>) sont des fichiers-texte (ils ne contiennent aucune mise en forme) utilis\u00e9s pour stocker des donn\u00e9es, s\u00e9par\u00e9es par des virgules (ou des points-virgules, ou des espaces...). Il n'y a pas de norme officielle du CSV.  </p> <p>\ud83d\udd3d T\u00e9l\u00e9charger le notebook de cours correspondant ici</p>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#ouverture-dun-fichier-csv-par-des-logiciels-classiques","title":"Ouverture d'un fichier CSV par des logiciels classiques","text":"<ul> <li>T\u00e9l\u00e9charger le fichier eleve.csv</li> <li>Ouvrir avec le Bloc-Notes ce fichier.</li> <li>Rajouter une ligne avec une personne suppl\u00e9mentaire, sauvegarder le fichier.</li> <li>Ouvrir le fichier avec un tableur.</li> </ul> aper\u00e7u <p>Sur un tableau  ou en mode Texte </p>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#exploitation-dun-fichier-csv-en-python-avec-le-module-csv","title":"Exploitation d'un fichier CSV en Python avec le module CSV","text":"<p>L'utilisation d'un tableur peut \u00eatre d\u00e9licate lorsque le fichier CSV comporte un tr\u00e8s grand nombre de lignes.  Python permet de lire et d'extraire des informations d'un fichier CSV m\u00eame tr\u00e8s volumineux, gr\u00e2ce \u00e0 des modules d\u00e9di\u00e9s, comme le bien-nomm\u00e9 <code>csv</code> (utilis\u00e9 ici) ou bien <code>pandas</code> (qui sera vu plus tard).</p> <p>Le logiciel <code>Jupyter Notebook</code> se pr\u00eate parfaitement \u00e0 la consultation et l'exploitation de donn\u00e9es structur\u00e9es, nous l'utiliserons pr\u00e9f\u00e9remment \u00e0 <code>Spyder</code>. </p>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#premiere-methode","title":"Premi\u00e8re m\u00e9thode","text":"<p>Le script suivant :</p> \ud83d\udc0d Script Python<pre><code>import csv                          \nf = open('eleve.csv', \"r\", encoding = 'utf-8') # le \"r\" signifie \"read\", le fichier est ouvert en lecture seule\ndonnees = csv.reader(f)  # donnees est un objet (sp\u00e9cifique au module csv) qui contient des lignes\n\nfor ligne in donnees:               \n    print(ligne)\n\nf.close()    # toujours fermer le fichier !\n</code></pre> <p>donne :</p> \ud83d\udc0d Script Python<pre><code>['Nom', 'Anglais', 'Info', 'Maths']\n['Joe', '17', '18', '19']\n['Zoe', '15', '17', '19']\n['Max', '19', '13', '17']\n</code></pre> <p>Probl\u00e8mes</p> <ol> <li>Les donn\u00e9es ne sont pas structur\u00e9es : la premi\u00e8re ligne est la ligne des \u00abdescripteurs\u00bb (ou des \u00abchamps\u00bb), alors que les lignes suivantes sont les valeurs de ces descripteurs.</li> <li>La variable <code>donnees</code> n'est pas exploitable en l'\u00e9tat. Ce n'est pas une structure connue. C'est un <code>objet</code> un peu complexe.</li> </ol>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#ameliorations","title":"Am\u00e9liorations","text":"<p>Au lieu d'utiliser la fonction <code>csv.reader()</code>, utilisons <code>csv.DictReader()</code>. Comme son nom l'indique, elle renverra une variable contenant des dictionnaires.</p> <p>Le script suivant  : \ud83d\udc0d Script Python<pre><code>import csv\nf = open('eleve.csv', \"r\", encoding = 'utf-8')\ndonnees = csv.DictReader(f)\n\nfor ligne in donnees:\n    print(dict(ligne))\n\nf.close()\n</code></pre></p> <p>donne \ud83d\udc0d Script Python<pre><code>{'Pr\u00e9nom': 'John', 'Nom': 'Smith', 'Email': 'john@example.com', 'SMS': '33123456789'}\n{'Pr\u00e9nom': 'Harry', 'Nom': 'Pierce', 'Email': 'harry@example.com', 'SMS': '33111222222'}\n{'Pr\u00e9nom': 'Howard', 'Nom': 'Paige', 'Email': 'howard@example.com', 'SMS': '33777888898'}\n</code></pre></p> <p>C'est mieux ! Les donn\u00e9es sont maintenant des dictionnaires. Mais nous avons juste \u00e9num\u00e9r\u00e9 3 dictionnaires. Comment r\u00e9-acc\u00e9der au premier d'entre eux, celui de John Smith ? Essayons :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; donnees[0]\n\n    ---------------------------------------------------------------------------\n\n    TypeError                                 Traceback (most recent call last)\n\n    &lt;ipython-input-3-9914ab00321e&gt; in &lt;module&gt;\n    ----&gt; 1 donnees[0]\n\n\n    TypeError: 'DictReader' object does not support indexing\n</code></pre> <p>Pas simple \u00e0 parcourir, non ?</p>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#une-liste-de-dictionnaires","title":"Une liste de dictionnaires","text":"<p>Nous allons donc cr\u00e9er une liste de dictionnaires.</p> <p>Le script suivant (un classique pour la lecture des fichiers CSV) \ud83d\udc99 :</p> \ud83d\udc0d Script Python<pre><code>import csv\nf = open('exemple.csv', \"r\", encoding = 'utf-8')\ndonnees = csv.DictReader(f)\namis = []\nfor ligne in donnees:\n    amis.append(dict(ligne))\n\nf.close()\n</code></pre> <p>permet de faire ceci :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; amis\n\n    [{'Pr\u00e9nom': 'John',\n      'Nom': 'Smith',\n      'Email': 'john@example.com',\n      'SMS': '33123456789'},\n     {'Pr\u00e9nom': 'Harry',\n      'Nom': 'Pierce',\n      'Email': 'harry@example.com',\n      'SMS': '33111222222'},\n     {'Pr\u00e9nom': 'Howard',\n      'Nom': 'Paige',\n      'Email': 'howard@example.com',\n      'SMS': '33777888898'}]\n\n&gt;&gt;&gt; print(amis[0]['Email'])\n    john@example.com\n\n&gt;&gt;&gt; print(amis[2]['Nom'])\n  Paige\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#un-fichier-un-peu-plus-interessant-les-joueurs-de-rugby-du-top14","title":"Un fichier un peu plus int\u00e9ressant : les joueurs de rugby du TOP14","text":"<p>Le fichier <code>top14.csv</code>  contient tous les joueurs du Top14 de rugby, saison 2019-2020, avec leur date de naissance, leur poste, et leurs mensurations. </p> <p>Ce fichier a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9 par R\u00e9mi Deniaud, de l'acad\u00e9mie de Bordeaux.</p> <p>Question 1. Stocker dans  une variable <code>joueurs</code>  les renseignements de tous les joueurs pr\u00e9sents dans ce fichier csv.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>import csv\nf = open('data/top14.csv', \"r\", encoding = 'utf-8')\ndonnees = csv.DictReader(f)\njoueurs = []\nfor ligne in donnees:\n    joueurs.append(dict(ligne))\n\nf.close()\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#premiere-analyse","title":"Premi\u00e8re analyse","text":"<p>Question 2. Combien de joueurs sont pr\u00e9sents dans ce fichier ?</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; len(joueurs)\n 595\n</code></pre> <p>Question 3. Quel est le pr\u00e9nom du joueur n\u00b0486 ?</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; joueurs[486]['Nom']\n  'Wenceslas LAURET'\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#extraction-de-donnees-particulieres","title":"Extraction de donn\u00e9es particuli\u00e8res","text":"<p>Question 4.  O\u00f9 joue Baptiste SERIN ?  </p> <p>La m\u00e9thode la plus naturelle est de parcourir toute la liste jusqu'\u00e0 trouver le bon joueur, puis d'afficher son \u00e9quipe.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; for joueur in joueurs :\n        if joueur['Nom'] == 'Baptiste SERIN' :\n            print(joueur['Equipe'])\n</code></pre> <p>Une m\u00e9thode plus efficace est d'utiliser une liste par compr\u00e9hension incluant un test. </p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; clubSerin = [joueur['Equipe'] for joueur in joueurs if joueur['Nom'] == 'Baptiste SERIN']\n&gt;&gt;&gt; clubSerin\n</code></pre> <p>Question 5.  Qui sont les joueurs de plus de 140 kg ?</p> <p>Attention \u00e0 bien convertir en entier la chaine de caract\u00e8re renvoy\u00e9e par la cl\u00e9 <code>Poids</code> </p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lourds = [(joueur['Nom'], joueur['Poids']) for joueur in joueurs if int(joueur['Poids']) &gt; 140]\n&gt;&gt;&gt; lourds\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#exploitation-graphique","title":"Exploitation graphique","text":"<p>Nous allons utiliser le module Matplotlib pour illustrer les donn\u00e9es de notre fichier csv.</p>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#exemple","title":"Exemple","text":"\ud83d\udc0d Script Python<pre><code>%matplotlib inline\nimport matplotlib.pyplot as plt\nX = [0,1,3,6]\nY = [12,10,7,15]\nplt.plot(X,Y,'ro') # r pour red, o pour un cercle. voir https://matplotlib.org/api/markers_api.html\nplt.show()\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.1_Manipulation_csv/cours/#application","title":"Application","text":"<p>Question 1. Afficher sur un graphique tous les joueurs de rugby du top14, en mettant le poids en abscisse et la taille en ordonn\u00e9e.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>%matplotlib inline\nX = [int(joueur['Poids']) for joueur in joueurs]\nY = [int(joueur['Taille']) for joueur in joueurs]\nplt.plot(X,Y,'ro') # r pour red, o pour un cercle. voir https://matplotlib.org/api/markers_api.html\nplt.show()\n</code></pre> <p></p> <p>Question 2. Faire appara\u00eetre ensuite les joueurs \u00e9voluant au poste de Centre en bleu, et les 2\u00e8me lignes en vert.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>%matplotlib inline\n#tous les joueurs\nX = [int(joueur['Poids']) for joueur in joueurs]\nY = [int(joueur['Taille']) for joueur in joueurs]\nplt.plot(X,Y,'ro') \n\n#on recolorie les Centres en bleu\nX = [int(joueur['Poids']) for joueur in joueurs if joueur['Poste'] == 'Centre']\nY = [int(joueur['Taille']) for joueur in joueurs if joueur['Poste'] == 'Centre']\nplt.plot(X,Y,'bo')\n\n#on recolorie les 2\u00e8me ligne en vert\nX = [int(joueur['Poids']) for joueur in joueurs if joueur['Poste'] == '2\u00e8me ligne']\nY = [int(joueur['Taille']) for joueur in joueurs if joueur['Poste'] == '2\u00e8me ligne']\nplt.plot(X,Y,'go')\n\n\nplt.show()\n</code></pre> <p></p>"},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/","title":"Trier des donn\u00e9es","text":"<p>Nous reprenons notre fichier de joueurs de rugby du Top14. </p> <p>\ud83d\udd3d T\u00e9l\u00e9charger le notebook de cours correspondant ici</p> \ud83d\udc0d Script Python<pre><code>import csv\nf = open('data/top14.csv', \"r\", encoding = 'utf-8')\ndonnees = csv.DictReader(f)\njoueurs = []\nfor ligne in donnees:\n    joueurs.append(dict(ligne))\n\nf.close()\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/#creer-une-fonction-filtre","title":"Cr\u00e9er une fonction filtre","text":"<p>L'objectif est de cr\u00e9er une fonction <code>joueursEquipe(equipe)</code> qui renvoie une liste contentant tous les joueurs de l'\u00e9quipe <code>equipe</code>.  Le param\u00e8tre <code>equipe</code> sera donn\u00e9e sous forme de cha\u00eene de caract\u00e8res.  La valeur renvoy\u00e9e sera de type <code>liste de dictionnaire</code>.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def joueursEquipe(equipe):\n    lst_joueurs = []\n    for j in joueurs :\n        if j['Equipe'] == equipe :\n            lst_joueurs.append(j)\n\n    return lst_joueurs\nassert len(joueursEquipe(\"Bordeaux\")) == 37\n</code></pre> <p>\u2753  D\u00e9finir de la m\u00eame mani\u00e8re une fonction <code>joueursPoste(poste)</code> qui renvoie une liste contentant tous les joueurs occupant le  <code>poste</code>.  Le param\u00e8tre <code>poste</code> sera donn\u00e9e sous forme de cha\u00eene de caract\u00e8res.  La valeur renvoy\u00e9e sera de type <code>liste de dictionnaire</code>.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def joueursPoste(poste):\n    lst_joueurs = []\n    for j in joueurs :\n        if j['Poste'] == poste :\n            lst_joueurs.append(j)\n    return lst_joueurs\njoueursPoste('M\u00eal\u00e9e')\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/#utilisation-dune-fonction-de-tri","title":"Utilisation d'une fonction de tri","text":""},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/#le-probleme","title":"Le probl\u00e8me","text":"<p>Comment classer les joueurs suivant leur taille ?  La fonction <code>sorted(liste)</code> est efficace sur les listes : elle renvoie une nouvelle liste tri\u00e9e dans l'ordre croissant.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mylist = [4,2,8,6]\n&gt;&gt;&gt; mynewlist = sorted(mylist)\n&gt;&gt;&gt; print(mynewlist)\n  [2, 4, 6, 8]\n</code></pre> <p>tri en place ou non</p> <p>La fonction <code>sort()</code> est un tri dit en place. Elle modifie la liste elle-m\u00eame (et renvoie None pour \u00e9viter les confusions). Contrairement \u00e0 la fonction <code>sorted()</code> qui cr\u00e9\u00e9e une nouvelle liste et laisse la liste pass\u00e9e en param\u00e8tre non tri\u00e9e. Source : doc python</p> <p>Mais comment trier un dictionnaire ?</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; test = sorted(joueurs)\n    ---------------------------------------------------------------------------\n\n    TypeError                                 Traceback (most recent call last)\n\n    &lt;ipython-input-14-de081d14a3da&gt; in &lt;module&gt;\n    ----&gt; 1 test = sorted(joueurs)\n\n\n    TypeError: '&lt;' not supported between instances of 'dict' and 'dict'\n</code></pre> <p>La tentative de tri sur un dictionnaire provoque une erreur. Un dictionnaire poss\u00e8de plusieurs cl\u00e9s diff\u00e9rentes. Ici, plusieurs cl\u00e9s peuvent \u00eatre des crit\u00e8res de tri : la taille, le poids.</p>"},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/#un-exemple-de-tri-de-dictionnaire","title":"Un exemple de tri de dictionnaire","text":"<p>Prenons un nouveau jeu de donn\u00e9es, contenant les informations sur la s\u00e9rie Simpson. Simpsons est de type <code>Liste de dictionnaires</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>Simpsons = [{\"Prenom\" : \"Bart\", \"age estim\u00e9\": \"10\"},\n           {\"Prenom\" : \"Lisa\", \"age estim\u00e9\": \"8\"},\n           {\"Prenom\" : \"Maggie\", \"age estim\u00e9\": \"1\"},\n           {\"Prenom\" : \"Homer\", \"age estim\u00e9\": \"38\"},\n           {\"Prenom\" : \"Marge\", \"age estim\u00e9\": \"37\"}]\n</code></pre> On d\u00e9finit une fonction <code>age</code> permettant de renvoyer l'age estim\u00e9 d'un personnage pass\u00e9 en param\u00e8tre.</p> \ud83d\udc0d Script Python<pre><code>def age(personnage):\n        return int(personnage[\"age estim\u00e9\"])\nage(Simpsons[0])\n&gt;&gt;&gt; 10\n</code></pre> <p>La cr\u00e9ation de cette fonction <code>age()</code> va nous permettre de sp\u00e9cifier une cl\u00e9 de tri, par le param\u00e8tre <code>key</code> de la fonction <code>sorted</code> (voir doc Python ) :</p> <p>Tri d'un dictionnaire </p> <p>\ud83d\udc0d Script Python<pre><code>triSimpsons = sorted(Simpsons, key = age)\n\ntriSimpsons\n&gt;&gt;&gt;[{'Prenom': 'Maggie', 'age estim\u00e9': '1'},\n    {'Prenom': 'Lisa', 'age estim\u00e9': '8'},\n    {'Prenom': 'Bart', 'age estim\u00e9': '10'},\n    {'Prenom': 'Marge', 'age estim\u00e9': '37'},\n    {'Prenom': 'Homer', 'age estim\u00e9': '38'}]\n</code></pre> On peut aussi inverser l'ordre de tri en pr\u00e9cision le sens de tri :</p> \ud83d\udc0d Script Python<pre><code>triSimpsons = sorted(Simpsons, key = age, reverse = True)\ntriSimpsons\n&gt;&gt;&gt; [{'Prenom': 'Homer', 'age estim\u00e9': '38'},\n    {'Prenom': 'Marge', 'age estim\u00e9': '37'},\n    {'Prenom': 'Bart', 'age estim\u00e9': '10'},\n    {'Prenom': 'Lisa', 'age estim\u00e9': '8'},\n    {'Prenom': 'Maggie', 'age estim\u00e9': '1'}]\n</code></pre> <p>\u2753   Trier les joueurs du top14 par taille.</p> r\u00e9ponse \ud83d\udccb Texte<pre><code>```python\ndef taillePlayer(player) :\n    return int(player['Taille'])\njoueurs_taille_croissant = sorted(joueurs, key = taillePlayer)\n```\n</code></pre> <p>\u2753   Trier les joueurs du top14 par poids.</p> r\u00e9ponse \ud83d\udccb Texte<pre><code>```python\ndef poidsPlayer(player) :\n    return int(player['Poids'])\njoueurs_poids_croissant = sorted(joueurs, key = poidsPlayer)\n```\n</code></pre> <p>\u2753   Trier les joueurs de Bordeaux suivant leur Indice de Masse Corporelle (IMC )</p> r\u00e9ponse \ud83d\udccb Texte<pre><code>```python\ndef IMC(player):\n    masse = int(player['Poids'])\n    taille_m = int(player['Taille']) / 100\n    return masse / taille_m**2\njoueursUBB = [k for k in joueurs if k['Equipe'] == 'Bordeaux']\njoueursUBB_tri = sorted(joueursUBB, key = IMC)\n```\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/#recherche-des-joueurs-de-profil-physique-similaire","title":"Recherche des joueurs de profil physique similaire","text":"<p>(Approche par Algorithme des plus proches voisins, knn)</p>"},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/#distance-entre-deux-joueurs","title":"Distance entre deux joueurs","text":"<p>Construire une fonction <code>distance(joueur1,joueur2)</code> qui renvoie la somme des carr\u00e9s des diff\u00e9rences de tailles et de poids entre les joueurs <code>joueur1</code> et <code>joueur2</code> :  $$ d = (p_1-p_2)^2 + (t_1-t_2)^2$$</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def distance(joueur1,joueur2):\n    p1 = int(joueur1['Poids'])\n    p2 = int(joueur2['Poids'])\n    t1 = int(joueur1['Taille'])\n    t2 = int(joueur2['Taille'])\n    return (p1-p2)**2+(t1-t2)**2\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.2_Trier_des_donnees/cours/#distance-des-joueurs-avec-baptiste-serin","title":"Distance des joueurs avec Baptiste Serin","text":"<p>Retrouvons d'abord le num\u00e9ro de Baptiste Serin dans notre classement de joueurs :</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>for k in range(len(joueurs)) :\n    if joueurs[k]['Nom'] == 'Baptiste SERIN' :\n        print(k)\n&gt;&gt;&gt; 530\njoueurs[530]\n&gt;&gt;&gt; {'Equipe': 'Toulon',\n    'Nom': 'Baptiste SERIN',\n    'Poste': 'M\u00eal\u00e9e',\n    'Date de naissance': '20/06/1994',\n    'Taille': '180',\n    'Poids': '79'}\n</code></pre> <p>Nous pouvons maintenant classer les joueurs suivant leur distance morphologique \u00e0 Baptiste  SERIN :</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def distanceSerin(joueur2):\n    return distance(joueurs[530],joueur2)\ndistanceSerin(joueurs[530])\n&gt;&gt;&gt; 0\njoueurs_VS_Serin = sorted(joueurs, key = distanceSerin)\njoueurs_VS_Serin\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.3_Pandas/cours/","title":"Utilisation du module Pandas","text":"<p>Le module <code>csv</code> utilis\u00e9 pr\u00e9c\u00e9demment se contente de lire les donn\u00e9es structur\u00e9es. Il ne fait aucun effort particulier pour analyser les donn\u00e9es. Par exemple les valeurs d\u00e9cimales sont interpr\u00e9t\u00e9es comme des cha\u00eenes de caract\u00e8res.  La biblioth\u00e8que <code>pandas</code> est par contre sp\u00e9cialement con\u00e7ue pour l'analyse des donn\u00e9es (data analysis) : elle est donc naturellement bien plus performante.</p> <p>Lien vers la documentation de la librairie PANDAS (en anglais) : documentation</p> <p>Nous reprenons notre fichier de joueurs de rugby du Top14. </p> <p>\ud83d\udd3d T\u00e9l\u00e9charger le notebook de cours correspondant ici</p> \ud83d\udc0d Script Python<pre><code>import pandas as pd #import du module pandas, abr\u00e9g\u00e9 classiquement par \"pd\"\ndf = pd.read_csv('top14.csv', encoding = 'utf-8')\n</code></pre> <p>La variable est nomm\u00e9e classiquement <code>df</code> pour dataframe (que l'on peut traduire par table de donn\u00e9es)</p> \ud83d\udc0d Script Python<pre><code>type(df)\n&gt;&gt;&gt; pandas.core.frame.DataFrame\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.3_Pandas/cours/#premiers-renseignements-sur-les-fichiers-de-donnees","title":"Premiers renseignements sur les fichiers de donn\u00e9es","text":"<p>\u2753 Que contient la variable <code>df</code>?</p> r\u00e9ponse <p></p> <p>Les donn\u00e9es sont pr\u00e9sent\u00e9es dans l'ordre originel du fichier.  Il est possible d'avoir uniquement les premi\u00e8res lignes du fichier avec la commande <code>head()</code> et les derni\u00e8res du fichier avec la commande <code>tail()</code>. Ces commandes peuvent recevoir en param\u00e8tre un nombre entier.</p> <p>\u2753 Que fait l'instruction <code>df.head()</code> ?</p> r\u00e9ponse \ud83d\udccb Texte<pre><code>```python\ndf.head()\n```\nElle renvoie les n premi\u00e8res lignes de `Df`. Par d\u00e9faut n=5.\n![extrait](data/head.jpg){: .center width=50%}\n</code></pre> <p>\u2753 Que fait l'instruction <code>df.tail()</code> ?</p> r\u00e9ponse \ud83d\udccb Texte<pre><code>```python\ndf.tail()\n```\nElle renvoie les n derni\u00e8res lignes de `Df`. Par d\u00e9faut n=5.\n![extrait](data/tail.jpg){: .center width=50%}\n</code></pre> <p>\u2753 Que fait l'instruction <code>df.head(3)</code> ?</p> r\u00e9ponse \ud83d\udccb Texte<pre><code>```python\ndf.head(3)\n```\nElle renvoie les 3 premi\u00e8res lignes de `Df`. \n![extrait](data/head3.jpg){: .center width=50%}\n</code></pre> <p>Pour avoir des renseignements globaux sur la structure de notre fichier, on peut utiliser la commande <code>df.info()</code></p> \ud83d\udc0d Script Python<pre><code>df.info()\n&gt;&gt;&gt;     &lt;class 'pandas.core.frame.DataFrame'&gt;\n        RangeIndex: 595 entries, 0 to 594\n        Data columns (total 6 columns):\n        #   Column             Non-Null Count  Dtype \n        ---  ------             --------------  ----- \n        0   Equipe             595 non-null    object\n        1   Nom                595 non-null    object\n        2   Poste              595 non-null    object\n        3   Date de naissance  595 non-null    object\n        4   Taille             595 non-null    int64 \n        5   Poids              595 non-null    int64 \n        dtypes: int64(2), object(4)\n        memory usage: 28.0+ KB\n</code></pre> <p>Pour acc\u00e9der \u00e0 une fiche particuli\u00e8re de joueur, on peut utiliser la fonction <code>df.loc()</code> :</p> \ud83d\udc0d Script Python<pre><code>df.loc[45]\n&gt;&gt;&gt; Equipe                             Bayonne\n    Nom                  Torsten VAN JAARSVELD\n    Poste                            Talonneur\n    Date de naissance               30/06/1987\n    Taille                                 175\n    Poids                                  106\n    Name: 45, dtype: object\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.3_Pandas/cours/#extraction-de-colonnes-creation-de-graphiques","title":"Extraction de colonnes, cr\u00e9ation de graphiques","text":"<p>Pour cr\u00e9er une liste contenant uniquement les donn\u00e9es num\u00e9riques de la colonne poids, il suffit d'\u00e9crire :</p> \ud83d\udc0d Script Python<pre><code>poids = df['Poids']\n</code></pre> <p>\u26a0\ufe0f Attention, la variable <code>poids</code> n'est pas une liste qui contiendrait <code>[122,116,112,...]</code> mais un type particulier \u00e0 <code>pandas</code>, appel\u00e9 <code>Series</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>print(poids)\n    0      122\n    1      116\n    2      112\n    3      123\n    4      119\n          ... \n    590     78\n    591     97\n    592     91\n    593     85\n    594     86\n    Name: Poids, Length: 595, dtype: int64\n ```   \n\n```python\ntype(poids)\n&gt;&gt;&gt; pandas.core.series.Series\n</code></pre> On peut n\u00e9anmoins s'en servir comme d'une liste classique.</p> <p>\ud83d\udc0d Script Python<pre><code>poids[0]\n&gt;&gt;&gt; 122\n</code></pre> On voit donc que les donn\u00e9es sont automatiquement trait\u00e9es comme des nombres. Pas besoin de conversion comme avec le module <code>csv</code> ! Pour tracer notre nuage de points poids-taille, le code sera donc simplement :</p> <p>\ud83d\udc0d Script Python<pre><code>%matplotlib inline\nimport matplotlib.pyplot as plt\nX = df['Poids']\nY = df['Taille']\n\nplt.plot(X,Y,'ro') # r pour red, o pour un cercle. voir https://matplotlib.org/api/markers_api.html\nplt.show()\n</code></pre> </p> <p>L'interpr\u00e9tation num\u00e9rique permet \u00e0 <code>pandas</code> d'analyser automatiquement les donn\u00e9es, avec notamment la fonction <code>df.describe()</code>.</p> \ud83d\udc0d Script Python<pre><code>df['Taille'].describe()\n&gt;&gt;&gt; count    595.000000\n    mean     186.559664\n    std        7.572615\n    min      169.000000\n    25%      181.000000\n    50%      186.000000\n    75%      192.000000\n    max      208.000000\n    Name: Taille, dtype: float64\n</code></pre> <p>Pour les donn\u00e9es non-num\u00e9riques, la commande <code>describe()</code> n'est que peu d'utilit\u00e9. Elle renseigne toutefois la valeur la plus fr\u00e9quente (en statistiques, le mode ou valeur modale)</p> <p>Par exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>df['Poste'].describe().top\n&gt;&gt;&gt; '3\u00e8me ligne'\n</code></pre> Le poste le plus fr\u00e9quent est donc celui de '3\u00e8me ligne'.</p> <p>Pour conna\u00eetre par exemple la date de naissance la plus fr\u00e9quente chez les joueurs du top14, on utilisera simplement :</p> <p>\u2753 Quelle est la date de naissance la plus fr\u00e9quente ?</p> r\u00e9ponse \ud83d\udccb Texte<pre><code>```python\ndf['Date de naissance'].describe().top\n```\nQui sont les joueurs n\u00e9s \u00e0 cette date ?\n\n```python\nprint(df['Nom'][df['Date de naissance'] == '23/04/1993'])\n```\n</code></pre> <p>\u2753 Quels sont les joueurs les plus grands du TOP14 ?</p> r\u00e9ponse \ud83d\udccb Texte<pre><code> ```python\ndf['Taille'].describe().max\nprint(df['Nom'][df['Taille']==208])\n```\n</code></pre> <p>\u2753  Quel est le nombre de joueurs de Toulon ?</p> r\u00e9ponse \ud83d\udccb Texte<pre><code> ```python\nT = df[df['Equipe'] == 'Toulon']\nT.describe()\n```\n</code></pre> <p>Beaucoup plus de renseignements sont donn\u00e9s par la commande <code>value_counts()</code>.</p> \ud83d\udc0d Script Python<pre><code>df['Taille'].value_counts()\n&gt;&gt;&gt; 180    52\n    183    40\n    188    35\n    185    31\n    181    31\n    ...\n    208     2\n    205     1\n    169     1\n    Name: Taille, dtype: int64\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.3_Pandas/cours/#filtres-et-recherches","title":"Filtres et recherches","text":"<p>Comment cr\u00e9er une dataframe ne contenant que les joueurs de l'UBB ?  </p> <p>L'id\u00e9e syntaxique est d'\u00e9crire \u00e0 l'int\u00e9rieur de <code>df[]</code> le test qui permettra le filtrage.</p> \ud83d\udc0d Script Python<pre><code>UBB = df[df['Equipe'] == 'Bordeaux']\n&gt;&gt;&gt; UBB\n</code></pre> <p>\u2753  Cr\u00e9er une dataframe <code>poidsLourd</code> qui contient les joueurs de plus de 135 kg.</p> r\u00e9ponse \ud83d\udccb Texte<pre><code> ```python\npoidsLourd = df[df['Poids'] &gt; 135] \n```\n</code></pre> <p>\u2753  Cr\u00e9er une dataframe <code>grand_lourd</code> qui contient les joueurs de plus de 2m et plus de 120 kg.</p> r\u00e9ponse \ud83d\udccb Texte<pre><code> ```python\ngrand_lourd = df[(df['Poids'] &gt; 120) &amp; (df['Taille'] &gt; 200)]\n```\n</code></pre> <p>\u2753  Trouver en une seule ligne le joueur le plus l\u00e9ger du Top14.</p> r\u00e9ponse \ud83d\udccb Texte<pre><code> ```python\ndf['Nom'][df['Poids'] == min(df['Poids'])]\nprint(df['Nom'][df['Poids'].idxmin])\n```\n</code></pre>"},{"location":"T6_Traitement_de_donnees/6.3_Pandas/cours/#tris-de-donnees","title":"Tris de donn\u00e9es","text":"<p>Le tri se fait par la fonction <code>sort_values()</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>newdf = df.sort_values(by=['Poids'], ascending = True)\nnewdf.head(10)\n</code></pre> </p>"},{"location":"T6_Traitement_de_donnees/6.3_Pandas/cours/#rajout-dune-colonne","title":"Rajout d'une colonne","text":"<p>Afin de pouvoir trier les joueurs suivant de nouveaux crit\u00e8res, nous allons rajouter un champ pour chaque joueur. Prenons un exemple stupide : fabriquons un nouveau champ <code>'Poids apr\u00e8s les vacances'</code> qui contiendra le poids des joueurs augment\u00e9 de 8 kg.  Ceci se fera simplement par :</p> <p>\ud83d\udc0d Script Python<pre><code>df['Poids apr\u00e8s les vacances'] = df['Poids'] + 8\ndf.head()\n</code></pre> </p> <p>Pour supprimer cette colonne sans int\u00e9r\u00eat :</p> \ud83d\udc0d Script Python<pre><code>del df['Poids apr\u00e8s les vacances'] \ndf.head()\n</code></pre> <p>Exercice</p> Enonc\u00e9R\u00e9ponse 1R\u00e9ponse 2 <ol> <li>Cr\u00e9er une colonne contenant l'IMC de chaque joueur</li> <li>Cr\u00e9er une nouvelle dataframe contenant tous les joueurs du top14 class\u00e9s par ordre d'IMC croissant.</li> </ol> \ud83d\udc0d Script Python<pre><code>df['IMC'] = df['Poids'] / (df['Taille']/100)**2\ndf.head()\n</code></pre> <p>```python imcdf = df.sort_values(by=['IMC'], ascending = True) ````</p>"},{"location":"T7_IHM_Web/sommaire/","title":"Th\u00e8me 7 : IHM sur le web","text":"<ol> <li>Interactions sur une page web</li> <li>Protocole HTTP : \u00e9tude du chargement d'une page web</li> <li>Requ\u00eates GET, POST et formulaires</li> </ol>"},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/","title":"6.1 Pages web et interactions","text":""},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/#1-le-cas-le-plus-simple-la-meme-page-pour-tout-le-monde","title":"1. Le cas le plus simple : la m\u00eame page pour tout le monde","text":"<p>Nous allons tout d'abord consid\u00e9rer le cas o\u00f9 le serveur renvoie une page unique, identique pour tous les utilisateurs. De plus, l'utilisateur ne pourra pas agir sur sa page : il n'y a aucune interactivit\u00e9.</p> <p>Exemple de page statique c\u00f4t\u00e9 serveur et c\u00f4t\u00e9 utilisateur :</p> <ul> <li>cette merveille de page web.</li> <li>plus compl\u00e8te, mais tout aussi statique : cette page Wikipedia consacr\u00e9e \u00e0 John Conway.</li> </ul>"},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/#11-html-pur","title":"1.1 <code>html</code>  pur","text":"<p>Lorsque le client demande au serveur le contenu d'une page web, celui-ci lui renvoie, dans le cas le plus simple, une simple page <code>html</code>. <code>html</code> est un langage dit \u00ab \u00e0 balises \u00bb.  Ce n'est pas \u00e0 proprement parler un langage de programmation, mais plut\u00f4t un langage de description de contenu.  Il a \u00e9t\u00e9 invent\u00e9 en 1992 par Tim Berners-Lee. La version actuellement utilis\u00e9e est le <code>html5</code>.</p> <p>Exemple de page web minimale</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang='fr'&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;Un titre tr\u00e8s original&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;p&gt;Ceci est le texte introductif de ma page.&lt;/p&gt;\n        &lt;p&gt;\n          &lt;h1&gt;  Ceci est un titre de niveau 1 &lt;/h1&gt;\n          Mais sans rien d'int\u00e9ressant.\n          &lt;h2&gt;  Ceci est un titre de niveau 2 &lt;/h2&gt;\n              &lt;ul&gt;\n                  &lt;li&gt; le d\u00e9but d'une liste indent\u00e9e &lt;/li&gt;\n                  &lt;li&gt; la suite ... &lt;/li&gt;\n              &lt;/ul&gt;  \n        Pour apprendre le fonctionnement des balises, voir &lt;a href=\"https://developer.mozilla.org/fr/docs/Apprendre/HTML/Introduction_%C3%A0_HTML/Getting_started\"&gt; ici&lt;/a&gt; par exemple !\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Vous pouvez contempler ici le rendu de cette magnifique page.</p> <p>{{ initexo(0)}}</p> <p>{{ exercice() }}</p> \u00c9nonc\u00e9 <ul> <li>Cr\u00e9ez un dossier contenant un fichier <code>mapage.html</code>.</li> <li>Cr\u00e9ez une page contenant une image et un lien vers le site du lyc\u00e9e.</li> <li>Vous pouvez utiliser le logiciel Geany, install\u00e9 sur notre Debian.</li> <li>Vous pouvez aussi utiliser un \u00e9diteur en ligne avec rendu instantan\u00e9, du type https://www.w3schools.com/tryit/</li> </ul>"},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/#12-html-css","title":"1.2 <code>html</code> + <code>css</code>","text":"<p>L'acronyme <code>css</code>  signifie Cascading Style Sheets. L'id\u00e9e est de regrouper dans un seul fichier toutes les informations relatives \u00e0 la mise en forme des \u00e9l\u00e9ments de la page html.  De mani\u00e8re tr\u00e8s simplifi\u00e9e, on peut dire que le fichier <code>html</code> s'occupe du fond tandis que le fichier <code>css</code> s'occupe de la forme.</p> <p>Le fichier <code>css</code> (souvent nomm\u00e9 <code>style.css</code> et appel\u00e9 feuille de style) doit \u00eatre r\u00e9f\u00e9renc\u00e9 au d\u00e9but du fichier <code>html</code> , au sein de la balise <code>&lt;head&gt;</code>.</p> <p>Exemple de couple <code>html</code> / <code>css</code> minimal</p> <ul> <li> <p>fichier <code>index.html</code> :  HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;page test&lt;/title&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;\n          &lt;h1&gt;  Ceci est un titre de niveau 1 &lt;/h1&gt;\n          Mais sans rien d'int\u00e9ressant.\n          &lt;h2&gt;  Ceci est un titre de niveau 2 &lt;/h2&gt;\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p>fichier <code>style.css</code> :</p> </li> </ul> CSS<pre><code>html {\n    font-size: 15px;\n    font-family:  sans-serif;\n    background-color: lightgray; \n  }\n\nh1 {\n  color: red;\n}\n</code></pre> <p>Vous pouvez contempler ici le nouveau rendu de cette encore plus magnifique page.</p> <p>En savoir plus </p> <ul> <li>le cours d'OpenClassrooms : https://openclassrooms.com/fr/courses/1603881-apprenez-a-creer-votre-site-web-avec-html5-et-css3</li> </ul> <p>Exercice 2</p> <p>Reprenez votre page de l'exercice 1 et rajoutez une feuille de style.</p> <p>Exercice 3</p> <ul> <li>Allez sur le site http://sudouest.fr, et affichez l'inspecteur d'\u00e9lement de votre navigateur (g\u00e9n\u00e9ralement accessible en appuyant sur <code>F12</code> )</li> <li>Modifiez le plus possible les attributs de style de la page.</li> </ul>"},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/#2-quand-le-client-peut-agir-sur-sa-page-exemple-avec-javascript","title":"2. Quand le client peut agir sur sa page : exemple avec JavaScript","text":"<p>Jusqu'\u00e0 pr\u00e9sent, la page web envoy\u00e9e par le serveur est :</p> <ol> <li>identique quel que soit le client.</li> <li>statique apr\u00e8s r\u00e9ception sur l'ordinateur du client.</li> </ol> <p>Le JavaScript va venir r\u00e9gler le probl\u00e8me n\u00b02 : il est possible de fabriquer une page sur laquelle le client va pouvoir agir localement, sans avoir \u00e0 redemander une nouvelle page au serveur.</p> <p>Invent\u00e9 en 1995 par Brendan Eich pour le navigateur Netscape, le langage JavaScript s'est impos\u00e9 comme la norme aupr\u00e8s de tous les navigateurs pour apporter de l'interactivit\u00e9 aux pages web.</p> <p>Exemple de couple <code>html</code> / <code>javascript</code> minimal</p> <p>Notre fichier <code>index.html</code> fait r\u00e9f\u00e9rence, au sein d'une balise <code>&lt;script&gt;</code>, \u00e0 un fichier externe <code>script.js</code> qui contiendra notre code JavaScript.   </p> <ul> <li> <p>fichier <code>index.html</code> :  HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;un peu d'action&lt;/title&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n    &lt;p&gt;\n    &lt;h2&gt;Une page web extr\u00eamement dynamique&lt;/h2&gt;\n    &lt;/p&gt;\n    &lt;div&gt;\n\n        &lt;label&gt;Changez la couleur d'arri\u00e8re-plan:&lt;/label&gt;\n\n        &lt;button type=\"button\" onclick=\"choix('yellow');\"&gt;jaune&lt;/button&gt;\n\n        &lt;button type=\"button\" onclick=\"choix('green');\"&gt;vert&lt;/button&gt;\n\n        &lt;button type=\"button\" onclick=\"choix('purple');\"&gt;violet&lt;/button&gt; \n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;p&gt;\n      En JavaScript, le nom de la couleur choisie est :\n      &lt;/p&gt;\n      &lt;p id=\"resultat\"&gt;&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p>fichier <code>script.js</code> : JavaScript<pre><code>function choix(color){\n    document.body.style.background = color;\n    document.getElementById(\"resultat\").innerHTML=color;\n}\n</code></pre></p> </li> </ul> <p>Le r\u00e9sultat de cette page peut \u00eatre consult\u00e9 ici. (oui, j'ai confondu le jaune et le rose)</p> <p>Commentaires</p> <ul> <li>Au sein du bouton d\u00e9clar\u00e9 par la balise <code>button</code>, l'attribut  <code>onclick</code> re\u00e7oit le nom d'une fonction d\u00e9clar\u00e9e \u00e0 l'int\u00e9rieur du fichier <code>script.js</code>, ici la fonction <code>choix()</code>.</li> <li>Cette fonction nous permet de modifier \u00e0 la fois l'aspect esth\u00e9tique de la page (changement de la couleur de background) mais aussi le contenu de cette page, en faisant afficher le nom de la couleur.</li> </ul> <p>La puissance du JavaScript permet de r\u00e9aliser aujourd'hui des interfaces utilisateurs tr\u00e8s complexes au sein d'un navigateur, \u00e9quivalentes \u00e0 celles produites par des logiciels externes (pensez \u00e0 Discord, par ex.). Bien s\u00fbr, dans ces cas complexes, le serveur est aussi sollicit\u00e9 pour modifier la page, comme nous le verrons en partie 3.</p> <p>En savoir plus</p> <ul> <li>le guide JavaScript de la fondation Mozilla : https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide</li> <li>le cours d'OpenClassrooms : https://openclassrooms.com/fr/courses/2984401-apprenez-a-coder-avec-javascript</li> </ul> <p>Exercice 4</p> <ul> <li>Reprenez votre page cr\u00e9\u00e9e aux exercices pr\u00e9c\u00e9dents et rajoutez du JavaScript pour la rendre dynamique. Vous \u00eates libres !</li> </ul>"},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/#3-quand-la-page-est-fabriquee-a-la-demande-pour-le-client-exemple-avec-php","title":"3. Quand la page est fabriqu\u00e9e \u00e0 la demande pour le client : exemple avec PHP","text":"<p>Rappelons que toutes les pages que nous avons cr\u00e9\u00e9es jusqu'\u00e0 pr\u00e9sent sont uniform\u00e9ment envoy\u00e9es par le serveur au client. Aucune \u00abpr\u00e9paration\u00bb de la page en amont n'a lieu sur le serveur, aucun dialogue n'a lieu avec le serveur une fois que la page a \u00e9t\u00e9 livr\u00e9e.  \u00c9videmment, si le web \u00e9tait comme ceci, il ne serait qu'une gigantesque biblioth\u00e8que en consultation seule (ce fut le cas pendant longtemps, et ce qui n'\u00e9tait d\u00e9j\u00e0 pas si mal).</p> <p>Les langages serveurs, parmi lesquels PHP (pr\u00e9sent sur environ 80% des serveurs), Python (via le framework Django), Java, Ruby, C#, permettent de rajouter de l'interactivit\u00e9 c\u00f4t\u00e9 serveur.</p> <p>Il convient de rappeler la diff\u00e9rence fondamentale entre une page statique (c\u00f4t\u00e9 serveur) et une page dynamique (c\u00f4t\u00e9 serveur) :</p>"},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/#31-page-statique-cote-serveur","title":"3.1 Page statique (c\u00f4t\u00e9 serveur) :","text":"<p>Lors d'une requ\u00eate d'un client vers un serveur, si le client demande la page <code>index.html</code>, une copie exacte du fichier <code>index.html</code> est transmise au client sur sa machine.  </p> <p>Exemple : la page http://glassus1.free.fr/interesting.html que vous avez d\u00e9j\u00e0 consult\u00e9e se trouve telle quelle sur le serveur mis \u00e0 disposition par Free pour l'h\u00e9bergement des pages personnelles :</p> <p></p> <p>Depuis votre navigateur, l'affichage du code-source (par Ctrl-U) vous donnera le fichier html tel qu'il \u00e9tait stock\u00e9 sur le serveur.</p>"},{"location":"T7_IHM_Web/7.1_Interactions_page_web/cours/#32-page-dynamique-cote-serveur","title":"3.2  Page dynamique (c\u00f4t\u00e9 serveur) :","text":"<p>Lors d'une requ\u00eate d'un client vers un serveur, si le client demande la page <code>test.php</code>, un code html est g\u00e9n\u00e9r\u00e9 \u00e0 partir  du fichier <code>test.php</code>  puis est transmise au client sur sa machine. Le fichier transmis ne contient plus de balises <code>php</code>, il ne comporte que des balises <code>html</code> classiques.  </p> <p>Exemple : la consultation de la page http://glassus1.free.fr/test.php va renvoyer la page suivante :</p> <p></p> <p>dont le code-source est :</p> <p></p> <p>Notez bien que ce code-source ne contient que du <code>html</code>.</p> <p>Allons regarder cette page du c\u00f4t\u00e9 du serveur :</p> <p></p> <p>Le contenu de cette page est :</p> PHP<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;Quel jour sommes-nous&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;p&gt;\n    &lt;?php\n    $date = date(\"d-m-Y\");\n    Print(\"Nous sommes le $date\");\n    ?&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>On y rep\u00e8re la balise <code>&lt;?php&gt;</code> : PHP<pre><code>    &lt;?php\n    $date = date(\"d-m-Y\");\n    Print(\"Nous sommes le $date\");\n    ?&gt;\n</code></pre> Ce code <code>php</code> a donc g\u00e9n\u00e9r\u00e9, lors de l'appel au serveur, le code <code>html</code> :</p> HTML<pre><code>Nous sommes le 13-04-2020\n</code></pre> <p>Vous pouvez tester du code PHP et la page g\u00e9n\u00e9r\u00e9e par exemple sur ce site.</p> <p>Voil\u00e0 comment un serveur peut adapter la page qu'il renvoie, suivant l'utilisateur qui la demande. Nous verrons prochainement comment par des requ\u00eates le client peut envoyer des param\u00e8tres au serveur, et comment celui-ci modifie sa r\u00e9ponse en cons\u00e9quence.</p> <p>En savoir plus : https://www.php.net/manual/fr/tutorial.firstpage.php</p>"},{"location":"T7_IHM_Web/7.2_Protocole_HTTP/cours/","title":"6.2 Protocole HTTP : \u00e9tude du chargement d'une page web","text":""},{"location":"T7_IHM_Web/7.2_Protocole_HTTP/cours/#le-protocole-http-des-requetes-et-des-reponses","title":"Le protocole HTTP : des requ\u00eates et des r\u00e9ponses","text":"<p>HTTP (HyperText Transfer Protocol) est le protocole qui r\u00e9git la communication entre :  </p> <ul> <li>le client (la machine de l'utilisateur qui souhaite obtenir une page web). On dit que le client effectue une requ\u00eate.  </li> <li>le serveur (la machine sur laquelle sont stock\u00e9s les fichiers n\u00e9cessaires \u00e0 l'affichage de cette page web). Le serveur va renvoyer une r\u00e9ponse.</li> </ul> <p></p>"},{"location":"T7_IHM_Web/7.2_Protocole_HTTP/cours/#deroule-dune-requete","title":"D\u00e9roul\u00e9 d'une requ\u00eate","text":"<p>Prenons pour exemple la requ\u00eate d'un navigateur vers la page http://glassus1.free.fr/interesting.html </p> <ul> <li>le navigateur analyse l'url : la demande concerne la page <code>interesting.html</code>, stock\u00e9e sur le serveur <code>glassus1.free.fr</code>.  </li> <li>une demande est pr\u00e9alablement effectu\u00e9e aupr\u00e8s pour obtenir l'adresse IP du serveur <code>glassus1.free.fr</code> (qui est en fait un sous-domaine du serveur des pages personnelles de l'op\u00e9rateur Free). Ici, l'adresse IP sera <code>212.27.63.111</code> (on la retrouvera dans la capture de la fen\u00eatre d'Outils de dev\u00e9loppement).</li> <li>la requ\u00eate est effectu\u00e9e sur le port 80 de l'adresse <code>212.27.63.111</code>.</li> <li>la r\u00e9ponse est envoy\u00e9e au navigateur, qui en extrait la charge utile et proc\u00e8de \u00e0 l'affichage de la page.</li> </ul>"},{"location":"T7_IHM_Web/7.2_Protocole_HTTP/cours/#analyse-a-laide-dun-navigateur","title":"Analyse \u00e0 l'aide d'un navigateur","text":"<p>Observons \u00e0 partir de l'Inspecteur d'\u00e9l\u00e9ment d'un navigateur (ici Firefox) les informations qui transitent lors de la requ\u00eate et de la r\u00e9ponse.</p> <p></p> <ul> <li>Point 1 : La requ\u00eate de type GET vers l'url <code>http://glassus1.free.fr/interesting.html</code> a g\u00e9n\u00e9r\u00e9 un code de r\u00e9ponse 200 OK, ce qui signifie que la requ\u00eate a \u00e9t\u00e9 trait\u00e9e et que la r\u00e9ponse contenant la page a \u00e9t\u00e9 envoy\u00e9e. Vous pouvez trouver \u00e0 l'adresse https://developer.mozilla.org/fr/docs/Web/HTTP/Status la totalit\u00e9 des codes de r\u00e9ponse possibles.  Citons par exemple : <ul> <li>304 Not Modified : la page n'a pas eu besoin d'\u00eatre renvoy\u00e9e, elle indique au navigateur d'aller la rechercher dans son cache. On peut obtenir ce code de r\u00e9ponse en actualisant la page actuelle <code>http://glassus1.free.fr/interesting.fr</code> (qui est une page ultra-basique, et n'\u00e9volue pas). Pour r\u00e9-obtenir un code 200, il faut faire un hard-refresh en appuyant sur Maj pendant l'actualisation.</li> <li>403 Forbidden : le client n'a pas le droit d'acc\u00e8s \u00e0 la page.</li> <li>404 Not Found : la page demand\u00e9e est introuvable</li> <li>500 Internal Server Error : le serveur a rencontr\u00e9 une erreur qu'il ne sait pas traiter.</li> </ul> </li> </ul> <p></p> <ul> <li>Point 2 : en observant la taille totale des donn\u00e9es transf\u00e9r\u00e9es (388 octets), on peut comprendre que la r\u00e9ponse faite par le serveur est constitu\u00e9e :<ul> <li>d'un En-t\u00eate (264 octets) qui contient : \ud83d\udccb Texte<pre><code>HTTP/1.1 200 OK\nDate: Wed, 22 Apr 2020 08:02:01 GMT\nServer: Apache/ProXad [Jan 23 2019 19:58:42]\nLast-Modified: Sun, 12 Apr 2020 16:39:55 GMT\nETag: \"15d7c75-7c-5e93445b\"\nConnection: close\nAccept-Ranges: bytes\nContent-Length: 124\nContent-Type: text/html\n</code></pre></li> <li>du corps de la R\u00e9ponse (dont on sait d'apr\u00e8s l'en-t\u00eate qu'il p\u00e8se 124 octets). Ce corps de la r\u00e9ponse est la charge utile de la r\u00e9ponse. Elle contient ici le code html de la page : \ud83d\udccb Texte<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Waouh&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nCeci est vraiment une jolie page web.\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul> </li> </ul> <p>Remarque : on peut observer que le navigateur a aussi effectu\u00e9 (de sa propre initiative) une requ\u00eate vers un fichier <code>favicon.ico</code> qui est l'icone de la page web dans les onglets du navigateur ou la barre de favoris. Ce fichier \u00e9tait bien pr\u00e9sent sur le serveur (ce n'est pas toujours le cas), il a donc \u00e9t\u00e9 envoy\u00e9 dans la r\u00e9ponse du serveur. </p> <p>De mani\u00e8re g\u00e9n\u00e9rale, une requ\u00eate vers un site web moins \u00e9l\u00e9mentaire va occasionner une multitude de r\u00e9ponses.</p> <p>Par exemple, l'appel au site <code>www.lyceemauriac.fr</code> g\u00e9n\u00e8re 129 requ\u00eates/r\u00e9ponses diff\u00e9rentes, compos\u00e9es de fichiers html, css, js, de fichiers de fontes woff2, d'images jpg, png...</p> <p></p>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/","title":"6.3 Requ\u00eates GET, POST et formulaires","text":""},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#1-cote-client-comment-envoyer-des-parametres-a-un-serveur","title":"1. C\u00f4t\u00e9 client : comment envoyer des param\u00e8tres \u00e0 un serveur ?","text":""},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#11-la-methode-get","title":"1.1. La m\u00e9thode GET","text":"<p>Consid\u00e9rons le formulaire suivant, inclus dans une page html ouverte dans le navigateur du client :</p> HTML<pre><code>Le mot de passe est :\n&lt;form action=\"cible2.php\" method=\"get\"&gt;\n&lt;p&gt;\n    &lt;input type=\"password\" name=\"pass\" /&gt; \n    &lt;input type=\"submit\" value=\"Valider\" /&gt;\n&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Aper\u00e7u :</p> <p></p> <p>Explications :</p> <ul> <li>le fichier <code>cible2.php</code> est le fichier sur le serveur qui recevra les param\u00e8tres contenus dans le formulaire.</li> <li>le param\u00e8tre sera nomm\u00e9 <code>pass</code> et sera de type <code>password</code>, ce qui signifie qu'on n'affichera pas les caract\u00e8res tap\u00e9s par l'utilisateur. On aurait pu aussi avoir un type :<ul> <li><code>text</code> : le texte s'affiche en clair (pour les login par ex) </li> <li><code>radio</code> : pour une s\u00e9lection (d'un seul \u00e9l\u00e9ment)</li> <li><code>checkbox</code> : pour une s\u00e9lection (\u00e9ventuellement multiple)</li> </ul> </li> <li>un bouton comportant le label \u00abValider\u00bb d\u00e9clenchera l'envoi (gr\u00e2ce au type particulier <code>submit</code>) des param\u00e8tres (ici un seul, la variable <code>pass</code>) au serveur.</li> </ul>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#test","title":"Test :","text":"<ol> <li>Rendez-vous sur la page http://glassus1.free.fr/ex_get.html et testez un mot de passe.</li> <li>Observez attentivement l'url de la page sur laquelle vous \u00eates arriv\u00e9s. Que remarquez-vous ?</li> </ol>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#la-methode-get-et-la-confidentialite","title":"La m\u00e9thode GET et la confidentialit\u00e9 :","text":"<p>Les param\u00e8tres pass\u00e9s au serveur par la m\u00e9thode GET sont transmis dans l'url de la requ\u00eate. Ils sont donc lisibles en clair par n'importe qui.</p> <p></p> <p>\u00c9videmment, c'est une m\u00e9thode catastrophique pour la transmission des mots de passe. Par contre, c'est une m\u00e9thode efficace pour acc\u00e9der directement \u00e0 une page particuli\u00e8re : ainsi l'url https://www.google.fr/search?q=bordeaux nous am\u00e8nera directement au r\u00e9sultat de la recherche Google sur le mot-cl\u00e9 \u00abbordeaux\u00bb.</p>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#12-la-methode-post","title":"1.2. La m\u00e9thode POST","text":"<p>Dans notre code de formulaire du 1.1, modifions l'attribut <code>method</code>, auparavant \u00e9gal \u00e0 <code>\"get\"</code>. Passons-le \u00e9gal \u00e0 <code>\"post\"</code>  :</p> HTML<pre><code>Le mot de passe est :\n&lt;form action=\"cible2.php\" method=\"post\"&gt;\n&lt;p&gt;\n    &lt;input type=\"password\" name=\"pass\" /&gt; \n    &lt;input type=\"submit\" value=\"Valider\" /&gt;\n&lt;/p&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#test_1","title":"Test :","text":"<ol> <li>Rendez-vous sur la page http://glassus1.free.fr/ex_post.html et testez un mot de passe.</li> <li>Observez attentivement l'url de la page sur laquelle vous \u00eates arriv\u00e9s. Que remarquez-vous ?</li> </ol>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#la-methode-post-et-la-confidentialite","title":"La m\u00e9thode POST et la confidentialit\u00e9 :","text":"<p>Les param\u00e8tres pass\u00e9s au serveur par la m\u00e9thode POST ne sont pas visibles dans l'url de la requ\u00eate. Ils sont contenus dans le corps de la requ\u00eate, mais non affich\u00e9s sur le navigateur.</p> <p></p> <p>Donc, la transmission du mot de passe est bien s\u00e9curis\u00e9e par la m\u00e9thode POST ? </p> <p> Pas du tout ! Si le protocole de transmission est du <code>http</code>  et non pas du <code>https</code>, n'importe qui interceptant le trafic peut lire le contenu de la requ\u00eate et y trouver le mot de passe en clair.</p> <p>Exemple avec Wireshark :</p> <p></p> <p>Le contenu de la variable <code>\"pass\"</code> est donc visible dans le contenu de la requ\u00eate. </p> <p>Le passage en <code>https</code> chiffre le contenu de la requ\u00eate et emp\u00eache donc la simple lecture du mot de passe.</p>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#resume-quand-utiliser-get-ou-post","title":"R\u00e9sum\u00e9 : quand utiliser GET ou POST ?","text":"<ul> <li>GET : la m\u00e9thode GET doit \u00eatre utilis\u00e9e quand les param\u00e8tres \u00e0 envoyer :<ul> <li>n'ont pas de caract\u00e8re confidentiel. </li> <li>n'ont pas vocation \u00e0 cr\u00e9er des modifications sur le serveur (ceci est plus une bonne pratique qu'une interdiction technique)</li> <li>ne sont pas trop longs. En effet, vu qu'ils seront contenus dans l'url, il peut exister des limites de longueur sp\u00e9cifiques au navigateur. Une taille inf\u00e9rieure \u00e0 2000 caract\u00e8re est conseill\u00e9e. Si vous vous demandez \u00e0 quoi peuvent servir des url si longues, songez \u00e0 ce type d'url, (ici PythonTutor) o\u00f9 le code du programme \u00e0 analyser est contenu dans l'url :  http://pythontutor.com/visualize.html#code=L%20%3D%20%5B2,%203,%206,%207,%2011,%2014,%2018,%2019,%2024%5D%0A%0Adef%20trouve_dicho%28L,%20n%29%20%3A%0A%20%20%20%20indice_debut%20%3D%200%0A%20%20%20%20indice_fin%20%3D%20len%28L%29%20-%201%0A%20%20%20%20while%20indice_debut%20%3C%3D%20indice_fin%20%3A%0A%20%20%20%20%20%20%20%20indice_centre%20%3D%20%28indice_debut%20%2B%20indice_fin%29%20//%202%0A%20%20%20%20%20%20%20%20valeur_centrale%20%3D%20L%5Bindice_centre%5D%0A%20%20%20%20%20%20%20%20if%20valeur_centrale%20%3D%3D%20n%20%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20indice_centre%0A%20%20%20%20%20%20%20%20if%20valeur_centrale%20%3C%20n%20%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20indice_debut%20%3D%20indice_centre%20%2B%201%0A%20%20%20%20%20%20%20%20else%20%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20indice_fin%20%3D%20indice_centre%20-%201%0A%20%20%20%20return%20None%0A%0Aprint%28trouve_dicho%28L,14%29%29&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false </li> </ul> </li> <li> <p>POST : la m\u00e9thode POST doit \u00eatre utilis\u00e9e quand les param\u00e8tres \u00e0 envoyer :</p> <ul> <li>ont un caract\u00e8re confidentiel (attention, \u00e0 coupler imp\u00e9rativement avec un protocole de chiffrement).</li> <li>peuvent avoir une longueur tr\u00e8s importante (le param\u00e8tre \u00e9tant dans le corps de la requ\u00eate et non plus dans l'url, sa longueur peut \u00eatre arbitraire).</li> <li>ont vocation \u00e0 provoquer des changements sur le serveur. Ainsi, un ordre d'achat sur un site de commerce sera n\u00e9cessairement pass\u00e9 par une m\u00e9thode POST. Les navigateurs pr\u00e9viennent alors le risque de \u00abdouble commande\u00bb lors d'une actualisation malencontreuse de la page par l'utilisateur par la fen\u00eatre :</li> </ul> <p></p> <p>Cette fen\u00eatre est caract\u00e9ristique de l'utilisation d'une m\u00e9thode POST.</p> </li> </ul>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#2-cote-serveur-comment-recuperer-les-parametres-envoyes","title":"2. C\u00f4t\u00e9 serveur : comment r\u00e9cup\u00e9rer les param\u00e8tres envoy\u00e9s ?","text":"<p>Du c\u00f4t\u00e9 du serveur, le langage utilis\u00e9 (PHP, Java...) doit r\u00e9cup\u00e9rer les param\u00e8tres envoy\u00e9s pour modifier les \u00e9lements d'une nouvelle page, mettre \u00e0 jour une base de donn\u00e9es, etc. Comment sont r\u00e9cup\u00e9r\u00e9es ces valeurs ? </p>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#exemple-en-php","title":"Exemple en PHP","text":"<p>L'acronyme PHP signifie **P**HP : **H**ypertext **P**rocessor (c'est un acronyme r\u00e9cursif).</p> <p>Notre exemple va contenir deux fichiers :</p> <ul> <li>une page <code>page1.html</code> , qui contiendra un formulaire et qui renverra, par la m\u00e9thode GET, un param\u00e8tre \u00e0 la page <code>page2.php</code>.</li> <li>une page <code>page2.php</code> , qui g\u00e9n\u00e8rera un code <code>html</code> personnalis\u00e9 en fonction du param\u00e8tre re\u00e7u.  </li> </ul>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#page1html","title":"<code>page1.html</code>","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;exemple&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n Votre OS actuel est un : \n&lt;form action=page2.php method=\"get\"&gt;\n&lt;p&gt;\n    &lt;input type=\"radio\" name=\"OS\" value=\"Windows\"&gt; Windows &lt;/input&gt;\n    &lt;input type=\"radio\" name=\"OS\" value=\"MacOS\"&gt; MacOS &lt;/input&gt;\n    &lt;input type=\"radio\" name=\"OS\" value=\"GNU/Linux\"&gt; GNU/Linux &lt;/input&gt;\n&lt;/p&gt;\n&lt;p&gt; \n    &lt;input type=\"submit\" value=\"Valider\" /&gt;\n&lt;/p&gt;\n&lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#page2php","title":"<code>page2.php</code>","text":"PHP<pre><code> &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;Le meilleur OS&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n &lt;p&gt;\n    &lt;?php\n  if (isset($_GET['OS']))\n  {\n    Print(\"Vous avez raison, \");\n  echo $_GET['OS'];\n  Print(\" est le meilleur des OS.\");\n  }\n    ?&gt;\n    &lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#detail-du-fonctionnement","title":"D\u00e9tail du fonctionnement :","text":"<ol> <li>\u00c0 l'arriv\u00e9e sur la page <code>page1.html</code>, un formulaire de type boutons radio lui propose :  </li> <li>Lorsque l'utilisateur clique sur \u00abValider\u00bb, la variable nomm\u00e9e <code>OS</code> va recevoir la valeur choisie et va \u00eatre transmise par une requ\u00eate GET \u00e0 l'url donn\u00e9e par la variable <code>action</code> d\u00e9finie en d\u00e9but de formulaire.  Ici, le navigateur va donc demander \u00e0 acc\u00e9der \u00e0 la page <code>page2.php?OS=MacOS</code> (par exemple)</li> <li>Le serveur PHP qui h\u00e9berge la page <code>page2.php</code> va recevoir la demande d'acc\u00e8s \u00e0 la page ainsi que la valeur de la variable <code>OS</code>.  Dans le code PHP, on reconnait :<ul> <li>le bool\u00e9en <code>isset($_GET['OS'])</code>  qui v\u00e9rifie si le param\u00e8tre <code>OS</code> a bien re\u00e7u une valeur.</li> <li>l'expression <code>$_GET['OS']</code> qui r\u00e9cup\u00e8re cette valeur.   Si la valeur avait \u00e9t\u00e9 transmise par m\u00e9thode POST (pour un mot de passe, par exemple), la variable aurait \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9e par <code>$_POST['OS']</code>. Elle n'aurait par contre pas \u00e9t\u00e9 affich\u00e9e dans l'url de la page.</li> </ul> </li> <li>La page <code>page2.php?OS=MacOS</code> s'affiche sur le navigateur de l'utilisateur :</li> </ol>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#remarque","title":"Remarque","text":"<p>L'exemple ci-dessus est un mauvais exemple : rien ne justifie l'emploi d'un serveur distant. L'affichage de ce message aurait tr\u00e8s bien pu se faire en local sur le navigateur du client, en Javascript par exemple.</p> <p>L'envoi de param\u00e8tre \u00e0 un serveur distant est n\u00e9cessaire pour aller interroger une base de donn\u00e9es, par exemple (lorsque vous remplissez un formulaire sur le site de la SNCF, les bases de donn\u00e9es des horaires de trains, des places disponibles et de leurs tarifs ne sont pas h\u00e9berg\u00e9es sur votre ordinateur en local...).</p> <p>La v\u00e9rification d'un mot de passe doit aussi se faire sur un serveur distant.</p>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#exercice-attaque-par-force-brute-et-requete-get","title":"Exercice : attaque par force brute et requ\u00eate GET","text":""},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#pre-requis-1-le-module-requests-en-python","title":"Pr\u00e9-requis 1 : le module <code>requests</code> en python","text":"<p>Le module <code>requests</code> permet d'aller chercher le contenu d'une page web, suivant la syntaxe ci-dessous. Testez le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>import requests\np = requests.get(\"http://glassus1.free.fr/interesting.html\", verify = False)\nprint(p.text)\n</code></pre> <p>La sortie en console est :</p> \ud83d\udccb Texte<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n\n&lt;title&gt;Waouh&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\nCeci est vraiment une jolie page web.\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Notre programme Python se comporte donc \u00abcomme un navigateur\u00bb : il se rend sur une page, effectue une requ\u00eate et r\u00e9cup\u00e8re la page renvoy\u00e9e.</p>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#pre-requis-2-lextraction-dun-fichier-texte-sous-forme-de-liste","title":"Pr\u00e9-requis 2 : l'extraction d'un fichier texte sous forme de liste","text":"<p>Le code ci-dessous permet de collecter dans une liste <code>mots</code> l'ensemble des mots compris dans le fichier <code>monfichiertexte.txt</code> (si celui-ci comprend un mot par ligne) </p> \ud83d\udc0d Script Python<pre><code>mots = open(\"monfichiertexte.txt\").read().splitlines()\n</code></pre>"},{"location":"T7_IHM_Web/7.3_Get_Post_Formulaires/cours/#exercice","title":"Exercice :","text":"<p>Votre objectif est de trouver le mot de passe demand\u00e9 sur la page http://glassus1.free.fr/exoBF.html</p> <p>Vous allez vous appuyer sur un leak (fuite) tr\u00e8s c\u00e9l\u00e8bre de mots de passe , qui est le leak du site Rockyou. Dans la base de donn\u00e9es de ce site, 32 millions de mots de passe \u00e9taient stock\u00e9s en clair <code>\u00af\\_(\u30c4)_/\u00af</code>.</p> <p>Lorsque le site a \u00e9t\u00e9 pirat\u00e9 (par une injection SQL, voir le cours de Terminale), ces 32 millions de mots de passe se sont retrouv\u00e9s dans la nature. Ils sont aujourd'hui t\u00e9l\u00e9chargeables librement, et constituent un dictionnaire de 14 341 564 mots de passe diff\u00e9rents (car parmi les 32 millions d'utilisateurs, beaucoup utilisaient des mots de passe identiques). Ce fichier est t\u00e9l\u00e9chargeable ici, mais attention il p\u00e8se 134 Mo.</p> <p>Nous allons utiliser un fichier beaucoup plus l\u00e9ger ne contenant que les 1000 premiers mots de passe : vous le trouverez \u00e0 l'adresse http://glassus1.free.fr/extraitrockyou.txt .</p> <p>L'un de ces mots de passe est le mot de passe demand\u00e9 \u00e0 la page  http://glassus1.free.fr/exoBF.html .</p> <p>Lequel ?</p> Correction \ud83d\udc0d Script Python<pre><code>import requests\n\npage_error = requests.get(\"http://glassus1.free.fr/repBF.php?pass=\")\n\nliste_mdp = open(\"extraitrockyou.txt\").read().splitlines()\n\nurl = \"http://glassus1.free.fr/repBF.php?pass=\"\n\nfor mdp in liste_mdp:\n    new_url = url + mdp\n    print(new_url)\n    page_tentative = requests.get(new_url)\n    if page_tentative.text != page_error.text:\n        print(\"Le mot de passe est le suivant :\", mdp)\n        break\n</code></pre>"},{"location":"T8_Projets/1_SiteWeb/cours/","title":"Mini Projet : site Web","text":"<p>Consignes</p> <p>Cr\u00e9er un site web sur un personnage historique du monde informatique.</p> <p>Vous utiliserez les langages HTML5 et CSS3.  </p> <p></p> <p>\u26a0\ufe0f Vous veillerez \u00e0 s\u00e9parer strictement le fond et la forme </p> <p>\ud83d\udcc6 Restitution attendue : Pour le Vendredi 13 novembre 2023</p> <p>Vous trouverez ci-dessous les minimas attendus sur ce travail \u00e0 faire. </p>"},{"location":"T8_Projets/1_SiteWeb/cours/#les-attendus","title":"Les attendus","text":"<ul> <li>\u27a1\ufe0fLes pages html devront \u00eatre valides W3C pour le HTML5. </li> <li>\u27a1\ufe0f Les indications CSS devront \u00eatre conforme au standard CSS3. </li> </ul>"},{"location":"T8_Projets/1_SiteWeb/cours/#les-elements-obligatoires","title":"Les \u00e9l\u00e9ments obligatoires","text":"<ul> <li>\u27a1\ufe0f Un minimum de 2 page coh\u00e9rente et structur\u00e9e <ul> <li>pr\u00e9sentation de la personne</li> <li>contexte historique</li> <li>apports scientifiques ou technologiques</li> <li>impact pour la soci\u00e9t\u00e9) </li> </ul> </li> <li>\u27a1\ufe0f Les balises meta : encodage, auteur, Mots-cl\u00e9s </li> <li>\u27a1\ufe0f Utiliser la richesse du langage HTML5 pour d\u00e9couper vos pages s\u00e9mantiquement avec les balises <code>html &lt;header&gt; &lt;footer&gt; &lt;nav&gt;</code></li> <li>\u27a1\ufe0f Une ou plusieurs images l\u00e9gend\u00e9es (attention \u00e0 utiliser des images libres de droits et/ou d\u2019en citer la source) </li> <li>\u27a1\ufe0f Un ou plusieurs liens externes et internes </li> </ul> <p>Conseil</p> <ul> <li>Proc\u00e9dez par \u00e9tape en v\u00e9rifiant \u00e0 chaque fois le r\u00e9sultat et en validant le W3C.</li> <li>Sauvegardez r\u00e9guli\u00e8rement votre travail et pensez \u00e0 le sauvegarder \u00e0 deux endroits diff\u00e9rents. </li> </ul>"},{"location":"T8_Projets/1_SiteWeb/cours/#figures-de-linformatique","title":"Figures de l'informatique","text":"num\u00e9ro nom Photo 1 Ada Lovelace 2 Alan Turing 3 Donald Knuth 4 Bill Gates 5 Heidi Lamar 6 Steve Jobs 7 Aaron Swartz 8 Grace Hopper 9 Linus Torvalds 10 Margaret Hamilton 11 Sergue\u00ef Brin 12 Larry Page 13 Richard Stallman 14 Guido Van Rossum 15 Dennis Ritchie 16 John Conway 17 Dorothy Vaughan 18 Charles Babbage 19 John Von Neumann 20 Georges Boole 21 Gordon Moore 22 Tim Berners Lee 23 Brian Kernighan"},{"location":"T8_Projets/1_SiteWeb/cours/#criteres-devaluation","title":"Crit\u00e8res d'\u00e9valuation","text":""},{"location":"T8_Projets/2_ProjetCSV/cours/","title":"Mini Projet : Analyse de donn\u00e9es","text":"<p>Projet exemple</p> <p>sources : les monuments de Paris</p> <p>Installation de la biblioth\u00e8que FOLIUM : Lancer Anaconda. Puis aller dans les applications Windows pour lancer la console Anaconda Prompt. Taper la commande suivante : <code>pip install folium</code> V\u00e9rifier qu\u2019il n\u2019y a pas d\u2019erreur dans la console. </p> <p>A faire : Ouvrir dans Spyder le programme <code>monuments_paris.py</code>et le lancer. \u26a0\ufe0f les deux fichiers <code>monuments_paris.py</code> et <code>monuments_GPS.csv</code> doivent se trouver le m\u00eame r\u00e9pertoire.  Cela g\u00e9n\u00e8re un fichier <code>maCarte4.html</code> qui devrait se trouver dans le m\u00eame r\u00e9pertoire que votre programme. Analyse : Analyser les diff\u00e9rentes fonctions qui vous sont fourni. </p> <p>Consignes</p> <p>Il s\u2019agit ici de prendre en charge un jeu de donn\u00e9es (open DataSet), de l\u2019exploiter et d\u2019en faire une restitution graphique. Nous allons partir sur un mini-projet, \u00e0 rendre apr\u00e8s les vacances le Vendredi 5 Mai 2023 et r\u00e9alis\u00e9 en BINOME.</p> <p>Consignes g\u00e9n\u00e9rales : A partir d\u2019une source de donn\u00e9es choisies ou cr\u00e9\u00e9es par vous, cr\u00e9er un programme Python d\u2019acquisition (\u00e0 partir d\u2019un fichier CSV) et de restitution de donn\u00e9es. La restitution pourra \u00eatre source forme de tableaux (biblioth\u00e8que panda), de graphique (biblioth\u00e8que matplotlib) ou de carte (biblioth\u00e8que folium)</p>"},{"location":"T8_Projets/2_ProjetCSV/cours/#les-donnees","title":"Les donn\u00e9es :","text":"<p>Biblioth\u00e8ques de donn\u00e9es (la liste est donn\u00e9e \u00e0 titre indicative, il existe d\u2019autres sources de donn\u00e9es) : \u25b6\ufe0f openData Gouv \u25b6\ufe0f openData Bretagne \u25b6\ufe0f Kaggle \u25b6\ufe0f onisep</p>"},{"location":"T8_Projets/2_ProjetCSV/cours/#aide","title":"AIDE :","text":"<p>Tutoriel biblioth\u00e8que Panda :  - cours - tuto d initiation panda et matplotlib</p>"},{"location":"T8_Projets/2_ProjetCSV/cours/#idee-de-projet","title":"IDEE de PROJET :","text":"<p> Evolution du nombre de morts par \u00e9pisodes dans Games of Thrones  Origines g\u00e9ographiques des passagers du Titanic  Cartographies des monuments remarquables en Bretagne  Analyse des l\u2019origine des TOP1 de Spotify sur les 5 derni\u00e8res ann\u00e9es  \u2026.</p>"},{"location":"T8_Projets/2_ProjetCSV/cours/#evaluation","title":"Evaluation :","text":"<p>Vous trouverez la fiche d'\u00e9valuation ici \ud83d\udcd6 Vous veillerez \u00e0 documenter vos fonctions et diff\u00e9rents programmes. \ud83d\udcc1 Vous devrez \u00e9galement fournir un document accompagnateur expliquant votre projet et votre d\u00e9marche. Le document accompagnateur pourra \u00eatre un site web, une pr\u00e9sentation sous forme de slide, ou un rapport.</p>"},{"location":"T8_Projets/3_Exposes/cours/","title":"th\u00e8me de travail","text":"<p>Consignes</p> <p>Pr\u00e9parer un expos\u00e9 en bin\u00f4me pour une dur\u00e9e de 10 minutes sur le th\u00e8me donn\u00e9. La pr\u00e9sentation se fera avec le soutien d\u2019un diaporama soign\u00e9. Une s\u00e9ance de question/r\u00e9ponse aura lieu en fin d\u2019expos\u00e9. Une liste des sources devra \u00eatre fournie en fin d\u2019expos\u00e9.</p> <p></p> <p>Exemple de th\u00e8mes :</p> <ol> <li>L\u2019informatique quantique : une nouvelle r\u00e9volution technologique</li> <li>C\u2019est quoi l\u2019intelligence artificielle ?</li> <li>P = NP</li> <li>Alan Turing a-t-il invent\u00e9 l\u2019informatique moderne ?</li> <li>Est-ce qu\u2019une I.A. peut \u00eatre sexiste ?</li> <li>Informatique dans le cloud (qu\u2019est-ce que c\u2019est ? les entreprises ont-elles besoin de poss\u00e9der un datacenter ?)</li> <li>Frontend, backend, fullstack : les diff\u00e9rents m\u00e9tiers du d\u00e9veloppeur web</li> <li>La libert\u00e9 du net : principe inamovible ou en danger</li> <li>Arpanet : l\u2019anc\u00eatre d\u2019internet</li> <li>Travailler dans le monde du jeu vid\u00e9o</li> <li>Peut-on casser tous les codes ?</li> <li>Histoires de bug</li> <li>Le green-IT</li> <li>La sonde pers\u00e9v\u00e9rance et le binaire</li> <li>La st\u00e9ganographie </li> <li>\u2026</li> </ol>"},{"location":"T9_Liens_utiles/1_Conseils_generaux/cours/","title":"Conseils de travail","text":"<p>Cr\u00e9dit</p> <ul> <li>site de C\u00e9dric Gouygou</li> </ul>"},{"location":"T9_Liens_utiles/1_Conseils_generaux/cours/#conditions-materielles","title":"Conditions mat\u00e9rielles","text":"<p>Il est conseill\u00e9 de travailler avec 3 espaces:</p> <ul> <li>l'\u00e9cran de l'ordinateur partitionn\u00e9 avec les 2 premiers espaces: ce site et un IDE (Thonny par exemple);</li> </ul> <p></p> <p>C'est en codant qu'on apprend \u00e0 coder</p> <p>Tous les exemples de code dans le cours doivent \u00eatre retap\u00e9s (r\u00e9sistez \u00e0 l'envie du copier-coller) dans Thonny, soit en fen\u00eatre de script, soit en console.</p> <p>Cela permet de :</p> <ul> <li>m\u00e9moriser la syntaxe ;</li> <li>v\u00e9rifier si le code propos\u00e9 ne contient pas d'erreur ;</li> </ul> <p>et le plus important :</p> <ul> <li>faire ses propres tests et modifications pour v\u00e9rifier sa bonne compr\u00e9hension. </li> </ul> <ul> <li>et un troisi\u00e8me espace essentiel : un petit cahier \u00e0 spirale et un stylo !</li> </ul> <p></p>"},{"location":"T9_Liens_utiles/1_Conseils_generaux/cours/#script-ou-console","title":"Script ou console ???","text":"<p>Spyder, comme la grande majorit\u00e9 des IDE Python, est compos\u00e9 de deux zones distinctes :</p> <ul> <li>la zone de script</li> <li>la console</li> </ul> <p></p> <p>La zone de script est asynchrone. Il ne se passera rien tant que vous n'aurez pas ex\u00e9cut\u00e9 le script (par F5 par exemple). C'est donc l'endroit o\u00f9 on va r\u00e9diger son programme.</p> <p>La console est synchrone : elle r\u00e9pond d\u00e8s que vous appuyez sur la touche Entr\u00e9e. Elle sert donc aux petits tests rapides, ou bien tests post-ex\u00e9cution d'un code.</p> <p>Utilisation classique du couple script / console</p> <ol> <li>On \u00e9crit son code dans la zone de script</li> <li>On l'ex\u00e9cute.</li> <li>On interroge la console pour conna\u00eetre l'\u00e9tat des variables, pour utiliser les fonctions construites dans le script.</li> </ol> <p>Pour les extraits de code pr\u00e9sents sur ce site :</p> <ul> <li>tout le code qui est pr\u00e9c\u00e9d\u00e9 d'une num\u00e9rotation de ligne est \u00e0 \u00e9crire en zone de script.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>def accueil(n):\n   for k in range(n):\n       print(\"bonjour\") \n</code></pre></p> <ul> <li>tout le code qui est pr\u00e9c\u00e9d\u00e9 <code>&gt;&gt;&gt;</code> est \u00e0 taper en console.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; accueil(5)\n</code></pre></p>"},{"location":"T9_Liens_utiles/1_Conseils_generaux/cours/#dossiers-fichiers-et-versionning","title":"Dossiers, fichiers et versionning","text":"<p>Cette ann\u00e9e en NSI nous allons manipuler un certain nombre de fichiers. Il est important de les nommer et les classer de fa\u00e7on rigoureuse pour les retrouver rapidement et les partager.</p> <p>Conseils</p> <ul> <li>Utilisez des dossiers pour classer vos fichiers. Il n'y en a jamais assez.</li> <li>Prenez l'habitude de faire plusieurs sauvegardes de vos documents (sur le r\u00e9seau du lyc\u00e9e, sur l'ENT, sur cl\u00e9 USB).</li> <li>\u00c9vitez dans les noms de fichiers et de dossiers les espaces (utilisez plut\u00f4t _ ) ainsi que les caract\u00e8res accentu\u00e9s et les caract\u00e8res sp\u00e9ciaux.</li> <li>Un nom de fichier doit \u00eatre parlant (un peu comme une variable en fait). On \u00e9vitera de nommer ses codes Python <code>python1.py</code>, <code>python2.py</code>, <code>python3.py</code>, etc. Mais plut\u00f4t <code>1NSI_T4_tri_selection.py</code> par exemple pour un exercice de programmation sur le tri par selection au th\u00e8me 4.</li> <li>Lorsqu'on travaille sur un projet ou un programme cons\u00e9quent, il peut \u00eatre utile de conserver des archives du travail \u00e0 plusieurs \u00e9tapes de l'\u00e9laboration, plut\u00f4t que de ne conserver que la derni\u00e8re version. \u00c0 cet effet on pourra num\u00e9roter : <code>1NSI_projet_morpion_v1.py</code>, puis <code>1NSI_projet_morpion_v2.py</code>, <code>1NSI_projet_morpion_v3.py</code>, etc.</li> </ul>"},{"location":"T9_Liens_utiles/1_Conseils_generaux/cours/#usage-du-clavier","title":"Usage du clavier","text":"<p>Utiliser le clavier est souvent bien plus pratique et surtout plus rapide qu'utiliser la souris. Encore faut-il apprendre \u00e0 l'apprivoiser...</p> <p>La s\u00e9lection au clavier</p> <p>Outre les touches <code>DEBUT</code> et <code>FIN</code> qui permettent d'atteindre rapidement le d\u00e9but ou la fin d'une ligne, les fl\u00e8ches directionelles servent \u00e9videmment \u00e0 se d\u00e9placer dans du texte. Mais combin\u00e9es:</p> <ul> <li>\u00e0 la touche <code>CTRL</code> : elles permettent de se d\u00e9placer de mot en mot;</li> <li>\u00e0 la touche <code>MAJ</code> : elles permettent de s\u00e9lectionner un caract\u00e8re;</li> <li>aux touches <code>MAJ</code> et <code>CTRL</code>: elles permettent de s\u00e9lectionner un mot.</li> </ul> <p>De m\u00eame, en se pla\u00e7ant en d\u00e9but d'une ligne et en combinant la touche <code>MAJ</code> et <code>FIN</code>, on s\u00e9lectionne la ligne enti\u00e8re.</p> <p>Les raccourcis clavier</p> <p>Il existe de tr\u00e8s nombreux raccourcis clavier qui permettent d'ex\u00e9cuter des t\u00e2ches courantes sans passer par les menus du logiciel. Certains sont (quasi-)universels, c'est-\u00e0-dire que ce sont les m\u00eames sur tous les logiciels, d'autres sont sp\u00e9cifiques \u00e0 chaque logiciel. Il est important d'en conna\u00eetre quelques-uns pour \u00eatre plus efficace.</p> Les universelsIDENavigateur Web <ul> <li>La triplette magique <code>CTRL+X</code>, <code>CTRL+C</code>, <code>CTRL+V</code> pour couper, copier, coller;</li> <li><code>CTRL+O</code> pour ouvrir un fichier</li> <li><code>CTRL+N</code> pour cr\u00e9er un nouveau document;</li> <li><code>CTRL+S</code> pour sauvegarder le document en cours;</li> <li><code>CTRL+MAJ+S</code> pour sauvegarder en pr\u00e9cisant le nom du fichier;</li> <li><code>CTRL+Z</code> pour annuler la derni\u00e8re action, <code>CTRL+Y</code> ou <code>CTRL+MAJ+Z</code> pour la r\u00e9tablir;</li> <li><code>CTRL+W</code> pour fermer un onglet;</li> <li><code>CTRL+Q</code> ou <code>ALT+F4</code> pour fermer le logiciel;</li> <li><code>CTRL+A</code> pour s\u00e9lectionner tout (All).</li> </ul> <p>\u00c0 chercher de suite lorsqu'on utilise un nouvel IDE, les raccourcis pour les actions suivantes (entre parenth\u00e8ses ceux de Thonny):</p> <ul> <li>ex\u00e9cuter le code (<code>F5</code>)</li> <li>commenter/d\u00e9commenter une ligne (<code>CTRL+M</code>)</li> </ul> <ul> <li><code>CTRL+T</code> pour ouvrir un nouvel onglet;</li> <li><code>CTRL+H</code> pour ouvrir l'historique;</li> <li>combiner <code>CTRL</code> + clic pour forcer l'ouverture d'un lien dans un nouvel onglet;</li> <li>combiner <code>MAJ</code> + clic pour forcer l'ouverture d'un lien dans une nouvelle fen\u00eatre;</li> </ul> sources <ul> <li>site de C\u00e9dric Gouygou</li> </ul>"},{"location":"T9_Liens_utiles/2_Liens/liens/","title":"Liens utiles","text":"<p>source</p> <ul> <li>site de C\u00e9dric Gouygou</li> </ul>"},{"location":"T9_Liens_utiles/2_Liens/liens/#a-propos-de-la-specialite-nsi","title":"\u00c0 propos de la sp\u00e9cialit\u00e9 NSI","text":"<ul> <li>Le site Eduscol </li> </ul>"},{"location":"T9_Liens_utiles/2_Liens/liens/#pour-resoudre-des-enigmes","title":"Pour r\u00e9soudre des \u00e9nigmes","text":"<p>Quelques sites de challenges/\u00e9nigmes/d\u00e9fis de programmation:</p> <ul> <li>PyD\u00e9fis </li> <li>Hackinscience</li> <li>Advent of Code </li> <li>MicroContest </li> </ul>"},{"location":"T9_Liens_utiles/2_Liens/liens/#a-propos-de-la-culture-des-sciences-de-linformatique","title":"\u00c0 propos de la culture des sciences de l'informatique","text":"<ul> <li> <p>Interstices </p> </li> <li> <p>Inria </p> </li> </ul>"},{"location":"T9_Liens_utiles/2_Liens/liens/#pour-se-former-en-autonomie","title":"Pour se former en autonomie","text":"<p>Au cas o\u00f9 vous vous ennuieriez...</p> <ul> <li>France-IOI </li> <li>CheckIO </li> <li>CodinGame </li> </ul>"}]}